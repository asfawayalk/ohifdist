{"version":3,"sources":["webpack:///./googleCloud/utils/helpers.js","webpack:///./googleCloud/utils/CancellationToken.js","webpack:///./googleCloud/api/DicomUploadService.js","webpack:///./googleCloud/DicomUploader.js","webpack:///./googleCloud/DicomFileUploaderModal.js","webpack:///./googleCloud/ConnectedDicomFilesUploader.js","webpack:///./googleCloud/DicomStoreList.js","webpack:///./googleCloud/DicomStorePicker.js","webpack:///./googleCloud/DatasetsList.js","webpack:///./googleCloud/DatasetPicker.js","webpack:///./googleCloud/ProjectsList.js","webpack:///./googleCloud/ProjectPicker.js","webpack:///./googleCloud/LocationsList.js","webpack:///./googleCloud/LocationPicker.js","webpack:///./googleCloud/DatasetSelector.js","webpack:///./googleCloud/DicomStorePickerModal.js","webpack:///./googleCloud/ConnectedDicomStorePicker.js","webpack:///./studylist/StudyListRoute.js","webpack:///./studylist/ConnectedStudyList.js","webpack:///./studylist/StudyListRouting.js","webpack:///./googleCloud/api/GoogleCloudApi.js","webpack:///./customHooks/usePrevious.js","webpack:///./googleCloud/utils/getServers.js","webpack:///./customHooks/useServer.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js"],"names":["formatFileSize","size","n","Math","floor","log","pow","toFixed","httpErrorToStr","error","response","jsonResponse","JSON","parse","code","message","err","checkDicomFile","arrayBuffer","length","arr","Uint8Array","slice","Array","from","every","char","i","charCodeAt","CancellationToken","this","cancelled","value","files","url","uploadCallback","cancellationToken","CHUNK_SIZE","MAX_PARALLEL_JOBS","filesArray","Error","parallelJobsCount","min","completed","processJob","resolve","reject","get","chunk","simpleUpload","forEach","file","fileId","Promise","client","getClient","readFile","loadedFile","content","storeInstances","datasets","reader","FileReader","onload","name","type","result","onerror","readAsArrayBuffer","func","retrieveAuthHeaderFunc","headers","errorHandler","getHTTPErrorHandler","api","DICOMwebClient","DicomUploader","status","isCancelled","errorsCount","uploadedVolume","wholeVolumeStr","isFilesListHidden","timeLeft","uploadedList","totalCount","successfullyUploadedCount","lastFile","uploadContext","target","filesDict","fileDesc","id","path","webkitRelativePath","processed","processedInUI","wholeVolume","map","f","reduce","a","b","random","setState","dicomUploader","setRetrieveAuthHeaderFunction","props","retrieveAuthHeaderFunction","smartUpload","state","call","style","color","key","className","parseInt","Object","keys","errors","push","htmlFor","src","alt","onChange","uploadFiles","multiple","webkitdirectory","mozdirectory","percents","filesLeft","renderTableRow","Component","PropTypes","string","event","DicomFileUploaderModal","isOpen","onClose","t","UIModalService","servicesManager","services","Fragment","show","title","contentProps","propTypes","bool","isRequired","withTranslation","isActive","active","ConnectedDicomFileUploader","connect","activeServer","servers","find","OHIF","DICOMWeb","getAuthorizationHeader","qidoRoot","DicomStoreList","search","store","highlightedItem","onMouseEnter","onHighlightItem","onClick","onSelect","split","loading","stores","filter","loadingIcon","body","toLowerCase","includes","array","DicomStorePicker","locations","filterStr","setAccessToken","accessToken","loadDicomStores","dataset","isError","data","dicomStores","e","object","DatasetsList","DatasetPicker","loadDatasets","project","projectId","location","locationId","ProjectsList","projects","lowerCaseFilter","filteredProjects","ProjectPicker","loadProjects","LocationsList","LocationPicker","loadLocations","DatasetSelector","unloading","dicomStoreJson","dicomStore","parts","wadoUriRoot","GoogleCloudApi","urlBase","wadoRoot","setServers","user","access_token","onProjectClick","onLocationClick","onDatasetClick","onProjectSelect","onLocationSelect","onDatasetSelect","onDicomStoreSelect","projectBreadcrumbs","canClose","DicomStorePickerModal","GoogleCloudUtilServers","dicomstore","hide","ConnectedDicomStorePicker","oidc","dispatch","UrlUtil","utils","urlUtil","StudyListRoute","history","server","studyListFunctionsEnabled","useTranslation","useState","fieldName","direction","sort","setSort","studyDateTo","studyDateFrom","PatientName","PatientID","AccessionNumber","StudyDate","modalities","StudyDescription","patientNameOrId","accessionOrModalityOrDescription","allFields","filterValues","setFilterValues","studies","setStudies","isSearchingForStudies","searchStatus","setSearchStatus","activeModalId","setActiveModalId","rowsPerPage","setRowsPerPage","pageNumber","setPageNumber","appContext","useContext","AppContext","displaySize","useMedia","debouncedSort","useDebounce","debouncedFilters","appConfig","enableGoogleCloudAdapter","useEffect","getStudyList","console","warn","isFetching","fetchStudies","stringify","healthCareApiButtons","healthCareApiWindows","isModalOpen","listPath","RoutesUtil","paramString","isValidPath","pathname","replace","updateURL","padding","ConnectedDicomFilesUploader","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","ConnectedHeader","useLargeLogo","createLogoComponentFn","React","fontWeight","fontSize","onImport","isLoading","hasError","onSelectItem","studyInstanceUID","viewerPath","studyInstanceUIDs","onSort","sortFieldName","sortDirection","onFilterChange","studyListDateFilterNumDays","currentPage","nextPageFunc","prevPageFunc","onRowsPerPageChange","Rows","recordCount","filters","mappedFilters","ModalitiesInStudy","limit","offset","fuzzymatching","supportsFuzzyMatching","_fetchStudies","mappedStudies","study","undefined","StudyInstanceUID","sortedStudies","_sortStudies","numToTake","field","order","moment","isValid","format","fieldA","fieldB","toISOString","queryFiltersArray","firstSet","_getQueryFiltersForValue","secondSet","concat","queryPromises","searchStudiesPromise","searchStudies","all","lotsOfStudies","arrayOfStudies","some","s","fields","queryFilters","assign","defaultProps","withRouter","ConnectedStudyList","StudyListRouting","routeMatch","match","routeLocation","params","seriesInstanceUIDs","useServer","queryString","getQueryFilters","shape","urlStr","config","URL","URLSearchParams","fetch","fetchConfig","json","nextPageToken","pageToken","doRequest","subPage","hasOwnProperty","urlBaseProject","method","Authorization","healthcareApiEndpoint","usePrevious","ref","useRef","current","getServers","imageRendering","thumbnailRendering","qidoSupportsIncludeField","isValidServer","isEqualServer","toCompare","serverLength","toCompareLength","getActiveServer","pathUrl","getUrlBaseDicomWeb","useServerFromUrl","previousServers","urlBasedServers","serverHasChanged","newServer","exists","bind","useSelector","useDispatch","FileLoader","imageId","image","PDFFileLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","StudyTime","ReferringPhysicianName","PatientBirthdate","PatientSex","StudyId","series","SeriesInstanceUID","SeriesDescription","SeriesNumber","instances","metadata","SOPInstanceUID","SOPClassUID","Columns","NumberOfFrames","InstanceNumber","getImageId","isLocalFile","metadataProvider","cornerstone","DICOMFileLoader","dicomData","dcmjs","DicomMessage","DicomMetaDictionary","naturalizeDataset","dict","addInstance","_meta","namifyDataset","meta","getStudyFromDataset","PatientBirthDate","StudyID","instance","FileLoaderService","fileType","loader","getLoader","groupBy","list","groupByKey","listKey","nonKeyCounter","acc","obj","values","studyGroup","seriesGrouped","fileManager","add","loadFile","getDataset","getStudies","processFile","fileLoaderService","addFile","filesToStudies","processFilesPromises","groupSeries","flat"],"mappings":"iNAAO,SAASA,EAAeC,GAC7B,GAAa,IAATA,EAAY,MAAO,MACvB,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,IAAIJ,GAAQE,KAAKE,IAAI,OAC/C,OAC0C,GAAvCJ,EAAOE,KAAKG,IAAI,KAAMJ,IAAIK,QAAQ,GACnC,IACA,CAAC,IAAK,KAAM,KAAM,KAAM,MAAML,GAI3B,SAASM,EAAeC,GAC7B,IAAKA,EAAO,MAAO,gBACnB,GAAIA,EAAMC,SACR,IACE,IAAMC,EAAeC,KAAKC,MAAMJ,EAAMC,UACtC,GACEC,EAAaF,OACbE,EAAaF,MAAMK,MACnBH,EAAaF,MAAMM,QAEnB,OAAOJ,EAAaF,MAAMK,KAAO,MAAQH,EAAaF,MAAMM,QAC9D,MAAOC,GACP,OAAOP,EAAMC,SAGjB,OAAOD,EAAMM,SAAW,iBAInB,SAASE,EAAeC,GAC7B,GAAIA,EAAYC,QAAU,IAAK,OAAO,EACtC,IAAMC,EAAM,IAAIC,WAAWH,EAAYI,MAAM,IAAK,MAElD,OAAOC,MAAMC,KAAK,QAAQC,OAAM,SAACC,EAAMC,GAAP,OAAaD,EAAKE,WAAW,KAAOR,EAAIO,M,0KCjCrDE,E,WACnB,c,4FAAc,SACZC,KAAKC,WAAY,E,qDAIjB,OAAOD,KAAKC,Y,0BAGVC,GACFF,KAAKC,UAAYC,O,2vBC8EN,M,6NAnFKC,EAAOC,EAAKC,EAAgBC,G,0GACtCC,EAAa,EACbC,EAAoB,GAGA,KADtBC,EAAahB,MAAMC,KAAKS,IACbd,O,sBACP,IAAIqB,MAAM,2B,cAGdC,EAAoBtC,KAAKuC,IAAIH,EAAWpB,OAAQmB,GAChDK,GAAY,EAEVC,E,4CAAa,WAAOC,EAASC,GAAhB,4NAEXV,EAAkBW,MAFP,+DAGXC,EAAQT,EAAWjB,MAAM,EAAGe,GAChCE,EAAaA,EAAWjB,MAAMe,GAC1B5B,EAAQ,KALG,WAOTuC,EAAM7B,OAAS,GAPN,sBAOe,IAAIqB,MAAM,mBAPzB,UAQQ,IAAjBQ,EAAM7B,OARG,kCAQiB,EAAK8B,aAAaD,EAAM,GAAId,GAR7C,0DAWbzB,EAAQD,EAAe,EAAD,IAXT,WAafwC,EAAME,SAAQ,SAAAC,GAAI,OAAIhB,EAAegB,EAAKC,OAAQ3C,MAC7CkC,GAAmC,IAAtBJ,EAAWpB,OAdd,wBAebwB,GAAY,EACZE,IAhBa,mGACVN,EAAWpB,OAAS,GADV,iM,kEAsBb,IAAIkC,SAAQ,SAAAR,GAChB,IAAK,IAAIlB,EAAI,EAAGA,EAAIc,EAAmBd,IACrCiB,EAAWC,M,mKAKEM,EAAMjB,G,iGACjBoB,EAASxB,KAAKyB,UAAUrB,G,SACLJ,KAAK0B,SAASL,G,UAAjCM,E,OAEDxC,EADCyC,EAAUD,EAAWC,S,sBAEnB,IAAIlB,MAAM,mC,uBAEZc,EAAOK,eAAe,CAAEC,SAAU,CAACF,K,+HAGlCP,GACP,OAAO,IAAIE,SAAQ,SAACR,EAASC,GAC3B,IAAMe,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACdlB,EAAQ,CACNmB,KAAMb,EAAKa,KACX/D,KAAMkD,EAAKlD,KACXgE,KAAMd,EAAKc,KACXP,QAASG,EAAOK,UAGpBL,EAAOM,QAAU,SAAA1D,GAAK,OAAIqC,EAAOrC,IACjCoD,EAAOO,kBAAkBjB,Q,oDAICkB,GAC5BvC,KAAKwC,uBAAyBD,I,gCAGtBnC,GACR,IAAMqC,EAAUzC,KAAKwC,yBAIrB,OAHyBE,IAAaC,sBAG/B,IAAIC,IAAIC,eAAe,CAC5BzC,MACAqC,iB,w4BC5EeK,E,6UACX,CACNC,OAAQ,SACRC,aAAa,EACbC,YAAa,EACb9C,MAAO,KACP+C,eAAgB,KAChBC,eAAgB,KAChBC,mBAAmB,EACnBC,SAAU,KACVC,aAAc,KACdC,WAAY,EACZC,0BAA2B,EAC3BC,SAAU,GACVC,cAAe,O,sBA0CH,SAAAvD,GACZ,IAAMM,EAAahB,MAAMC,KAAKS,EAAMwD,OAAOxD,OACrCyD,EAAY,GAClBnD,EAAWW,SAAQ,SAACC,EAAMxB,GACxB,IAAMgE,EAAW,CACfC,GAAIjE,EACJqC,KAAMb,EAAKa,KACX6B,KAAM1C,EAAK2C,oBAAsB3C,EAAKa,KACtC/D,KAAMkD,EAAKlD,KACXQ,MAAO,KACPsF,WAAW,EACXC,eAAe,GAEjBN,EAAU/D,GAAKgE,EACfxC,EAAKC,OAASzB,KAEhB,IAAMsE,EAAc1D,EAAW2D,KAAI,SAAAC,GAAC,OAAIA,EAAElG,QAAMmG,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAC/Dd,EAAgBrF,KAAKoG,SAC3B,EAAKC,SAAS,CACZ3B,OAAQ,eACR5C,MAAOyD,EACPN,aAAc,GACdJ,eAAgB,EAChBO,SAAUhD,EAAW,GAAGyB,KACxBqB,WAAY9C,EAAWpB,OACvB8D,eAAgBjF,EAAeiG,GAC/BT,cAAeA,EACfpD,kBAAmB,IAAIP,IAEzB,IAAMO,EAAoB,IAAIP,EAK9B4E,EAAcC,8BAA8B,EAAKC,MAAMC,4BAEvDH,EAAcI,YACZ5E,EAAMwD,OAAOxD,MACb,EAAK0E,MAAMzE,KARU,SAACkB,EAAQ3C,GAAT,OACrB+E,IAAkB,EAAKsB,MAAMtB,eAC7B,EAAKrD,eAAe4E,KAApB,KAA+B3D,EAAQ3C,KAQvC2B,M,yBAoBa,SAAAe,GACf,IAAI1C,EAAQ,KAIZ,OAHmB,OAAf0C,EAAK1C,QACPA,EAAQ,uBAAGuG,MAAO,CAAEC,MAAO,QAAU9D,EAAK1C,QAG1C,wBAAIyG,IAAK/D,EAAKyC,IACZ,wBAAIuB,UAAU,WACXhE,EAAKa,KADR,IACevD,O,qSAnGnB,OACEqB,KAAKgF,MAAM1B,aAAajE,OAAS,OAASW,KAAKgF,MAAMzB,WAAa,W,mCAMpE,OADWrF,EAAe8B,KAAKgF,MAAM9B,gBACvB,OAASlD,KAAKgF,MAAM7B,iB,iCAIlC,OAAOmC,SACJ,IAAMtF,KAAKgF,MAAM1B,aAAajE,OAC7BkG,OAAOC,KAAKxF,KAAKgF,MAAM7E,OAAOd,U,mCAKlC,OACEW,KAAKgF,MAAMhC,aACXuC,OAAOC,KAAKxF,KAAKgF,MAAM7E,OAAOd,SAAWW,KAAKgF,MAAM1B,aAAajE,S,sCAKnE,IAAMoG,EAAoC,IAA3BzF,KAAKgF,MAAM/B,YAAoB,SAAW,UACzD,OACEjD,KAAKgF,MAAM/B,YAAcwC,EAAS,0C,qCAgDvBnE,EAAQ3C,GACrB,IAAM0C,EAAOrB,KAAKgF,MAAM7E,MAAMmB,GAE9B,GADAD,EAAK4C,WAAY,EACZtF,EAIH0C,EAAK1C,MAAQA,EACbqB,KAAK0E,SAAS,CAAEzB,YAAajD,KAAKgF,MAAM/B,YAAc,QAL5C,CACV,IAAIC,EAAiBlD,KAAKgF,MAAM9B,eAAiB7B,EAAKlD,KACtD6B,KAAK0E,SAAS,CAAExB,mBAKlBlD,KAAK0E,SAAS,CAAEjB,SAAUpC,EAAKa,OAC/B,IAAIoB,EAAetD,KAAKgF,MAAM1B,aAC9BA,EAAaoC,KAAKrE,GAClBrB,KAAK0E,SAAS,CAAEpB,mB,+BAkBhB,OAAyB,OAArBtD,KAAKgF,MAAM7E,MAEX,yBAAKkF,UAAU,kBACb,yBAAKA,UAAU,UACb,2BAAOM,QAAQ,QACb,yBAAKC,IAAI,2BAA2BC,IAAI,iBAE1C,2BACER,UAAU,kBACVS,SAAU9F,KAAK+F,YACf5D,KAAK,OACL2B,GAAG,OACHkC,UAAQ,KAIZ,yBAAKX,UAAU,UACb,2BAAOM,QAAQ,UACb,yBAAKC,IAAI,6BAA6BC,IAAI,mBAE5C,2BACER,UAAU,kBACVlD,KAAK,OACL2D,SAAU9F,KAAK+F,YACfjC,GAAG,SACHmC,gBAAgB,OAChBC,aAAa,OACbF,UAAQ,MAQhB,2BAAOlC,GAAG,iBAAiBuB,UAAU,kBACnC,+BACE,4BACE,wBAAIA,UAAU,gBACXrF,KAAKmG,WADR,KACsBnG,KAAKoG,eAI/B,2BAAOtC,GAAG,eACP9D,KAAKgF,MAAM1B,aAAac,IAAIpE,KAAKqG,uB,8BA/KDC,a,EAAtBxD,E,YAiBA,CACjBgB,GAAIyC,IAAUC,OACdC,MAAOF,IAAUC,OACjBpG,IAAKmG,IAAUC,OACf1B,2BAA4ByB,IAAUhE,O,aCtB1C,SAASmE,EAAT,GAMkC,QALDC,cAKC,SAJDC,EAIC,EAJDA,QACAxG,EAGC,EAHDA,IACA0E,EAEC,EAFDA,2BACA+B,EACC,EADDA,EAEvBC,EAAmBC,IAAgBC,SAAnCF,eAkBR,OACE,kBAAC,IAAMG,SAAP,KAAiBN,QAhBZG,GAILA,EAAeI,KAAK,CAClBtF,QAASkB,EACTqE,MAAON,EAAE,sBACTO,aAAc,CACZhH,MACA0E,8BAEF8B,cASNF,EAAuBW,UAAY,CACjCV,OAAQJ,IAAUe,KAAKC,WACvBzC,2BAA4ByB,IAAUhE,KAAKgF,WAC3CX,QAASL,IAAUhE,KACnBnC,IAAKmG,IAAUC,QAGFgB,kBAAgB,SAAhBA,CAA0Bd,GCvCnCe,EAAW,SAAAlD,GAAC,OAAiB,IAAbA,EAAEmD,QAqBTC,EALoBC,aAdX,SAAA5C,GACtB,IAAM6C,EAAe7C,EAAM8C,QAAQA,QAAQC,KAAKN,GAOhD,MAAO,CACL3C,2BAJiC,kBACjCkD,IAAKC,SAASC,uBAAuBL,IAIrCzH,IAAKyH,GAAgBA,EAAaM,YAMpC,KAFiCP,CAGjClB,G,i3BCjBI0B,E,6UACI,CACNC,OAAQ,K,yBAcO,SAAAC,GACf,OACE,wBACElD,IAAKkD,EAAMpG,KACXmD,UACE,EAAKL,MAAMuD,kBAAoBD,EAAMpG,KACjC,kBACA,WAENsG,aAAc,WACZ,EAAKC,gBAAgBH,EAAMpG,OAE7BwG,QAAS,WACP,EAAK7D,MAAM8D,SAASL,KAGtB,wBAAIjD,UAAU,WAAWiD,EAAMpG,KAAK0G,MAAM,KAAK,Q,ySAKrCN,GACdtI,KAAK0E,SAAS,CAAE6D,gBAAiBD,M,+BAG1B,MACoCtI,KAAK6E,MAAxCgE,EADD,EACCA,QAASC,EADV,EACUA,OAAQC,EADlB,EACkBA,OAAQpK,EAD1B,EAC0BA,MAEjC,GAAIA,EACF,OAAO,2BAAIA,GAGb,IAAMqK,EACJ,kBAAC,IAAD,CAAM9G,KAAK,eAAemD,UAAU,mCAGtC,GAAIwD,EACF,OAAOG,EAGT,IAAMC,EACJ,2BAAOnF,GAAG,aACRgF,EAAOC,QAAO,SAAAT,GAAK,OAAKA,EAAMpG,KAAK0G,MAAM,KAAK,GAAGM,cAAcC,SAASJ,EAAOG,gBAA0B,IAARH,KAAa3E,IAAIpE,KAAKqG,iBAI3H,OACE,2BAAOvC,GAAG,eAAeuB,UAAU,4BACjC,+BACE,4BACE,4BAAKrF,KAAK6E,MAAMgC,EAAE,kBAGrBiC,GAAUG,Q,8BArEU3C,a,EAAvB8B,E,YAKe,CACjBU,OAAQvC,IAAU6C,MAClBP,QAAStC,IAAUe,KAAKC,WACxB5I,MAAO4H,IAAUC,OACjBmC,SAAUpC,IAAUhE,O,EATlB6F,E,eAYkB,CACpBS,SAAS,IA8DErB,kBAAgB,SAAhBA,CAA0BY,G,29BC3EpBiB,G,8UACX,CACN1K,MAAO,KACPkK,SAAS,EACTC,OAAQ,GACRQ,UAAW,GACXC,UAAW,K,6aAUX3G,IAAI4G,eAAexJ,KAAK6E,MAAM4E,a,SAEP7G,IAAI8G,gBAAgB1J,KAAK6E,MAAM8E,QAAQzH,M,YAAxDtD,E,QAEOgL,Q,uBACX5J,KAAK0E,SAAS,CACZ/F,MAAOC,EAASK,U,0BAMpBe,KAAK0E,SAAS,CACZoE,OAAQlK,EAASiL,KAAKC,aAAe,GACrCjB,SAAS,I,2SAIJ,aACuC7I,KAAKgF,MAA3C8D,EADD,EACCA,OAAQD,EADT,EACSA,QAASlK,EADlB,EACkBA,MAAO4K,EADzB,EACyBA,UACxBZ,EAAa3I,KAAK6E,MAAlB8D,SAER,OACE,6BACE,2BACEtD,UAAU,yBACVlD,KAAK,OACLjC,MAAOqJ,EACPzD,SAAU,SAAAiE,GAAC,OAAI,EAAKrF,SAAS,CAAE6E,UAAWQ,EAAEpG,OAAOzD,WAErD,kBAAC,EAAD,CACE4I,OAAQA,EACRD,QAASA,EACTlK,MAAOA,EACPoK,OAAQQ,EACRZ,SAAUA,U,8BAnD0BrC,a,u2BAAzB+C,G,YASA,CACjBM,QAASpD,IAAUyD,OACnBrB,SAAUpC,IAAUhE,KACpBkH,YAAalD,IAAUC,OAAOe,a,ICZ5B0C,G,kVACI,CACN5B,OAAQ,K,2BAcO,SAAAsB,GACf,OACE,wBACEvE,IAAKuE,EAAQzH,KACbmD,UACE,EAAKL,MAAMuD,kBAAoBoB,EAAQzH,KACnC,kBACA,WAENsG,aAAc,WACZ,EAAKC,gBAAgBkB,EAAQzH,OAE/BwG,QAAS,WACP,EAAK7D,MAAM8D,SAASgB,KAGtB,4BAAKA,EAAQzH,KAAK0G,MAAM,KAAK,Q,0SAKnBe,GACd3J,KAAK0E,SAAS,CAAE6D,gBAAiBoB,M,+BAG1B,MACsC3J,KAAK6E,MAA1CgE,EADD,EACCA,QAAS/G,EADV,EACUA,SAAUiH,EADpB,EACoBA,OAAQpK,EAD5B,EAC4BA,MAEnC,GAAIA,EACF,OAAO,2BAAIA,GAGb,IAAMqK,EACJ,kBAAC,IAAD,CAAM9G,KAAK,eAAemD,UAAU,mCAGtC,GAAIwD,EACF,OAAOG,EAGT,IAAMC,EACJ,2BAAOnF,GAAG,eACPhC,EAASiH,QAAO,SAAAY,GAAO,OAAKA,EAAQzH,KAAK0G,MAAM,KAAK,GAAGM,cAAcC,SAASJ,EAAOG,gBAA0B,IAARH,KAAa3E,IAAIpE,KAAKqG,iBAIlI,OACE,2BAAOvC,GAAG,iBAAiBuB,UAAU,4BACnC,+BACE,4BACE,4BAAKrF,KAAK6E,MAAMgC,EAAE,cAGrB/E,GAAYmH,Q,gCArEM3C,a,GAArB2D,G,YAKe,CACjBnI,SAAUyE,IAAU6C,MACpBP,QAAStC,IAAUe,KACnB3I,MAAO4H,IAAUC,OACjBmC,SAAUpC,IAAUhE,O,GATlB0H,G,eAYkB,CACpBpB,SAAS,IA8DErB,mBAAgB,SAAhBA,CAA0ByC,I,k+BC3EpBC,G,kVACX,CACNvL,MAAO,KACPkK,SAAS,EACT/G,SAAU,GACVyH,UAAW,K,6aAWX3G,IAAI4G,eAAexJ,KAAK6E,MAAM4E,a,SAEP7G,IAAIuH,aACzBnK,KAAK6E,MAAMuF,QAAQC,UACnBrK,KAAK6E,MAAMyF,SAASC,Y,YAFhB3L,E,QAKOgL,Q,uBACX5J,KAAK0E,SAAS,CACZ/F,MAAOC,EAASK,U,0BAMpBe,KAAK0E,SAAS,CACZ5C,SAAUlD,EAASiL,KAAK/H,UAAY,GACpC+G,SAAS,I,6SAIJ,aACyC7I,KAAKgF,MAA7ClD,EADD,EACCA,SAAU+G,EADX,EACWA,QAASlK,EADpB,EACoBA,MAAO4K,EAD3B,EAC2BA,UAC1BZ,EAAa3I,KAAK6E,MAAlB8D,SACR,OACE,6BACE,2BACEtD,UAAU,yBACVlD,KAAK,OACLjC,MAAOqJ,EACPzD,SAAU,SAAAiE,GAAC,OAAI,EAAKrF,SAAS,CAAE6E,UAAWQ,EAAEpG,OAAOzD,WAErD,kBAAC,GAAD,CACE4B,SAAUA,EACV+G,QAASA,EACTlK,MAAOA,EACPoK,OAAQQ,EACRZ,SAAUA,U,gCArDuBrC,a,u2BAAtB4D,G,YAQA,CACjBE,QAAS7D,IAAUyD,OACnBM,SAAU/D,IAAUyD,OACpBrB,SAAUpC,IAAUhE,KACpBkH,YAAalD,IAAUC,S,ICZrBgE,G,kVACI,CACNnC,OAAQ,GACRE,gBAAiB,O,2BAeF,SAAA6B,GACf,OACE,wBACEhF,IAAKgF,EAAQC,UACbhF,UACE,EAAKL,MAAMuD,kBAAoB6B,EAAQC,UACnC,kBACA,WAEN7B,aAAc,WACZ,EAAKC,gBAAgB2B,EAAQC,YAE/B3B,QAAS,WACP,EAAKD,gBAAgB2B,EAAQC,WAC7B,EAAKxF,MAAM8D,SAASyB,KAGtB,4BAAKA,EAAQlI,MACb,4BAAKkI,EAAQC,e,0SAKHD,GACdpK,KAAK0E,SAAS,CAAE6D,gBAAiB6B,M,+BAG1B,MACsCpK,KAAK6E,MAA1CgE,EADD,EACCA,QAAS4B,EADV,EACUA,SAAU1B,EADpB,EACoBA,OAAQpK,EAD5B,EAC4BA,MAEnC,GAAIA,EACF,OAAO,2BAAIA,GAGb,IAAMqK,EACJ,kBAAC,IAAD,CAAM9G,KAAK,eAAemD,UAAU,mCAGtC,GAAIwD,EACF,OAAOG,EAGT,IAAM0B,EAAkB3B,EAAOG,cACzByB,EAAmBF,EAAS1B,QAAO,SAAAqB,GAAO,MACrB,iBAAlBA,EAAQlI,OACH,KAAX6G,GAAiBqB,EAAQlI,KAAKgH,cAAcC,SAASuB,OAGlDzB,EACJ,2BAAOnF,GAAG,eAEN6G,EAAiBvG,IAAIpE,KAAKqG,iBAKhC,OACE,2BAAOvC,GAAG,iBAAiBuB,UAAU,4BACnC,+BACE,4BACE,4BAAKrF,KAAK6E,MAAMgC,EAAE,YAClB,4BAAK7G,KAAK6E,MAAMgC,EAAE,SAGrB4D,GAAYxB,Q,gCAlFM3C,a,GAArBkE,G,YAMe,CACjBC,SAAUlE,IAAU6C,MACpBP,QAAStC,IAAUe,KAAKC,WACxB5I,MAAO4H,IAAUC,OACjBmC,SAAUpC,IAAUhE,KAAKgF,WACzBV,EAAGN,IAAUhE,O,GAXXiI,G,eAckB,CACpB3B,SAAS,IAyEErB,mBAAgB,SAAhBA,CAA0BgD,I,k+BCxFpBI,G,kVACX,CACNjM,MAAO,KACPkK,SAAS,EACT4B,SAAU,K,6aASV7H,IAAI4G,eAAexJ,KAAK6E,MAAM4E,a,SACP7G,IAAIiI,e,YAArBjM,E,QAEOgL,Q,uBACX5J,KAAK0E,SAAS,CACZ/F,MAAOC,EAASK,U,0BAMpBe,KAAK0E,SAAS,CACZ+F,SAAU7L,EAASiL,KAAKY,UAAY,GACpClB,UAAW,GACXV,SAAS,I,6SAIJ,aACyC7I,KAAKgF,MAA7CyF,EADD,EACCA,SAAU5B,EADX,EACWA,QAASU,EADpB,EACoBA,UAAW5K,EAD/B,EAC+BA,MAC9BgK,EAAa3I,KAAK6E,MAAlB8D,SACR,OACE,6BACE,2BACEtD,UAAU,yBACVlD,KAAK,OACLjC,MAAOqJ,EACPzD,SAAU,SAAAiE,GAAC,OAAI,EAAKrF,SAAS,CAAE6E,UAAWQ,EAAEpG,OAAOzD,WAErD,kBAAC,GAAD,CACEuK,SAAUA,EACV5B,QAASA,EACTE,OAAQQ,EACR5K,MAAOA,EACPgK,SAAUA,U,gCA/CuBrC,a,u2BAAtBsE,G,YAOA,CACjBjC,SAAUpC,IAAUhE,KACpBkH,YAAalD,IAAUC,S,ICTrBsE,G,kVACI,CACNzC,OAAQ,K,2BAcO,SAAAiC,GACf,OACE,wBACElF,IAAKkF,EAASC,WACdlF,UACE,EAAKL,MAAMuD,kBAAoB+B,EAASC,WACpC,kBACA,WAEN/B,aAAc,WACZ,EAAKC,gBAAgB6B,EAASC,aAEhC7B,QAAS,WACP,EAAK7D,MAAM8D,SAAS2B,KAGtB,4BAAKA,EAASpI,KAAK0G,MAAM,KAAK,Q,0SAKpB2B,GACdvK,KAAK0E,SAAS,CAAE6D,gBAAiBgC,M,+BAG1B,MACuCvK,KAAK6E,MAA3CgE,EADD,EACCA,QAASS,EADV,EACUA,UAAWP,EADrB,EACqBA,OAAQpK,EAD7B,EAC6BA,MAEpC,GAAIA,EACF,OAAO,2BAAIA,GAGb,IAAMqK,EACJ,kBAAC,IAAD,CAAM9G,KAAK,eAAemD,UAAU,mCAGtC,GAAIwD,EACF,OAAOG,EAGT,IAAMC,EACJ,2BAAOnF,GAAG,gBACPwF,EAAUP,QAAO,SAAAuB,GAAQ,OAAKA,EAASpI,KAAK0G,MAAM,KAAK,GAAGM,cAAcC,SAASJ,EAAOG,gBAA0B,IAARH,KAAa3E,IAAIpE,KAAKqG,iBAIrI,OACE,2BAAOvC,GAAG,kBAAkBuB,UAAU,4BACpC,+BACE,4BACE,4BAAKrF,KAAK6E,MAAMgC,EAAE,eAGrByC,GAAaL,Q,gCArEM3C,a,GAAtBwE,G,YAKe,CACjBxB,UAAW/C,IAAU6C,MACrBP,QAAStC,IAAUe,KAAKC,WACxB5I,MAAO4H,IAAUC,OACjBmC,SAAUpC,IAAUhE,O,GATlBuI,G,eAYkB,CACpBjC,SAAS,IA8DErB,mBAAgB,SAAhBA,CAA0BsD,I,k+BC3EpBC,G,kVACX,CACNpM,MAAO,KACPkK,SAAS,EACTS,UAAW,GACXC,UAAW,K,6aAUX3G,IAAI4G,eAAexJ,KAAK6E,MAAM4E,a,SAEP7G,IAAIoI,cAAchL,KAAK6E,MAAMuF,QAAQC,W,YAAtDzL,E,QAEOgL,Q,uBACX5J,KAAK0E,SAAS,CACZ/F,MAAOC,EAASK,U,0BAMpBe,KAAK0E,SAAS,CACZ4E,UAAW1K,EAASiL,KAAKP,WAAa,GACtCT,SAAS,I,6SAIJ,aAC0C7I,KAAKgF,MAA9CsE,EADD,EACCA,UAAWT,EADZ,EACYA,QAASlK,EADrB,EACqBA,MAAO4K,EAD5B,EAC4BA,UAC3BZ,EAAa3I,KAAK6E,MAAlB8D,SACR,OACE,6BACE,2BACEtD,UAAU,yBACVlD,KAAK,OACLjC,MAAOqJ,EACPzD,SAAU,SAAAiE,GAAC,OAAI,EAAKrF,SAAS,CAAE6E,UAAWQ,EAAEpG,OAAOzD,WAErD,kBAAC,GAAD,CACEoJ,UAAWA,EACXT,QAASA,EACTlK,MAAOA,EACPoK,OAAQQ,EACRZ,SAAUA,U,gCAjDwBrC,a,u2BAAvByE,G,YAQA,CACjBX,QAAS7D,IAAUyD,OACnBrB,SAAUpC,IAAUhE,KACpBkH,YAAalD,IAAUC,S,ICPrByE,G,kVACI,CACNb,QAAS,KACTE,SAAU,KACVX,QAAS,KACTuB,WAAW,I,4BAWK,SAAAd,GAChB,EAAK1F,SAAS,CACZ0F,e,6BAIe,SAAAE,GACjB,EAAK5F,SAAS,CACZ4F,gB,4BAIc,SAAAX,GAChB,EAAKjF,SAAS,CACZiF,e,2BAIa,WACf,EAAKjF,SAAS,CACZiF,QAAS,KACTW,SAAU,KACVF,QAAS,U,4BAIK,WAChB,EAAK1F,SAAS,CACZiF,QAAS,KACTW,SAAU,U,2BAIG,WACf,EAAK5F,SAAS,CACZiF,QAAS,U,+BAIQ,SAAAwB,GACnB,IAAMC,EAAaD,EAAejJ,KAC5BmJ,EAAQD,EAAWxC,MAAM,KACzBxG,EAAS,CACbkJ,YAAaC,IAAeC,QAAf,WAA6BJ,EAA7B,aACbjD,SAAUoD,IAAeC,QAAf,WAA6BJ,EAA7B,aACVK,SAAUF,IAAeC,QAAf,WAA6BJ,EAA7B,aACVhB,QAASiB,EAAM,GACff,SAAUe,EAAM,GAChB1B,QAAS0B,EAAM,GACfD,WAAYC,EAAM,IAEpB,EAAKxG,MAAM6G,WAAWtJ,M,mSAItB,IAAMqH,EAAczJ,KAAK6E,MAAM8G,KAAKC,aAD7B,EAGgC5L,KAAKgF,MAApCoF,EAHD,EAGCA,QAASE,EAHV,EAGUA,SAAUX,EAHpB,EAGoBA,QAEzBkC,EAOE7L,KAPF6L,eACAC,EAME9L,KANF8L,gBACAC,EAKE/L,KALF+L,eACAC,EAIEhM,KAJFgM,gBACAC,EAGEjM,KAHFiM,iBACAC,EAEElM,KAFFkM,gBACAC,EACEnM,KADFmM,mBAGEC,EACF,yBAAK/G,UAAU,oBACb,8BAAOrF,KAAK6E,MAAMgC,EAAE,sBAwBxB,OApBIuD,IACFgC,EACE,yBAAK/G,UAAU,oBACb,0BAAMqD,QAASmD,GAAiBzB,EAAQlI,MACvCkI,GAAWE,GACV,0BAAM5B,QAASoD,GACZ,IADH,MAEMxB,EAASpI,KAAK0G,MAAM,KAAK,IAGhCwB,GAAWE,GAAYX,GACtB,0BAAMjB,QAASqD,GACZ,IADH,MAEMpC,EAAQzH,KAAK0G,MAAM,KAAK,MAQpC,oCACGwD,GACChC,GACA,kBAAC,GAAD,CAAeX,YAAaA,EAAad,SAAUqD,IAGpD5B,IAAYE,GACX,kBAAC,GAAD,CACEb,YAAaA,EACbW,QAASA,EACTzB,SAAUsD,IAGb7B,GAAWE,IAAaX,GACvB,kBAAC,GAAD,CACEF,YAAaA,EACbW,QAASA,EACTE,SAAUA,EACV3B,SAAUuD,IAGb9B,GAAWE,GAAYX,GACtB,kBAAC,GAAD,CACEF,YAAaA,EACbE,QAASA,EACThB,SAAUwD,U,gCAxIQ7F,a,GAAxB2E,G,YAQe,CACjBnH,GAAIyC,IAAUC,OACdC,MAAOF,IAAUC,OACjBmF,KAAMpF,IAAUyD,OAChBqC,SAAU9F,IAAUC,OACpBkF,WAAYnF,IAAUhE,KAAKgF,aAmIhBC,mBAAgB,SAAhBA,CAA0ByD,I,WCjJzC,SAASqB,GAAT,GAOG,QAND3F,cAMC,SALD+E,EAKC,EALDA,WACA9E,EAIC,EAJDA,QACA+E,EAGC,EAHDA,KACAvL,EAEC,EAFDA,IACAyG,EACC,EADDA,EAEQC,EAAmBC,IAAgBC,SAAnCF,eA0BR,OACE,kBAAC,IAAMG,SAAP,KAAiBN,QAfbG,GACFA,EAAeI,KAAK,CAClBtF,QAASqJ,GACT9D,MAAON,EAAE,+BACTO,aAAc,CACZsE,WAdc,SAAA7B,GAClB,IAAM/B,EAAUyE,KAAkC1C,EAAMA,EAAK2C,YAC7Dd,EAAW5D,GAGXhB,EAAe2F,OACf7F,KASI+E,OACAvL,OAEFwG,cAUR0F,GAAsBjF,UAAY,CAChCV,OAAQJ,IAAUe,KAAKC,WACvBmE,WAAYnF,IAAUhE,KAAKgF,WAC3BX,QAASL,IAAUhE,KACnBoJ,KAAMpF,IAAUyD,OAAOzC,WACvBnH,IAAKmG,IAAUC,QAGFgB,mBAAgB,SAAhBA,CAA0B8E,ICrDnC7E,GAAW,SAAAlD,GAAC,OAAiB,IAAbA,EAAEmD,QA4BTgF,GALmB9E,aArBV,SAAA5C,GACtB,IAAM6C,EAAe7C,EAAM8C,QAAQA,QAAQC,KAAKN,IAEhD,MAAO,CACLkE,KAAM3G,EAAM2H,MAAQ3H,EAAM2H,KAAKhB,KAC/BvL,IAAKyH,GAAgBA,EAAaM,aAIX,SAAAyE,GACzB,MAAO,CACLlB,WAAY,SAAA5D,GAKV8E,EAJe,CACbzK,KAAM,cACN2F,gBAO0BF,CAGhC0E,I,0rCCLeO,GAAY7E,IAAK8E,MAA1BC,QAER,SAASC,GAAenI,GAAO,IACrBoI,EAAqDpI,EAArDoI,QAASC,EAA4CrI,EAA5CqI,OAAQvB,EAAoC9G,EAApC8G,KAAMwB,EAA8BtI,EAA9BsI,0BACxBtG,EAFsB,GAEjBuG,YAAe,UAFE,WAILC,mBAAS,CAC/BC,UAAW,cACXC,UAAW,SANgB,GAItBC,EAJsB,KAIhBC,EAJgB,UAQWJ,mBAAS,CAC/CK,YAAa,KACbC,cAAe,KACfC,YAAa,GACbC,UAAW,GACXC,gBAAiB,GACjBC,UAAW,GACXC,WAAY,GACZC,iBAAkB,GAElBC,gBAAiB,GACjBC,iCAAkC,GAElCC,UAAW,KArBgB,GAQtBC,EARsB,KAQRC,EARQ,UAuBCjB,mBAAS,IAvBV,GAuBtBkB,EAvBsB,KAuBbC,EAvBa,UAwBWnB,mBAAS,CAC/CoB,uBAAuB,EACvB9P,MAAO,OA1BoB,GAwBtB+P,EAxBsB,KAwBRC,EAxBQ,UA4BatB,mBAAS,MA5BtB,GA4BtBuB,EA5BsB,KA4BPC,EA5BO,UA6BSxB,mBAAS,IA7BlB,GA6BtByB,EA7BsB,KA6BTC,EA7BS,UA8BO1B,mBAAS,GA9BhB,GA8BtB2B,EA9BsB,KA8BVC,EA9BU,KA+BvBC,EAAaC,qBAAWC,MAExBC,EAAcC,YAClB,CACE,sBACA,8CACA,sBAEF,CAAC,QAAS,SAAU,SACpB,SAGIC,EAAgBC,YAAYhC,EAAM,KAClCiC,EAAmBD,YAAYnB,EAAc,KA5CtB,EA+CFa,EAAnBQ,iBA/CqB,MA+CT,GA/CS,GAiD1BxC,GAAUwC,EAAUC,0BACgC,qBAAlBf,GACnCC,EAAiB,oBAKnBe,qBACE,WAsBM1C,GArBc,6CAAG,mHAEjByB,EAAgB,CAAEhQ,MAAO,KAAM8P,uBAAuB,IAFrC,SAIMoB,GACrB3C,EACAuC,EACAF,EACAT,EACAE,EACAK,GAVe,OAIXzQ,EAJW,OAajB4P,EAAW5P,GACX+P,EAAgB,CAAEhQ,MAAO,KAAM8P,uBAAuB,IAdrC,gDAgBjBqB,QAAQC,KAAR,MACApB,EAAgB,CAAEhQ,OAAO,EAAMqR,YAAY,IAjB1B,yDAAH,oDAsBhBC,KAKJ,CACER,EACAF,EACAT,EACAE,EACAK,EACAnC,IAsBJ,GAAIwB,EAAa/P,MACf,OAAO,uCAAaG,KAAKoR,UAAUxB,EAAa/P,QAC3C,GAAI4P,IAAY,KAAOK,EAC5B,OAAO,2CAGT,IAAIuB,EAAuB,KACvBC,EAAuB,KAEvBV,EAAUC,4BAkJhB,SAAmBU,EAAaX,EAAWxC,EAAQD,GACjD,GAAIoD,EACF,OAGF,IAAMC,EAAWC,IAA8Bb,EAAWxC,GAE1D,GAAIL,GAAQ2D,YAAYC,YAAYH,GAAW,OACnBrD,EAAlB3C,eADqC,MAC1B,GAD0B,GAEhCoG,WAAaJ,GACxBrD,EAAQ0D,QAAQL,IA1JlBM,CADsC,qBAAlBhC,EACGc,EAAWxC,EAAQD,GAE1CmD,EACE,kBAAC,GAAD,CACEzJ,OAA0B,qBAAlBiI,EACRhI,QAAS,kBAAMiI,EAAiB,SAIpCsB,EACE,yBACE9K,UAAU,mCACVH,MAAO,CAAE2L,QAAS,SAElB,4BACExL,UAAU,kBACVqD,QAAS,kBAAMmG,EAAiB,sBAE/BhI,EAAE,yBAkCX,OACE,oCACGsG,EACC,kBAAC2D,EAAD,CACEnK,OAA0B,uBAAlBiI,EACRhI,QAAS,kBAAMiI,EAAiB,SAEhC,KACHuB,EACD,kBAACW,GAAA,EAAqBC,SAAtB,MACG,SAAAC,GAAa,OACZ,kBAACC,GAAA,EAAmBF,SAApB,MACG,SAAAG,GAAW,OACV,kBAACC,EAAA,EAAD,CACEC,cAAc,EACd1F,KAAMA,EACNwF,YAAaA,GAEZF,GACCA,EAAcK,uBACdL,EAAcK,sBAAsBC,YAMhD,yBAAKlM,UAAU,qBACb,yBAAKA,UAAU,UACb,wBAAIH,MAAO,CAAEsM,WAAY,IAAKC,SAAU,SACrC5K,EAAE,eAGP,yBAAKxB,UAAU,WACZ8H,GAA6BgD,EAC7BhD,GACC,kBAAC,IAAD,CACEuE,SAAU,kBAAM7C,EAAiB,yBAGrC,0BAAMxJ,UAAU,eAAekJ,EAAQlP,UAI3C,yBAAKgG,UAAU,0BACf,yBAAKA,UAAU,wBAEb,kBAAC,IAAD,CACEsM,UAAWjD,EAAaD,sBACxBmD,UAAiC,IAAvBlD,EAAa/P,MAEvB4P,QAASA,EACTsD,aAAc,SAAAC,GACZ,IAAMC,EAAaxB,IAA2Bb,EAAWxC,EAAQ,CAC/D8E,kBAAmBF,IAErB7E,EAAQvH,KAAKqM,IAGfvE,KAAMA,EACNyE,OAvFR,SAAoB3E,GAClB,IAAI4E,EAAgB5E,EAChB6E,EAAgB,MAEhB7E,IAAcE,EAAKF,YACE,QAAnBE,EAAKD,UACP4E,EAAgB,QAEhBD,EAAgB,KAChBC,EAAgB,OAIpB1E,EAAQ,CACNH,UAAW4E,EACX3E,UAAW4E,KAyEP9D,aAAcA,EACd+D,eAtER,SAA4B9E,EAAWpN,GACrCoO,GAAgB,SAAAtJ,GACd,O,kVAAA,IACKA,EADL,MAEGsI,EAAYpN,QAmEXmS,2BAA4B3C,EAAU2C,2BACtChD,YAAaA,IAGf,kBAAC,IAAD,CACEiD,YAAatD,EACbuD,aAAc,kBAAMtD,EAAcD,EAAa,IAC/CwD,aAAc,kBAAMvD,EAAcD,EAAa,IAC/CyD,oBAAqB,SAAAC,GAAI,OAAI3D,EAAe2D,IAC5C5D,YAAaA,EACb6D,YAAapE,EAAQlP,W,SAiDhBwQ,G,iGAAf,WACE3C,EACA0F,EACApF,EACAsB,EACAE,EACAK,GANF,iHASIjB,EAGEwE,EAHFxE,UACAF,EAEE0E,EAFF1E,gBACAC,EACEyE,EADFzE,iCAEI+D,EAAgB1E,EAAKF,WAAa,cAClC6E,EAAgB3E,EAAKD,WAAa,OAElCsF,EAAgB,CACpBhF,UAAW+E,EAAQ/E,UACnBD,YAAagF,EAAQhF,YACrBE,gBAAiB8E,EAAQ9E,gBACzBG,iBAAkB2E,EAAQ3E,iBAC1B6E,kBAAmBF,EAAQ5E,WAE3BL,cAAeiF,EAAQjF,cACvBD,YAAakF,EAAQlF,YACrBqF,MAAOjE,EACPkE,OAAQhE,EAAaF,EACrBmE,eAAgD,IAAjC/F,EAAOgG,uBA3B1B,SA8BwBC,GAAcjG,EAAQ2F,EAAexD,EAAa,CACtEjB,YACAF,kBACAC,qCAjCJ,cA8BQI,EA9BR,OAqCQ6E,EAAgB7E,EAAQnK,KAAI,SAAAiP,GAChC,IAAMzF,EACyB,iBAAtByF,EAAMzF,YAA2ByF,EAAMzF,iBAAc0F,EAE9D,MAAO,CACLxF,gBAAiBuF,EAAMvF,gBACvBE,WAAYqF,EAAMrF,WAIlBH,UAAWwF,EAAMxF,UACjBD,cAGAG,UAAWsF,EAAMtF,UACjBE,iBAAkBoF,EAAMpF,iBAExBsF,iBAAkBF,EAAME,qBAetBC,EAAgBC,GACpBL,EAT2B,CAC3BhF,UAAW,cACXF,gBAAiB,cACjBC,iCAAkC,cAGb+D,IAAkBA,EAKvCC,GAMIuB,EACJF,EAAcnU,OAASyP,EAAc0E,EAAcnU,OAASyP,EACxD1M,EAASoR,EAAchU,MAAM,EAAGkU,GAhFxC,kBAkFStR,GAlFT,6C,sBA8FA,SAASqR,GAAalF,EAASoF,EAAOC,GAEpC,IAAMJ,EAAgBjF,EAAQnK,KAAI,SAAAiP,GAMhC,OALKQ,IAAOR,EAAMtF,UAAW,gBAAgB,GAAM+F,YACjDT,EAAMtF,UAAY8F,IAAOR,EAAMtF,UAAW,YAAYgG,OACpD,iBAGGV,KAgCT,OA5BAG,EAAchG,MAAK,SAASjJ,EAAGC,GAC7B,IAAIwP,EAASzP,EAAEoP,GACXM,EAASzP,EAAEmP,GAOf,MANc,cAAVA,IACFK,EAASH,IAAOG,GAAQE,cACxBD,EAASJ,IAAOI,GAAQC,eAIZ,SAAVN,EACEI,EAASC,GACH,EAEND,EAASC,EACJ,EAEF,EAEHD,EAASC,GACH,EAEND,EAASC,EACJ,EAEF,KAIJT,E,SAeML,G,6FAAf,WACEjG,EACA0F,EACAvD,EAHF,kHAIIjB,EAJJ,EAIIA,UAAWF,EAJf,EAIeA,gBAAiBC,EAJhC,EAIgCA,iCAE1BgG,EAAoB,CAACvB,GAEL,UAAhBvD,GACI+E,EAAWC,GACfzB,EACA,CACE,YACA,cACA,kBACA,mBACA,qBAEFxE,IAGW/O,SACX8U,EAAoBC,GAEG,WAAhB/E,IACH+E,EAAWC,GACfzB,EACA,CAAC,YAAa,eACd1E,GAGIoG,EAAYD,GAChBzB,EACA,CAAC,kBAAmB,mBAAoB,qBACxCzE,IAGEiG,EAAS/U,QAAUiV,EAAUjV,UAC/B8U,EAAoBC,EAASG,OAAOD,KAIlCE,EAAgB,GAEtBL,EAAkB/S,SAAQ,SAAA2H,GACxB,IAAM0L,EAAuBzM,IAAKuG,QAAQmG,cAAcxH,EAAQnE,GAChEyL,EAAc9O,KAAK+O,MA9CvB,SAiD8BlT,QAAQoT,IAAIH,GAjD1C,cAiDQI,EAjDR,OAkDQrG,EAAU,GAGhBqG,EAAcxT,SAAQ,SAAAyT,GAChBA,GACFA,EAAezT,SAAQ,SAAAiS,GAChB9E,EAAQuG,MAAK,SAAAC,GAAC,OAAIA,EAAExB,mBAAqBF,EAAME,qBAClDhF,EAAQ7I,KAAK2N,SAzDvB,kBA+DS9E,GA/DT,6C,sBAyEA,SAAS8F,GAAyBzB,EAASoC,EAAQ9U,GACjD,IAAM+U,EAAe,GAErB,MAAc,KAAV/U,GAAiBA,GAIrB8U,EAAO5T,SAAQ,SAAAuS,GACb,IAAM5K,EAASxD,OAAO2P,OACpB,CACErH,UAAW,GACXD,YAAa,GACbE,gBAAiB,GACjBG,iBAAkB,GAClB6E,kBAAmB,IAErBF,GAGF7J,EAAO4K,GAASzT,EAChB+U,EAAavP,KAAKqD,MAGbkM,GAnBEA,EA5QXjI,GAAe3F,UAAY,CACzBuL,QAASrM,IAAUyD,OACnB6D,UAAWtH,IAAUC,OACrB0G,OAAQ3G,IAAUyD,OAClB2B,KAAMpF,IAAUyD,OAChBiD,QAAS1G,IAAUyD,OACnBmD,0BAA2B5G,IAAUe,MAGvC0F,GAAemI,aAAe,CAC5BhI,2BAA2B,GAwRdiI,mBAAWpI,ICvjBpBvF,GAAW,SAAAlD,GAAC,OAAiB,IAAbA,EAAEmD,QAgBT2N,GALYzN,aATH,SAAA5C,GAGtB,MAAO,CACLkI,OAHmBlI,EAAM8C,QAAQA,QAAQC,KAAKN,IAI9CkE,KAAM3G,EAAM2H,KAAKhB,QAMnB,KAFyB/D,CAGzBoF,I,WCZeH,GAAY7E,IAAK8E,MAA1BC,QAKR,SAASuI,GAAT,GAA0E,IAAvCC,EAAuC,EAA9CC,MAA6BC,EAAiB,EAA3BnL,SAA2B,EAQpEiL,EAAWG,OANbtL,EAFsE,EAEtEA,QACAE,EAHsE,EAGtEA,SACAX,EAJsE,EAItEA,QACAyB,EALsE,EAKtEA,WALsE,KAMtE4G,kBANsE,EAOtE2D,mBAEaC,aAAU,CAAExL,UAASE,WAAUX,UAASyB,eAC5B+D,qBAAWC,MAA9BM,kBAVgE,MAUpD,GAVoD,EAYlEkD,EAAU/F,GAAQgJ,YAAYC,gBAAgBL,GAEhDtI,GAA4B,EAIhC,OAHIuC,EAAUvC,4BACZA,EAA4BuC,EAAUvC,2BAGtC,kBAAC,GAAD,CACEyF,QAASA,EACTzF,0BAA2BA,IAKjCmI,GAAiBjO,UAAY,CAC3BiD,SAAU/D,IAAUwP,MAAM,CACxB1N,OAAQ9B,IAAUC,SACjBe,YAGU6N,sBAAWE,K,ssCC3CpB/J,E,sMACW9B,GACRA,GAAaqG,QAAQnR,MAAM,yBAChCqB,KAAKyJ,YAAcA,I,yCAyBFW,EAASE,EAAUX,EAASyB,GAC7C,OACEpL,KAAKwL,QAAL,oBACapB,EADb,sBACkCE,EADlC,qBACuDX,EADvD,wBAC8EyB,EAD9E,e,iCAKOhB,EAASE,EAAUX,EAASyB,GACrC,oBAAahB,EAAb,sBAAkCE,EAAlC,qBAAuDX,EAAvD,wBAA8EyB,K,gEAGhE4K,G,qHAAQC,E,+BAAS,GAAIP,E,+BAAS,GACtCtV,EAAM,IAAI8V,IAAIF,GAChBnM,EAAO,KACXzJ,EAAIiI,OAAS,IAAI8N,gBAAgBT,G,kBAGRU,MAAMhW,EAAD,KAAWJ,KAAKqW,YAAhB,CAA6BJ,Y,cAAnDrX,E,0BAESA,EAAS0X,O,QAAtBzM,E,sEAEEjL,EAASmE,QAAU,KAAOnE,EAASmE,OAAS,KAAe,MAAR8G,G,oBAC3B,MAAtBA,EAAK0M,c,wBACPb,EAAOc,UAAY3M,EAAK0M,c,UACJvW,KAAKyW,UAAUT,EAAQC,EAAQP,G,QACnD,IAAStQ,KADLsR,E,OACY7M,EACVA,EAAK8M,eAAevR,KACtByE,EAAKzE,GAAOyE,EAAKzE,GAAKmP,OAAOmC,EAAQ7M,KAAKzE,K,iCAIzC,CACLwE,SAAS,EACT7G,OAAQnE,EAASmE,OACjB8G,S,iCAGK,CACLD,SAAS,EACT7G,OAAQnE,EAASmE,OACjB9D,QACG4K,GAAQA,EAAKlL,OAASkL,EAAKlL,MAAMM,SAAY,kB,8DAIhD4K,IAAQA,EAAKlL,M,0CACR,CACLiL,SAAS,EACT7G,OAAQ,KAAIA,OACZ9D,QAAS,KAAIL,SAASiL,KAAKlL,MAAMM,SAAW,sB,iCAGzC,CACL2K,SAAS,EACT3K,QAAU,MAAO,KAAIA,SAAY,+B,6RAM9Be,KAAKyW,UACV,4D,iKAIgBpM,G,yGACXrK,KAAKyW,UAAL,UAAkBzW,KAAK4W,eAAvB,YAAyCvM,EAAzC,gB,iKAGUA,EAAWE,G,yGACrBvK,KAAKyW,UAAL,UACFzW,KAAK4W,eADH,YACqBvM,EADrB,sBAC4CE,EAD5C,e,sKAKaZ,G,yGACb3J,KAAKyW,UAAL,UAAkBzW,KAAKwL,QAAvB,YAAkC7B,EAAlC,kB,gIAjGP,IAAK3J,KAAKyJ,YAAa,MAAM,IAAI/I,MAAM,gCACvC,MAAO,CACLmW,OAAQ,MACRpU,QAAS,CACPqU,cAAe,UAAY9W,KAAKyJ,gB,8BAMpC,OAAOzJ,KAAK+W,uBAAyB,6C,aAG3B3W,GACVJ,KAAK+W,sBAAwB3W,I,qCAI7B,OAAOJ,KAAKwL,QAAL,iB,gCAmFI,QAAID,G,kCC5GnB,6CACe,SAASyL,EAAY9W,GAClC,IAAM+W,EAAMC,mBAKZ,OAJAtH,qBAAU,WACRqH,EAAIE,QAAUjX,IACb,CAACA,IAEG+W,EAAIE,U,kCCPb,0GAAMC,EAAa,SAACvN,EAAM3H,GAAS,IAE/BoJ,EAOEzB,EAPFyB,YACAnD,EAME0B,EANF1B,SACAsD,EAKE5B,EALF4B,SAJ+B,EAS7B5B,EAJFF,eAL+B,MAKrB,GALqB,IAS7BE,EAHFuB,kBAN+B,MAMlB,GANkB,IAS7BvB,EAFFS,gBAP+B,MAOpB,GAPoB,IAS7BT,EADFO,QAGF,MAAO,CACL,CACElI,KAAMA,EACNyH,UACAyB,aACAd,WACAF,aAjB6B,MAQrB,GARqB,EAkB7BiN,eAAgB,SAChBC,mBAAoB,SACpBnV,KAAM,WACNuF,QAAQ,EACR4D,cACAnD,WACAsD,WACAyH,uBAAuB,EACvBqE,0BAA0B,KAK1BC,EAAgB,SAAAtK,GACpB,OACEA,KACEA,EAAOvD,WACPuD,EAAO9B,cACP8B,EAAO5C,YACP4C,EAAO9C,SAIPqN,EAAgB,WAAiC,IAAhCvK,EAAgC,uDAAvB,GAAIwK,EAAmB,uDAAP,GACxCC,EAAepS,OAAOC,KAAK0H,GAAQ7N,OACnCuY,EAAkBrS,OAAOC,KAAKkS,GAAWrY,OAE/C,SAAKsY,IAAiBC,KAKpB1K,EAAOvD,UAAY+N,EAAU/N,SAC7BuD,EAAOvD,UAAY+N,EAAU/N,SAC7BuD,EAAO9B,aAAesM,EAAUtM,YAChC8B,EAAO5C,WAAaoN,EAAUpN,UAC9B4C,EAAO9C,UAAYsN,EAAUtN,W,kCCtDjC,oGAWMyN,EAAkB,SAAA/P,GAGtB,OAAOA,GAAWA,EAAQA,SAAWA,EAAQA,QAAQC,MAFpC,SAAAxD,GAAC,OAAiB,IAAbA,EAAEmD,WAKpB0P,EAAa,SAAC1H,EAAWtF,EAASE,EAAUX,EAASyB,GACzD,IAAItD,EAAU,GACd,GAAI4H,EAAUC,yBAA0B,CACtCpE,IAAeC,QAAUkE,EAAUqH,sBACnC,IAAMe,EAAUvM,IAAewM,mBAC7B3N,EACAE,EACAX,EACAyB,GAEIvB,EAAO,CACXO,UACAE,WACAX,UACAyB,aACAE,YAAawM,EACb3P,SAAU2P,EACVrM,SAAUqM,GAGZ,GADAhQ,EAAUyE,IAAkC1C,EAAMuB,IAC7CoM,EAAc1P,EAAQ,GAAI4H,GAC7B,OAIJ,OAAO5H,GAGH0P,EAAgB,SAACtK,EAAQwC,GAC7B,OAAIA,EAAUC,yBACLpD,IAAqCW,KAGrCA,GAGLxB,EAAa,SAACkB,EAAU9E,GAK5B8E,EAJe,CACbzK,KAAM,cACN2F,aAKEkQ,EAAmB,WAUpB,IATHlQ,EASG,uDATO,GACVmQ,EAQG,uCAPHpQ,EAOG,uCANHqQ,EAMG,uCALHxI,EAKG,2KAEH,IAAKA,EAAUC,yBACb,OAAO,EAGT,IAAMwI,EAAmBF,IAAoBnQ,GAAWmQ,EAGxD,GAAIE,EACF,OAAO,EAIT,IAAKD,IAAoBA,EAAgB7Y,OACvC,OAAO,EACF,IAAKyI,EAAQzI,SAAWwI,EAE7B,OAAO,EAGT,IAAMuQ,EAAYF,EAAgB,GAE9BG,EAASvQ,EAAQgN,KACnBvI,IAAqC+L,UAAKhF,EAAW8E,IAGvD,OAAQC,GAGK,SAASzC,IAKhB,6DAAJ,GAJFxL,EAIM,EAJNA,QACAE,EAGM,EAHNA,SACAX,EAEM,EAFNA,QACAyB,EACM,EADNA,WAGMtD,EAAUyQ,aAAY,SAAAvT,GAAK,OAAIA,GAASA,EAAM8C,WAC9CmQ,EAAkBjB,YAAYlP,GAC9B8E,EAAW4L,cAJX,EAMqBrJ,qBAAWC,KAA9BM,iBANF,MAMc,GANd,EAQA7H,EAAegQ,EAAgB/P,GAC/BoQ,EACJd,EAAW1H,EAAWtF,EAASE,EAAUX,EAASyB,IAAe,GAanE,GAZ2B4M,EACzBlQ,EAAQA,QACRmQ,EACApQ,EACAqQ,EACAxI,EACAtF,EACAE,EACAX,EACAyB,GAIAM,EAAWkB,EAAUsL,QAChB,GAAIV,EAAc3P,EAAc6H,GACrC,OAAO7H,I,iOCpIU4Q,E,wTAEVpX,EAAMqX,M,iCACJC,EAAOD,M,iCACP/O,EAAS+O,S,mwBCDtB,IAwDeE,EAxDO,qC,uGAAA,wF,EAAA,S,GAAA,yC,+CAAA,K,EACT,mB,EADS,c,wFAAA,E,UAAA,O,kOAAA,M,EAAA,G,EAAA,gCAEXvX,EAAMqX,GACb,OAAOG,IAA2BC,QAAQC,gBAAgBL,KAHxC,iCAMTC,EAAOD,GAChB,IAAM/O,EAAU,GAEhB,OADAA,EAAQ+O,QAAUC,EAAMD,SAAWA,EAC5B/O,IATW,iCAYTA,EAAS+O,GAClB,OAAO1Y,KAAKgZ,gBAAgBN,KAbV,sCAgBJA,GAoCd,MAnCc,CACZnF,iBAAkB,GAClBxF,UAAW,GACXkL,UAAW,GACXnL,gBAAiB,GACjBoL,uBAAwB,GACxBtL,YAAa,GACbC,UAAW,GACXsL,iBAAkB,GAClBC,WAAY,GACZC,QAAS,GACTpL,iBAAkB,GAClBqL,OAAQ,CACN,CACEC,kBAAmB,GACnBC,kBAAmB,GACnBC,aAAc,GACdC,UAAW,CACT,CACEC,SAAU,CACRC,eAAgB,GAChBC,YAAa,gCACbnH,KAAM,GACNoH,QAAS,GACTC,eAAgB,EAChBC,eAAgB,GAElBC,WAAY,kBAAMvB,GAClBwB,aAAa,Y,2BA7CL,GAAmBzB,I,2uBCEzC,IAAM0B,E,MAAmBnS,EAAKoS,YAAYD,iBA6F3BE,EA3FS,qC,uGAAA,wF,EAAA,S,GAAA,yC,+CAAA,K,EACX,qB,EADW,c,wFAAA,E,UAAA,O,kOAAA,M,EAAA,G,EAAA,gCAEbhZ,EAAMqX,GACb,OAAOG,IAA2BC,QAAQC,gBAAgBL,KAHtC,iCAMXC,EAAOD,GAChB,IAAI/O,EAAU,GACd,IACE,IAAM2Q,EAAYC,IAAM1Q,KAAK2Q,aAAa9Y,SAASiX,GAEnDhP,EAAU4Q,IAAM1Q,KAAK4Q,oBAAoBC,kBACvCJ,EAAUK,MAGZR,EAAiBS,YAAYjR,GAE7BA,EAAQkR,MAAQN,IAAM1Q,KAAK4Q,oBAAoBK,cAC7CR,EAAUS,MAEZ,MAAOhR,GACP+F,QAAQnR,MAAM,2BAA4BoL,GAK5C,OAFAJ,EAAQ+O,QAAUA,EAEX/O,IA1Ba,iCA6BXA,EAAS+O,GAClB,OAAO1Y,KAAKgb,oBAAoBrR,KA9BZ,4CAiCY,IAAdA,EAAc,uDAAJ,GAE1B4J,EAeE5J,EAfF4J,iBACAxF,EAcEpE,EAdFoE,UACAkL,EAaEtP,EAbFsP,UACAnL,EAYEnE,EAZFmE,gBACAoL,EAWEvP,EAXFuP,uBACAtL,EAUEjE,EAVFiE,YACAC,EASElE,EATFkE,UACAoN,EAQEtR,EARFsR,iBACA7B,EAOEzP,EAPFyP,WACA8B,EAMEvR,EANFuR,QACAjN,EAKEtE,EALFsE,iBACAsL,EAIE5P,EAJF4P,kBACAC,EAGE7P,EAHF6P,kBACAC,EAEE9P,EAFF8P,aACAf,EACE/O,EADF+O,QAGIyC,EAAW,CACfxB,SAAUhQ,EACVvJ,IAAKsY,GAGDY,EAAS,CACbC,kBAAmBA,EACnBC,kBAAmBA,EACnBC,aAAcA,EACdC,UAAW,CAACyB,IAGR9H,EAAQ,CACZE,mBACAxF,YACAkL,YACAnL,kBACAoL,yBACAtL,cACAC,YACAoN,mBACA7B,aACA8B,UACAjN,mBASAqL,OAAQ,CAACA,IAGX,OAAOjG,O,2BAvFa,GAAmBoF,I,k5CC0E5B2C,E,YAzEb,WAAY/Z,GAAM,M,iGAAA,S,EAChB,S,EAAA,kB,6CADgB,kDAEhB,IAAMga,EAAWha,GAAQA,EAAKc,KAFd,OAGhB,EAAKmZ,OAAS,EAAKC,UAAUF,GAC7B,EAAKA,SAAW,EAAKC,OAAOD,SAJZ,E,kSAOC9M,GACjB,IAAMiN,EAAU,SAACC,EAAMC,EAAYC,GACjC,IAAIC,EAAgB,EAEpB,OAAOH,EAAKnX,QAAO,SAACuX,EAAKC,GAAQ,MAC3B1W,EAAM0W,EAAIJ,GACRD,EAAOK,EAAIH,GAYjB,OAPKE,EAFLzW,EAAQA,GAAY,GAAKwW,OAGvBC,EAAIzW,G,+UAAJ,IAAgB0W,GAChBD,EAAIzW,GAAKuW,GAAW,KAGtB,EAAAE,EAAIzW,GAAKuW,IAASjW,KAAlB,UAA0B+V,IAEnBI,IACN,KAkBL,OAfuBtW,OAAOwW,OAC5BP,EAAQjN,EAAS,mBAAoB,WAGTnK,KAAI,SAAA4X,GAChC,IAAMC,EAAgBT,EACpBQ,EAAW1C,OACX,oBACA,aAIF,OAFA0C,EAAW1C,OAAS/T,OAAOwW,OAAOE,GAE3BD,S,iCAMH3a,GACN,OAAOwX,IAA2BC,QAAQoD,YAAYC,IAAI9a,K,+BAGnDA,EAAMqX,GACb,OAAO1Y,KAAKsb,OAAOc,SAAS/a,EAAMqX,K,iCAGzBC,EAAOD,GAChB,OAAO1Y,KAAKsb,OAAOe,WAAW1D,EAAOD,K,iCAG5B/O,EAAS+O,GAClB,OAAO1Y,KAAKsb,OAAOgB,WAAW3S,EAAS+O,K,gCAG/B2C,GACR,MAAiB,oBAAbA,EACKzC,EAGAyB,O,8BAvEmB5B,G,8VCHhC,IAAM8D,EAAW,4CAAG,WAAMlb,GAAN,8GAEVmb,EAAoB,IAAIpB,EAAkB/Z,GAC1CqX,EAAU8D,EAAkBC,QAAQpb,GAH1B,SAIImb,EAAkBJ,SAAS/a,EAAMqX,GAJrC,cAIVC,EAJU,gBAKM6D,EAAkBH,WAAW1D,EAAOD,GAL1C,cAKV/O,EALU,iBAMM6S,EAAkBF,WAAW3S,EAAS+O,GAN5C,eAMVnK,EANU,yBAQTA,GARS,kCAUhBuB,QAAQvR,IACN,KAAM2D,KACN,sDACA,KAAMjD,SAbQ,0DAAH,sDAkBF,SAAeyd,EAA9B,kC,iDAAe,WAA8Bvc,GAA9B,+FACPwc,EAAuBxc,EAAMiE,IAAImY,GAD1B,SAEShb,QAAQoT,IAAIgI,GAFrB,cAEPpO,EAFO,yBAIN6M,EAAkBwB,YAAYrO,EAAQsO,SAJhC,4C","file":"StudyListRouting.bundle.e3bb4bd50400bca703e3.js","sourcesContent":["export function formatFileSize(size) {\n  if (size === 0) return '0 B';\n  const n = Math.floor(Math.log(size) / Math.log(1024));\n  return (\n    (size / Math.pow(1024, n)).toFixed(2) * 1 +\n    ' ' +\n    ['B', 'kB', 'MB', 'GB', 'TB'][n]\n  );\n}\n\nexport function httpErrorToStr(error) {\n  if (!error) return 'Unknown error';\n  if (error.response) {\n    try {\n      const jsonResponse = JSON.parse(error.response);\n      if (\n        jsonResponse.error &&\n        jsonResponse.error.code &&\n        jsonResponse.error.message\n      )\n        return jsonResponse.error.code + ' - ' + jsonResponse.error.message;\n    } catch (err) {\n      return error.response;\n    }\n  }\n  return error.message || 'Unknown error.';\n}\n\n/* eslint-disable */\nexport function checkDicomFile(arrayBuffer) {\n  if (arrayBuffer.length <= 132) return false;\n  const arr = new Uint8Array(arrayBuffer.slice(128, 132));\n  // bytes from 128 to 132 must be \"DICM\"\n  return Array.from('DICM').every((char, i) => char.charCodeAt(0) === arr[i]);\n}\n","export default class CancellationToken {\n  constructor() {\n    this.cancelled = false;\n  }\n\n  get() {\n    return this.cancelled;\n  }\n\n  set(value) {\n    this.cancelled = value;\n  }\n}\n","import { httpErrorToStr, checkDicomFile } from '../utils/helpers';\nimport { api } from 'dicomweb-client';\nimport { errorHandler } from '@ohif/core';\n\nclass DicomUploadService {\n  async smartUpload(files, url, uploadCallback, cancellationToken) {\n    const CHUNK_SIZE = 1; // Only one file per request is supported so far\n    const MAX_PARALLEL_JOBS = 50; // FIXME: tune MAX_PARALLEL_JOBS number\n\n    let filesArray = Array.from(files);\n    if (filesArray.length === 0) {\n      throw new Error('No files were provided.');\n    }\n\n    let parallelJobsCount = Math.min(filesArray.length, MAX_PARALLEL_JOBS);\n    let completed = false;\n\n    const processJob = async (resolve, reject) => {\n      while (filesArray.length > 0) {\n        if (cancellationToken.get()) return;\n        let chunk = filesArray.slice(0, CHUNK_SIZE);\n        filesArray = filesArray.slice(CHUNK_SIZE);\n        let error = null;\n        try {\n          if (chunk.length > 1) throw new Error('Not implemented');\n          if (chunk.length === 1) await this.simpleUpload(chunk[0], url);\n        } catch (err) {\n          // It looks like a stupid bug of Babel that err is not an actual Exception object\n          error = httpErrorToStr(err);\n        }\n        chunk.forEach(file => uploadCallback(file.fileId, error));\n        if (!completed && filesArray.length === 0) {\n          completed = true;\n          resolve();\n          return;\n        }\n      }\n    };\n\n    await new Promise(resolve => {\n      for (let i = 0; i < parallelJobsCount; i++) {\n        processJob(resolve);\n      }\n    });\n  }\n\n  async simpleUpload(file, url) {\n    const client = this.getClient(url);\n    const loadedFile = await this.readFile(file);\n    const content = loadedFile.content;\n    if (!checkDicomFile(content))\n      throw new Error('This is not a valid DICOM file.');\n\n    await client.storeInstances({ datasets: [content] });\n  }\n\n  readFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        resolve({\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          content: reader.result,\n        });\n      };\n      reader.onerror = error => reject(error);\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  setRetrieveAuthHeaderFunction(func) {\n    this.retrieveAuthHeaderFunc = func;\n  }\n\n  getClient(url) {\n    const headers = this.retrieveAuthHeaderFunc();\n    const errorInterceptor = errorHandler.getHTTPErrorHandler();\n\n    // TODO: a bit weird we are creating a new dicomweb client instance for every upload\n    return new api.DICOMwebClient({\n      url,\n      headers,\n    });\n  }\n}\n\nexport default new DicomUploadService();\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatFileSize } from './utils/helpers';\nimport CancellationToken from './utils/CancellationToken';\nimport dicomUploader from './api/DicomUploadService';\nimport './DicomUploader.css';\n\nexport default class DicomUploader extends Component {\n  state = {\n    status: 'Upload',\n    isCancelled: false,\n    errorsCount: 0,\n    files: null,\n    uploadedVolume: null,\n    wholeVolumeStr: null,\n    isFilesListHidden: true,\n    timeLeft: null,\n    uploadedList: null,\n    totalCount: 0,\n    successfullyUploadedCount: 0,\n    lastFile: '',\n    uploadContext: null, // this is probably not needed, but we use this variable to distinguish between different downloads\n  };\n\n  static propTypes = {\n    id: PropTypes.string,\n    event: PropTypes.string,\n    url: PropTypes.string,\n    retrieveAuthHeaderFunction: PropTypes.func,\n  };\n\n  filesLeft() {\n    return (\n      this.state.uploadedList.length + ' of ' + this.state.totalCount + ' files'\n    );\n  }\n\n  volumeLeft() {\n    let left = formatFileSize(this.state.uploadedVolume);\n    return left + ' of ' + this.state.wholeVolumeStr;\n  }\n\n  percents() {\n    return parseInt(\n      (100 * this.state.uploadedList.length) /\n        Object.keys(this.state.files).length\n    );\n  }\n\n  isFinished() {\n    return (\n      this.state.isCancelled ||\n      Object.keys(this.state.files).length === this.state.uploadedList.length\n    );\n  }\n\n  errorsMessage() {\n    const errors = this.state.errorsCount === 1 ? ' error' : ' errors';\n    return (\n      this.state.errorsCount + errors + ' while uploading, click for more info'\n    );\n  }\n\n  uploadFiles = files => {\n    const filesArray = Array.from(files.target.files);\n    const filesDict = {};\n    filesArray.forEach((file, i) => {\n      const fileDesc = {\n        id: i,\n        name: file.name,\n        path: file.webkitRelativePath || file.name,\n        size: file.size,\n        error: null,\n        processed: false,\n        processedInUI: false,\n      };\n      filesDict[i] = fileDesc;\n      file.fileId = i;\n    });\n    const wholeVolume = filesArray.map(f => f.size).reduce((a, b) => a + b);\n    const uploadContext = Math.random();\n    this.setState({\n      status: 'Uploading...',\n      files: filesDict,\n      uploadedList: [],\n      uploadedVolume: 0,\n      lastFile: filesArray[0].name,\n      totalCount: filesArray.length,\n      wholeVolumeStr: formatFileSize(wholeVolume),\n      uploadContext: uploadContext,\n      cancellationToken: new CancellationToken(),\n    });\n    const cancellationToken = new CancellationToken();\n    const uploadCallback = (fileId, error) =>\n      uploadContext === this.state.uploadContext &&\n      this.uploadCallback.call(this, fileId, error);\n\n    dicomUploader.setRetrieveAuthHeaderFunction(this.props.retrieveAuthHeaderFunction);\n\n    dicomUploader.smartUpload(\n      files.target.files,\n      this.props.url,\n      uploadCallback,\n      cancellationToken\n    );\n  };\n\n  uploadCallback(fileId, error) {\n    const file = this.state.files[fileId];\n    file.processed = true;\n    if (!error) {\n      let uploadedVolume = this.state.uploadedVolume + file.size;\n      this.setState({ uploadedVolume });\n    } else {\n      file.error = error;\n      this.setState({ errorsCount: this.state.errorsCount + 1 });\n    }\n    this.setState({ lastFile: file.name });\n    let uploadedList = this.state.uploadedList;\n    uploadedList.push(file);\n    this.setState({ uploadedList });\n  }\n\n  renderTableRow = file => {\n    let error = null;\n    if (file.error !== null) {\n      error = <p style={{ color: 'red' }}>{file.error}</p>;\n    }\n    return (\n      <tr key={file.id}>\n        <td className=\"project\">\n          {file.name} {error}\n        </td>\n      </tr>\n    );\n  };\n\n  render() {\n    if (this.state.files === null) {\n      return (\n        <div className=\"dicom-uploader\">\n          <div className=\"button\">\n            <label htmlFor=\"file\">\n              <img src=\"./assets/Button_File.svg\" alt=\"upload file\"></img>\n            </label>\n            <input\n              className=\"invisible-input\"\n              onChange={this.uploadFiles}\n              type=\"file\"\n              id=\"file\"\n              multiple\n            />\n          </div>\n\n          <div className=\"button\">\n            <label htmlFor=\"folder\">\n              <img src=\"./assets/Button_Folder.svg\" alt=\"upload folder\"></img>\n            </label>\n            <input\n              className=\"invisible-input\"\n              type=\"file\"\n              onChange={this.uploadFiles}\n              id=\"folder\"\n              webkitdirectory=\"true\"\n              mozdirectory=\"true\"\n              multiple\n            />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <table id=\"tblProjectList\" className=\"table noselect\">\n        <thead>\n          <tr>\n            <th className=\"table-header\">\n              {this.percents()}% {this.filesLeft()}\n            </th>\n          </tr>\n        </thead>\n        <tbody id=\"ProjectList\">\n          {this.state.uploadedList.map(this.renderTableRow)}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DicomUploader from './DicomUploader';\nimport { withTranslation } from 'react-i18next';\nimport { servicesManager } from './../App.js';\n\nfunction DicomFileUploaderModal({\n                                 isOpen = false,\n                                 onClose,\n                                 url,\n                                 retrieveAuthHeaderFunction,\n                                 t,\n                               }) {\n  const { UIModalService } = servicesManager.services;\n\n  const showDicomStorePickerModal = () => {\n    if (!UIModalService) {\n      return\n    }\n\n    UIModalService.show({\n      content: DicomUploader,\n      title: t('Upload DICOM Files'),\n      contentProps: {\n        url,\n        retrieveAuthHeaderFunction\n      },\n      onClose,\n    });\n  };\n\n  return (\n    <React.Fragment>{isOpen && showDicomStorePickerModal()}</React.Fragment>\n  );\n}\n\nDicomFileUploaderModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  retrieveAuthHeaderFunction: PropTypes.func.isRequired,\n  onClose: PropTypes.func,\n  url: PropTypes.string,\n};\n\nexport default withTranslation('Common')(DicomFileUploaderModal);\n","import { connect } from 'react-redux';\nimport DicomFileUploaderModal from './DicomFileUploaderModal.js';\nimport OHIF from '@ohif/core';\n\nconst isActive = a => a.active === true;\n\nconst mapStateToProps = state => {\n  const activeServer = state.servers.servers.find(isActive);\n\n  // TODO: Not sure I like this approach since it means we are recreating\n  // this function every time redux changes\n  const retrieveAuthHeaderFunction = () =>\n    OHIF.DICOMWeb.getAuthorizationHeader(activeServer);\n\n  return {\n    retrieveAuthHeaderFunction,\n    url: activeServer && activeServer.qidoRoot,\n  };\n};\n\nconst ConnectedDicomFileUploader = connect(\n  mapStateToProps,\n  null\n)(DicomFileUploaderModal);\n\nexport default ConnectedDicomFileUploader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './googleCloud.css';\nimport { withTranslation } from 'react-i18next';\nimport { Icon } from '@ohif/ui';\n\nclass DicomStoreList extends Component {\n  state = {\n    search: '',\n  };\n\n  static propTypes = {\n    stores: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    onSelect: PropTypes.func,\n  };\n\n  static defaultProps = {\n    loading: true,\n  };\n\n  renderTableRow = store => {\n    return (\n      <tr\n        key={store.name}\n        className={\n          this.state.highlightedItem === store.name\n            ? 'noselect active'\n            : 'noselect'\n        }\n        onMouseEnter={() => {\n          this.onHighlightItem(store.name);\n        }}\n        onClick={() => {\n          this.props.onSelect(store);\n        }}\n      >\n        <td className=\"project\">{store.name.split('/')[7]}</td>\n      </tr>\n    );\n  };\n\n  onHighlightItem(store) {\n    this.setState({ highlightedItem: store });\n  }\n\n  render() {\n    const { loading, stores, filter, error } = this.props;\n\n    if (error) {\n      return <p>{error}</p>;\n    }\n\n    const loadingIcon = (\n      <Icon name=\"circle-notch\" className=\"loading-icon-spin loading-icon\" />\n    );\n\n    if (loading) {\n      return loadingIcon;\n    }\n\n    const body = (\n      <tbody id=\"StoreList\">{\n        stores.filter(store => (store.name.split('/')[7].toLowerCase().includes(filter.toLowerCase()) || filter==\"\")).map(this.renderTableRow)}\n      </tbody>\n    );\n\n    return (\n      <table id=\"tblStoreList\" className=\"gcp-table table noselect\">\n        <thead>\n          <tr>\n            <th>{this.props.t('DICOM Store')}</th>\n          </tr>\n        </thead>\n        {stores && body}\n      </table>\n    );\n  }\n}\n\nexport default withTranslation('Common')(DicomStoreList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from './api/GoogleCloudApi';\nimport DicomStoreList from './DicomStoreList';\nimport './googleCloud.css';\n\nexport default class DicomStorePicker extends Component {\n  state = {\n    error: null,\n    loading: true,\n    stores: [],\n    locations: [],\n    filterStr: '',\n  };\n\n  static propTypes = {\n    dataset: PropTypes.object,\n    onSelect: PropTypes.func,\n    accessToken: PropTypes.string.isRequired,\n  };\n\n  async componentDidMount() {\n    api.setAccessToken(this.props.accessToken);\n\n    const response = await api.loadDicomStores(this.props.dataset.name);\n\n    if (response.isError) {\n      this.setState({\n        error: response.message,\n      });\n\n      return;\n    }\n\n    this.setState({\n      stores: response.data.dicomStores || [],\n      loading: false,\n    });\n  }\n\n  render() {\n    const { stores, loading, error, filterStr } = this.state;\n    const { onSelect } = this.props;\n\n    return (\n      <div>\n        <input\n          className=\"form-control gcp-input\"\n          type=\"text\"\n          value={filterStr}\n          onChange={e => this.setState({ filterStr: e.target.value })}\n        />\n        <DicomStoreList\n          stores={stores}\n          loading={loading}\n          error={error}\n          filter={filterStr}\n          onSelect={onSelect}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './googleCloud.css';\nimport { withTranslation } from 'react-i18next';\nimport { Icon } from '@ohif/ui';\n\nclass DatasetsList extends Component {\n  state = {\n    search: '',\n  };\n\n  static propTypes = {\n    datasets: PropTypes.array,\n    loading: PropTypes.bool,\n    error: PropTypes.string,\n    onSelect: PropTypes.func,\n  };\n\n  static defaultProps = {\n    loading: true,\n  };\n\n  renderTableRow = dataset => {\n    return (\n      <tr\n        key={dataset.name}\n        className={\n          this.state.highlightedItem === dataset.name\n            ? 'noselect active'\n            : 'noselect'\n        }\n        onMouseEnter={() => {\n          this.onHighlightItem(dataset.name);\n        }}\n        onClick={() => {\n          this.props.onSelect(dataset);\n        }}\n      >\n        <td>{dataset.name.split('/')[5]}</td>\n      </tr>\n    );\n  };\n\n  onHighlightItem(dataset) {\n    this.setState({ highlightedItem: dataset });\n  }\n\n  render() {\n    const { loading, datasets, filter, error } = this.props;\n    \n    if (error) {\n      return <p>{error}</p>;\n    }\n\n    const loadingIcon = (\n      <Icon name=\"circle-notch\" className=\"loading-icon-spin loading-icon\" />\n    );\n\n    if (loading) {\n      return loadingIcon;\n    }\n\n    const body = (\n      <tbody id=\"DatasetList\">\n        {datasets.filter(dataset => (dataset.name.split('/')[5].toLowerCase().includes(filter.toLowerCase()) || filter==\"\")).map(this.renderTableRow)}\n      </tbody>\n    );\n\n    return (\n      <table id=\"tblDatasetList\" className=\"gcp-table table noselect\">\n        <thead>\n          <tr>\n            <th>{this.props.t('Dataset')}</th>\n          </tr>\n        </thead>\n        {datasets && body}\n      </table>\n    );\n  }\n}\n\nexport default withTranslation('Common')(DatasetsList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from './api/GoogleCloudApi';\nimport DatasetsList from './DatasetsList';\nimport './googleCloud.css';\n\nexport default class DatasetPicker extends Component {\n  state = {\n    error: null,\n    loading: true,\n    datasets: [],\n    filterStr: '',\n  };\n\n  static propTypes = {\n    project: PropTypes.object,\n    location: PropTypes.object,\n    onSelect: PropTypes.func,\n    accessToken: PropTypes.string,\n  };\n\n  async componentDidMount() {\n    api.setAccessToken(this.props.accessToken);\n\n    const response = await api.loadDatasets(\n      this.props.project.projectId,\n      this.props.location.locationId\n    );\n\n    if (response.isError) {\n      this.setState({\n        error: response.message,\n      });\n\n      return;\n    }\n\n    this.setState({\n      datasets: response.data.datasets || [],\n      loading: false,\n    });\n  }\n\n  render() {\n    const { datasets, loading, error, filterStr } = this.state;\n    const { onSelect } = this.props;\n    return (\n      <div>\n        <input\n          className=\"form-control gcp-input\"\n          type=\"text\"\n          value={filterStr}\n          onChange={e => this.setState({ filterStr: e.target.value })}\n        />\n        <DatasetsList\n          datasets={datasets}\n          loading={loading}\n          error={error}\n          filter={filterStr}\n          onSelect={onSelect}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './googleCloud.css';\nimport { withTranslation } from 'react-i18next';\nimport { Icon } from '@ohif/ui';\n\nclass ProjectsList extends Component {\n  state = {\n    search: '',\n    highlightedItem: null,\n  };\n\n  static propTypes = {\n    projects: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    onSelect: PropTypes.func.isRequired,\n    t: PropTypes.func,\n  };\n\n  static defaultProps = {\n    loading: true,\n  };\n\n  renderTableRow = project => {\n    return (\n      <tr\n        key={project.projectId}\n        className={\n          this.state.highlightedItem === project.projectId\n            ? 'noselect active'\n            : 'noselect'\n        }\n        onMouseEnter={() => {\n          this.onHighlightItem(project.projectId);\n        }}\n        onClick={() => {\n          this.onHighlightItem(project.projectId);\n          this.props.onSelect(project);\n        }}\n      >\n        <td>{project.name}</td>\n        <td>{project.projectId}</td>\n      </tr>\n    );\n  };\n\n  onHighlightItem(project) {\n    this.setState({ highlightedItem: project });\n  }\n\n  render() {\n    const { loading, projects, filter, error } = this.props;\n\n    if (error) {\n      return <p>{error}</p>;\n    }\n\n    const loadingIcon = (\n      <Icon name=\"circle-notch\" className=\"loading-icon-spin loading-icon\" />\n    );\n\n    if (loading) {\n      return loadingIcon;\n    }\n\n    const lowerCaseFilter = filter.toLowerCase();\n    const filteredProjects = projects.filter(project =>   \n      typeof project.name  === 'string' &&\n      (filter === \"\" || project.name.toLowerCase().includes(lowerCaseFilter))\n    );\n\n    const body = (\n      <tbody id=\"ProjectList\">\n        {\n          filteredProjects.map(this.renderTableRow)\n        }\n      </tbody>\n    );\n\n    return (\n      <table id=\"tblProjectList\" className=\"gcp-table table noselect\">\n        <thead>\n          <tr>\n            <th>{this.props.t('Project')}</th>\n            <th>{this.props.t('ID')}</th>\n          </tr>\n        </thead>\n        {projects && body}\n      </table>\n    );\n  }\n}\n\nexport default withTranslation('Common')(ProjectsList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from './api/GoogleCloudApi';\nimport ProjectsList from './ProjectsList';\nimport './googleCloud.css';\n\nexport default class ProjectPicker extends Component {\n  state = {\n    error: null,\n    loading: true,\n    projects: [],\n  };\n\n  static propTypes = {\n    onSelect: PropTypes.func,\n    accessToken: PropTypes.string,\n  };\n\n  async componentDidMount() {\n    api.setAccessToken(this.props.accessToken);\n    const response = await api.loadProjects();\n\n    if (response.isError) {\n      this.setState({\n        error: response.message,\n      });\n\n      return;\n    }\n\n    this.setState({\n      projects: response.data.projects || [],\n      filterStr: '',\n      loading: false,\n    });\n  }\n\n  render() {\n    const { projects, loading, filterStr, error } = this.state;\n    const { onSelect } = this.props;\n    return (\n      <div>\n        <input\n          className=\"form-control gcp-input\"\n          type=\"text\"\n          value={filterStr}\n          onChange={e => this.setState({ filterStr: e.target.value })}\n        />\n        <ProjectsList\n          projects={projects}\n          loading={loading}\n          filter={filterStr}\n          error={error}\n          onSelect={onSelect}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './googleCloud.css';\nimport { withTranslation } from 'react-i18next';\nimport { Icon } from '@ohif/ui';\n\nclass LocationsList extends Component {\n  state = {\n    search: '',\n  };\n\n  static propTypes = {\n    locations: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    onSelect: PropTypes.func,\n  };\n\n  static defaultProps = {\n    loading: true,\n  };\n\n  renderTableRow = location => {\n    return (\n      <tr\n        key={location.locationId}\n        className={\n          this.state.highlightedItem === location.locationId\n            ? 'noselect active'\n            : 'noselect'\n        }\n        onMouseEnter={() => {\n          this.onHighlightItem(location.locationId);\n        }}\n        onClick={() => {\n          this.props.onSelect(location);\n        }}\n      >\n        <td>{location.name.split('/')[3]}</td>\n      </tr>\n    );\n  };\n\n  onHighlightItem(locationId) {\n    this.setState({ highlightedItem: locationId });\n  }\n\n  render() {\n    const { loading, locations, filter, error } = this.props;\n\n    if (error) {\n      return <p>{error}</p>;\n    }\n\n    const loadingIcon = (\n      <Icon name=\"circle-notch\" className=\"loading-icon-spin loading-icon\" />\n    );\n\n    if (loading) {\n      return loadingIcon;\n    }\n\n    const body = (\n      <tbody id=\"LocationList\">\n        {locations.filter(location => (location.name.split('/')[3].toLowerCase().includes(filter.toLowerCase()) || filter==\"\")).map(this.renderTableRow)}\n      </tbody>\n    );\n\n    return (\n      <table id=\"tblLocationList\" className=\"gcp-table table noselect\">\n        <thead>\n          <tr>\n            <th>{this.props.t('Location')}</th>\n          </tr>\n        </thead>\n        {locations && body}\n      </table>\n    );\n  }\n}\n\nexport default withTranslation('Common')(LocationsList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from './api/GoogleCloudApi';\nimport LocationsList from './LocationsList';\nimport './googleCloud.css';\n\nexport default class LocationPicker extends Component {\n  state = {\n    error: null,\n    loading: true,\n    locations: [],\n    filterStr: '',\n  };\n\n  static propTypes = {\n    project: PropTypes.object,\n    onSelect: PropTypes.func,\n    accessToken: PropTypes.string,\n  };\n\n  async componentDidMount() {\n    api.setAccessToken(this.props.accessToken);\n\n    const response = await api.loadLocations(this.props.project.projectId);\n\n    if (response.isError) {\n      this.setState({\n        error: response.message,\n      });\n\n      return;\n    }\n\n    this.setState({\n      locations: response.data.locations || [],\n      loading: false,\n    });\n  }\n\n  render() {\n    const { locations, loading, error, filterStr } = this.state;\n    const { onSelect } = this.props;\n    return (\n      <div>\n        <input\n          className=\"form-control gcp-input\"\n          type=\"text\"\n          value={filterStr}\n          onChange={e => this.setState({ filterStr: e.target.value })}\n        />\n        <LocationsList\n          locations={locations}\n          loading={loading}\n          error={error}\n          filter={filterStr}\n          onSelect={onSelect}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport DicomStorePicker from './DicomStorePicker';\nimport DatasetPicker from './DatasetPicker';\nimport ProjectPicker from './ProjectPicker';\nimport LocationPicker from './LocationPicker';\nimport GoogleCloudApi from './api/GoogleCloudApi';\nimport './googleCloud.css';\n\nclass DatasetSelector extends Component {\n  state = {\n    project: null,\n    location: null,\n    dataset: null,\n    unloading: false,\n  };\n\n  static propTypes = {\n    id: PropTypes.string,\n    event: PropTypes.string,\n    user: PropTypes.object,\n    canClose: PropTypes.string,\n    setServers: PropTypes.func.isRequired,\n  };\n\n  onProjectSelect = project => {\n    this.setState({\n      project,\n    });\n  };\n\n  onLocationSelect = location => {\n    this.setState({\n      location,\n    });\n  };\n\n  onDatasetSelect = dataset => {\n    this.setState({\n      dataset,\n    });\n  };\n\n  onProjectClick = () => {\n    this.setState({\n      dataset: null,\n      location: null,\n      project: null,\n    });\n  };\n\n  onLocationClick = () => {\n    this.setState({\n      dataset: null,\n      location: null,\n    });\n  };\n\n  onDatasetClick = () => {\n    this.setState({\n      dataset: null,\n    });\n  };\n\n  onDicomStoreSelect = dicomStoreJson => {\n    const dicomStore = dicomStoreJson.name;\n    const parts = dicomStore.split('/');\n    const result = {\n      wadoUriRoot: GoogleCloudApi.urlBase + `/${dicomStore}/dicomWeb`,\n      qidoRoot: GoogleCloudApi.urlBase + `/${dicomStore}/dicomWeb`,\n      wadoRoot: GoogleCloudApi.urlBase + `/${dicomStore}/dicomWeb`,\n      project: parts[1],\n      location: parts[3],\n      dataset: parts[5],\n      dicomStore: parts[7],\n    };\n    this.props.setServers(result);\n  };\n\n  render() {\n    const accessToken = this.props.user.access_token;\n\n    const { project, location, dataset } = this.state;\n    const {\n      onProjectClick,\n      onLocationClick,\n      onDatasetClick,\n      onProjectSelect,\n      onLocationSelect,\n      onDatasetSelect,\n      onDicomStoreSelect,\n    } = this;\n\n    let projectBreadcrumbs = (\n      <div className=\"gcp-picker--path\">\n        <span>{this.props.t('Select a Project')}</span>\n      </div>\n    );\n\n    if (project) {\n      projectBreadcrumbs = (\n        <div className=\"gcp-picker--path\">\n          <span onClick={onProjectClick}>{project.name}</span>\n          {project && location && (\n            <span onClick={onLocationClick}>\n              {' '}\n              -> {location.name.split('/')[3]}\n            </span>\n          )}\n          {project && location && dataset && (\n            <span onClick={onDatasetClick}>\n              {' '}\n              -> {dataset.name.split('/')[5]}\n            </span>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <>\n        {projectBreadcrumbs}\n        {!project && (\n          <ProjectPicker accessToken={accessToken} onSelect={onProjectSelect} />\n        )}\n\n        {project && !location && (\n          <LocationPicker\n            accessToken={accessToken}\n            project={project}\n            onSelect={onLocationSelect}\n          />\n        )}\n        {project && location && !dataset && (\n          <DatasetPicker\n            accessToken={accessToken}\n            project={project}\n            location={location}\n            onSelect={onDatasetSelect}\n          />\n        )}\n        {project && location && dataset && (\n          <DicomStorePicker\n            accessToken={accessToken}\n            dataset={dataset}\n            onSelect={onDicomStoreSelect}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default withTranslation('Common')(DatasetSelector);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DatasetSelector from './DatasetSelector';\nimport './googleCloud.css';\nimport { withTranslation } from 'react-i18next';\nimport * as GoogleCloudUtilServers from './utils/getServers';\n\nimport { servicesManager } from './../App.js';\n\nfunction DicomStorePickerModal({\n  isOpen = false,\n  setServers,\n  onClose,\n  user,\n  url,\n  t,\n}) {\n  const { UIModalService } = servicesManager.services;\n\n  const showDicomStorePickerModal = () => {\n    const handleEvent = data => {\n      const servers = GoogleCloudUtilServers.getServers(data, data.dicomstore);\n      setServers(servers);\n\n      // Force auto close\n      UIModalService.hide();\n      onClose();\n    };\n\n    if (UIModalService) {\n      UIModalService.show({\n        content: DatasetSelector,\n        title: t('Google Cloud Healthcare API'),\n        contentProps: {\n          setServers: handleEvent,\n          user,\n          url,\n        },\n        onClose\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>{isOpen && showDicomStorePickerModal()}</React.Fragment>\n  );\n}\n\nDicomStorePickerModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  setServers: PropTypes.func.isRequired,\n  onClose: PropTypes.func,\n  user: PropTypes.object.isRequired,\n  url: PropTypes.string,\n};\n\nexport default withTranslation('Common')(DicomStorePickerModal);\n","import { connect } from 'react-redux';\nimport DicomStorePickerModal from './DicomStorePickerModal.js';\n\nconst isActive = a => a.active === true;\n\nconst mapStateToProps = state => {\n  const activeServer = state.servers.servers.find(isActive);\n\n  return {\n    user: state.oidc && state.oidc.user,\n    url: activeServer && activeServer.qidoRoot,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setServers: servers => {\n      const action = {\n        type: 'SET_SERVERS',\n        servers,\n      };\n      dispatch(action);\n    },\n  };\n};\n\nconst ConnectedDicomStorePicker = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DicomStorePickerModal);\n\nexport default ConnectedDicomStorePicker;\n","import React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF from '@ohif/core';\nimport { withRouter } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  StudyList,\n  PageToolbar,\n  TablePagination,\n  useDebounce,\n  useMedia,\n} from '@ohif/ui';\nimport ConnectedHeader from '../connectedComponents/ConnectedHeader.js';\nimport * as RoutesUtil from '../routes/routesUtil';\nimport moment from 'moment';\nimport ConnectedDicomFilesUploader from '../googleCloud/ConnectedDicomFilesUploader';\nimport ConnectedDicomStorePicker from '../googleCloud/ConnectedDicomStorePicker';\nimport filesToStudies from '../lib/filesToStudies.js';\n\n// Contexts\nimport UserManagerContext from '../context/UserManagerContext';\nimport WhiteLabelingContext from '../context/WhiteLabelingContext';\nimport AppContext from '../context/AppContext';\n\nconst { urlUtil: UrlUtil } = OHIF.utils;\n\nfunction StudyListRoute(props) {\n  const { history, server, user, studyListFunctionsEnabled } = props;\n  const [t] = useTranslation('Common');\n  // ~~ STATE\n  const [sort, setSort] = useState({\n    fieldName: 'PatientName',\n    direction: 'desc',\n  });\n  const [filterValues, setFilterValues] = useState({\n    studyDateTo: null,\n    studyDateFrom: null,\n    PatientName: '',\n    PatientID: '',\n    AccessionNumber: '',\n    StudyDate: '',\n    modalities: '',\n    StudyDescription: '',\n    //\n    patientNameOrId: '',\n    accessionOrModalityOrDescription: '',\n    //\n    allFields: '',\n  });\n  const [studies, setStudies] = useState([]);\n  const [searchStatus, setSearchStatus] = useState({\n    isSearchingForStudies: false,\n    error: null,\n  });\n  const [activeModalId, setActiveModalId] = useState(null);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n  const [pageNumber, setPageNumber] = useState(0);\n  const appContext = useContext(AppContext);\n  // ~~ RESPONSIVE\n  const displaySize = useMedia(\n    [\n      '(min-width: 1750px)',\n      '(min-width: 1000px) and (max-width: 1749px)',\n      '(max-width: 999px)',\n    ],\n    ['large', 'medium', 'small'],\n    'small'\n  );\n  // ~~ DEBOUNCED INPUT\n  const debouncedSort = useDebounce(sort, 200);\n  const debouncedFilters = useDebounce(filterValues, 250);\n\n  // Google Cloud Adapter for DICOM Store Picking\n  const { appConfig = {} } = appContext;\n  const isGoogleCHAIntegrationEnabled =\n    !server && appConfig.enableGoogleCloudAdapter;\n  if (isGoogleCHAIntegrationEnabled && activeModalId !== 'DicomStorePicker') {\n    setActiveModalId('DicomStorePicker');\n  }\n\n  // Called when relevant state/props are updated\n  // Watches filters and sort, debounced\n  useEffect(\n    () => {\n      const fetchStudies = async () => {\n        try {\n          setSearchStatus({ error: null, isSearchingForStudies: true });\n\n          const response = await getStudyList(\n            server,\n            debouncedFilters,\n            debouncedSort,\n            rowsPerPage,\n            pageNumber,\n            displaySize\n          );\n\n          setStudies(response);\n          setSearchStatus({ error: null, isSearchingForStudies: false });\n        } catch (error) {\n          console.warn(error);\n          setSearchStatus({ error: true, isFetching: false });\n        }\n      };\n\n      if (server) {\n        fetchStudies();\n      }\n    },\n    // TODO: Can we update studies directly?\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      debouncedFilters,\n      debouncedSort,\n      rowsPerPage,\n      pageNumber,\n      displaySize,\n      server,\n    ]\n  );\n\n  // TODO: Update Server\n  // if (this.props.server !== prevProps.server) {\n  //   this.setState({\n  //     modalComponentId: null,\n  //     searchData: null,\n  //     studies: null,\n  //   });\n  // }\n\n  const onDrop = async acceptedFiles => {\n    try {\n      const studiesFromFiles = await filesToStudies(acceptedFiles);\n      setStudies(studiesFromFiles);\n    } catch (error) {\n      setSearchStatus({ isSearchingForStudies: false, error });\n    }\n  };\n\n  if (searchStatus.error) {\n    return <div>Error: {JSON.stringify(searchStatus.error)}</div>;\n  } else if (studies === [] && !activeModalId) {\n    return <div>Loading...</div>;\n  }\n\n  let healthCareApiButtons = null;\n  let healthCareApiWindows = null;\n\n  if (appConfig.enableGoogleCloudAdapter) {\n    const isModalOpen = activeModalId === 'DicomStorePicker';\n    updateURL(isModalOpen, appConfig, server, history);\n\n    healthCareApiWindows = (\n      <ConnectedDicomStorePicker\n        isOpen={activeModalId === 'DicomStorePicker'}\n        onClose={() => setActiveModalId(null)}\n      />\n    );\n\n    healthCareApiButtons = (\n      <div\n        className=\"form-inline btn-group pull-right\"\n        style={{ padding: '20px' }}\n      >\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => setActiveModalId('DicomStorePicker')}\n        >\n          {t('Change DICOM Store')}\n        </button>\n      </div>\n    );\n  }\n\n  function handleSort(fieldName) {\n    let sortFieldName = fieldName;\n    let sortDirection = 'asc';\n\n    if (fieldName === sort.fieldName) {\n      if (sort.direction === 'asc') {\n        sortDirection = 'desc';\n      } else {\n        sortFieldName = null;\n        sortDirection = null;\n      }\n    }\n\n    setSort({\n      fieldName: sortFieldName,\n      direction: sortDirection,\n    });\n  }\n\n  function handleFilterChange(fieldName, value) {\n    setFilterValues(state => {\n      return {\n        ...state,\n        [fieldName]: value,\n      };\n    });\n  }\n\n  return (\n    <>\n      {studyListFunctionsEnabled ? (\n        <ConnectedDicomFilesUploader\n          isOpen={activeModalId === 'DicomFilesUploader'}\n          onClose={() => setActiveModalId(null)}\n        />\n      ) : null}\n      {healthCareApiWindows}\n      <WhiteLabelingContext.Consumer>\n        {whiteLabeling => (\n          <UserManagerContext.Consumer>\n            {userManager => (\n              <ConnectedHeader\n                useLargeLogo={true}\n                user={user}\n                userManager={userManager}\n              >\n                {whiteLabeling &&\n                  whiteLabeling.createLogoComponentFn &&\n                  whiteLabeling.createLogoComponentFn(React)}\n              </ConnectedHeader>\n            )}\n          </UserManagerContext.Consumer>\n        )}\n      </WhiteLabelingContext.Consumer>\n      <div className=\"study-list-header\">\n        <div className=\"header\">\n          <h1 style={{ fontWeight: 300, fontSize: '22px' }}>\n            {t('StudyList')}\n          </h1>\n        </div>\n        <div className=\"actions\">\n          {studyListFunctionsEnabled && healthCareApiButtons}\n          {studyListFunctionsEnabled && (\n            <PageToolbar\n              onImport={() => setActiveModalId('DicomFilesUploader')}\n            />\n          )}\n          <span className=\"study-count\">{studies.length}</span>\n        </div>\n      </div>\n\n      <div className=\"table-head-background\" />\n      <div className=\"study-list-container\">\n        {/* STUDY LIST OR DROP ZONE? */}\n        <StudyList\n          isLoading={searchStatus.isSearchingForStudies}\n          hasError={searchStatus.error === true}\n          // Rows\n          studies={studies}\n          onSelectItem={studyInstanceUID => {\n            const viewerPath = RoutesUtil.parseViewerPath(appConfig, server, {\n              studyInstanceUIDs: studyInstanceUID,\n            });\n            history.push(viewerPath);\n          }}\n          // Table Header\n          sort={sort}\n          onSort={handleSort}\n          filterValues={filterValues}\n          onFilterChange={handleFilterChange}\n          studyListDateFilterNumDays={appConfig.studyListDateFilterNumDays}\n          displaySize={displaySize}\n        />\n        {/* PAGINATION FOOTER */}\n        <TablePagination\n          currentPage={pageNumber}\n          nextPageFunc={() => setPageNumber(pageNumber + 1)}\n          prevPageFunc={() => setPageNumber(pageNumber - 1)}\n          onRowsPerPageChange={Rows => setRowsPerPage(Rows)}\n          rowsPerPage={rowsPerPage}\n          recordCount={studies.length}\n        />\n      </div>\n    </>\n  );\n}\n\nStudyListRoute.propTypes = {\n  filters: PropTypes.object,\n  PatientID: PropTypes.string,\n  server: PropTypes.object,\n  user: PropTypes.object,\n  history: PropTypes.object,\n  studyListFunctionsEnabled: PropTypes.bool,\n};\n\nStudyListRoute.defaultProps = {\n  studyListFunctionsEnabled: true,\n};\n\nfunction updateURL(isModalOpen, appConfig, server, history) {\n  if (isModalOpen) {\n    return;\n  }\n\n  const listPath = RoutesUtil.parseStudyListPath(appConfig, server);\n\n  if (UrlUtil.paramString.isValidPath(listPath)) {\n    const { location = {} } = history;\n    if (location.pathname !== listPath) {\n      history.replace(listPath);\n    }\n  }\n}\n\n/**\n * Not ideal, but we use displaySize to determine how the filters should be used\n * to build the collection of promises we need to fetch a result set.\n *\n * @param {*} server\n * @param {*} filters\n * @param {object} sort\n * @param {string} sort.fieldName - field to sort by\n * @param {string} sort.direction - direction to sort\n * @param {number} rowsPerPage - Number of results to return\n * @param {number} pageNumber - Used to determine results offset\n * @param {string} displaySize - small, medium, large\n * @returns\n */\nasync function getStudyList(\n  server,\n  filters,\n  sort,\n  rowsPerPage,\n  pageNumber,\n  displaySize\n) {\n  const {\n    allFields,\n    patientNameOrId,\n    accessionOrModalityOrDescription,\n  } = filters;\n  const sortFieldName = sort.fieldName || 'PatientName';\n  const sortDirection = sort.direction || 'desc';\n\n  const mappedFilters = {\n    PatientID: filters.PatientID,\n    PatientName: filters.PatientName,\n    AccessionNumber: filters.AccessionNumber,\n    StudyDescription: filters.StudyDescription,\n    ModalitiesInStudy: filters.modalities,\n    // NEVER CHANGE\n    studyDateFrom: filters.studyDateFrom,\n    studyDateTo: filters.studyDateTo,\n    limit: rowsPerPage,\n    offset: pageNumber * rowsPerPage,\n    fuzzymatching: server.supportsFuzzyMatching === true,\n  };\n\n  const studies = await _fetchStudies(server, mappedFilters, displaySize, {\n    allFields,\n    patientNameOrId,\n    accessionOrModalityOrDescription,\n  });\n\n  // Only the fields we use\n  const mappedStudies = studies.map(study => {\n    const PatientName =\n      typeof study.PatientName === 'string' ? study.PatientName : undefined;\n\n    return {\n      AccessionNumber: study.AccessionNumber, // \"1\"\n      modalities: study.modalities, // \"SEG\\\\MR\"  ​​\n      // numberOfStudyRelatedInstances: \"3\"\n      // numberOfStudyRelatedSeries: \"3\"\n      // PatientBirthdate: undefined\n      PatientID: study.PatientID, // \"NOID\"\n      PatientName, // \"NAME^NONE\"\n      // PatientSex: \"M\"\n      // referringPhysicianName: undefined\n      StudyDate: study.StudyDate, // \"Jun 28, 2002\"\n      StudyDescription: study.StudyDescription, // \"BRAIN\"\n      // studyId: \"No Study ID\"\n      StudyInstanceUID: study.StudyInstanceUID, // \"1.3.6.1.4.1.5962.99.1.3814087073.479799962.1489872804257.3.0\"\n      // StudyTime: \"160956.0\"\n    };\n  });\n\n  // For our smaller displays, map our field name to a single\n  // field we can actually sort by.\n  const sortFieldNameMapping = {\n    allFields: 'PatientName',\n    patientNameOrId: 'PatientName',\n    accessionOrModalityOrDescription: 'modalities',\n  };\n  const mappedSortFieldName =\n    sortFieldNameMapping[sortFieldName] || sortFieldName;\n\n  const sortedStudies = _sortStudies(\n    mappedStudies,\n    mappedSortFieldName,\n    sortDirection\n  );\n\n  // Because we've merged multiple requests, we may have more than\n  // our Rows per page. Let's `take` that number from our sorted array.\n  // This \"might\" cause paging issues.\n  const numToTake =\n    sortedStudies.length < rowsPerPage ? sortedStudies.length : rowsPerPage;\n  const result = sortedStudies.slice(0, numToTake);\n\n  return result;\n}\n\n/**\n *\n *\n * @param {object[]} studies - Array of studies to sort\n * @param {string} studies.StudyDate - Date in 'MMM DD, YYYY' format\n * @param {string} field - name of properties on study to sort by\n * @param {string} order - 'asc' or 'desc'\n * @returns\n */\nfunction _sortStudies(studies, field, order) {\n  // Make sure our StudyDate is in a valid format and create copy of studies array\n  const sortedStudies = studies.map(study => {\n    if (!moment(study.StudyDate, 'MMM DD, YYYY', true).isValid()) {\n      study.StudyDate = moment(study.StudyDate, 'YYYYMMDD').format(\n        'MMM DD, YYYY'\n      );\n    }\n    return study;\n  });\n\n  // Sort by field\n  sortedStudies.sort(function(a, b) {\n    let fieldA = a[field];\n    let fieldB = b[field];\n    if (field === 'StudyDate') {\n      fieldA = moment(fieldA).toISOString();\n      fieldB = moment(fieldB).toISOString();\n    }\n\n    // Order\n    if (order === 'desc') {\n      if (fieldA < fieldB) {\n        return -1;\n      }\n      if (fieldA > fieldB) {\n        return 1;\n      }\n      return 0;\n    } else {\n      if (fieldA > fieldB) {\n        return -1;\n      }\n      if (fieldA < fieldB) {\n        return 1;\n      }\n      return 0;\n    }\n  });\n\n  return sortedStudies;\n}\n\n/**\n * We're forced to do this because DICOMWeb does not support \"AND|OR\" searches\n * across multiple fields. This allows us to make multiple requests, remove\n * duplicates, and return the result set as if it were supported\n *\n * @param {object} server\n * @param {Object} filters\n * @param {string} displaySize - small, medium, or large\n * @param {string} multi.allFields\n * @param {string} multi.patientNameOrId\n * @param {string} multi.accessionOrModalityOrDescription\n */\nasync function _fetchStudies(\n  server,\n  filters,\n  displaySize,\n  { allFields, patientNameOrId, accessionOrModalityOrDescription }\n) {\n  let queryFiltersArray = [filters];\n\n  if (displaySize === 'small') {\n    const firstSet = _getQueryFiltersForValue(\n      filters,\n      [\n        'PatientID',\n        'PatientName',\n        'AccessionNumber',\n        'StudyDescription',\n        'ModalitiesInStudy',\n      ],\n      allFields\n    );\n\n    if (firstSet.length) {\n      queryFiltersArray = firstSet;\n    }\n  } else if (displaySize === 'medium') {\n    const firstSet = _getQueryFiltersForValue(\n      filters,\n      ['PatientID', 'PatientName'],\n      patientNameOrId\n    );\n\n    const secondSet = _getQueryFiltersForValue(\n      filters,\n      ['AccessionNumber', 'StudyDescription', 'ModalitiesInStudy'],\n      accessionOrModalityOrDescription\n    );\n\n    if (firstSet.length || secondSet.length) {\n      queryFiltersArray = firstSet.concat(secondSet);\n    }\n  }\n\n  const queryPromises = [];\n\n  queryFiltersArray.forEach(filter => {\n    const searchStudiesPromise = OHIF.studies.searchStudies(server, filter);\n    queryPromises.push(searchStudiesPromise);\n  });\n\n  const lotsOfStudies = await Promise.all(queryPromises);\n  const studies = [];\n\n  // Flatten and dedupe\n  lotsOfStudies.forEach(arrayOfStudies => {\n    if (arrayOfStudies) {\n      arrayOfStudies.forEach(study => {\n        if (!studies.some(s => s.StudyInstanceUID === study.StudyInstanceUID)) {\n          studies.push(study);\n        }\n      });\n    }\n  });\n\n  return studies;\n}\n\n/**\n *\n *\n * @param {*} filters\n * @param {*} fields - Array of string fields\n * @param {*} value\n */\nfunction _getQueryFiltersForValue(filters, fields, value) {\n  const queryFilters = [];\n\n  if (value === '' || !value) {\n    return queryFilters;\n  }\n\n  fields.forEach(field => {\n    const filter = Object.assign(\n      {\n        PatientID: '',\n        PatientName: '',\n        AccessionNumber: '',\n        StudyDescription: '',\n        ModalitiesInStudy: '',\n      },\n      filters\n    );\n\n    filter[field] = value;\n    queryFilters.push(filter);\n  });\n\n  return queryFilters;\n}\n\nexport default withRouter(StudyListRoute);\n","import { connect } from 'react-redux';\n\nimport StudyListRoute from './StudyListRoute.js';\n\nconst isActive = a => a.active === true;\n\nconst mapStateToProps = state => {\n  const activeServer = state.servers.servers.find(isActive);\n\n  return {\n    server: activeServer,\n    user: state.oidc.user,\n  };\n};\n\nconst ConnectedStudyList = connect(\n  mapStateToProps,\n  null\n)(StudyListRoute);\n\nexport default ConnectedStudyList;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport ConnectedStudyList from './ConnectedStudyList';\nimport useServer from '../customHooks/useServer';\nimport OHIF from '@ohif/core';\nconst { urlUtil: UrlUtil } = OHIF.utils;\n\n// Contexts\nimport AppContext from '../context/AppContext';\n\nfunction StudyListRouting({ match: routeMatch, location: routeLocation }) {\n  const {\n    project,\n    location,\n    dataset,\n    dicomStore,\n    studyInstanceUIDs,\n    seriesInstanceUIDs,\n  } = routeMatch.params;\n  const server = useServer({ project, location, dataset, dicomStore });\n  const { appConfig = {} } = useContext(AppContext);\n\n  const filters = UrlUtil.queryString.getQueryFilters(routeLocation);\n\n  let studyListFunctionsEnabled = false;\n  if (appConfig.studyListFunctionsEnabled) {\n    studyListFunctionsEnabled = appConfig.studyListFunctionsEnabled;\n  }\n  return (\n    <ConnectedStudyList\n      filters={filters}\n      studyListFunctionsEnabled={studyListFunctionsEnabled}\n    />\n  );\n}\n\nStudyListRouting.propTypes = {\n  location: PropTypes.shape({\n    search: PropTypes.string,\n  }).isRequired,\n};\n\nexport default withRouter(StudyListRouting);\n","class GoogleCloudApi {\n  setAccessToken(accessToken) {\n    if (!accessToken) console.error('Access token is empty');\n    this.accessToken = accessToken;\n  }\n\n  get fetchConfig() {\n    if (!this.accessToken) throw new Error('OIDC access_token is not set');\n    return {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + this.accessToken,\n      },\n    };\n  }\n\n  get urlBase() {\n    return this.healthcareApiEndpoint || 'https://healthcare.googleapis.com/v1beta1';\n  }\n\n  set urlBase(url) {\n    this.healthcareApiEndpoint = url;\n  }\n\n  get urlBaseProject() {\n    return this.urlBase + `/projects`;\n  }\n\n  getUrlBaseDicomWeb(project, location, dataset, dicomStore) {\n    return (\n      this.urlBase +\n      `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}/dicomWeb`\n    );\n  }\n\n  getUrlPath(project, location, dataset, dicomStore) {\n    `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}`;\n  }\n\n  async doRequest(urlStr, config = {}, params = {}) {\n    const url = new URL(urlStr);\n    let data = null;\n    url.search = new URLSearchParams(params);\n\n    try {\n      const response = await fetch(url, { ...this.fetchConfig, config });\n      try {\n        data = await response.json();\n      } catch (err) {}\n      if (response.status >= 200 && response.status < 300 && data != null) {\n        if (data.nextPageToken != null) {\n          params.pageToken = data.nextPageToken;\n          let subPage = await this.doRequest(urlStr, config, params);\n          for (let key in data) {\n            if (data.hasOwnProperty(key)) {\n              data[key] = data[key].concat(subPage.data[key]);\n            }\n          }\n        }\n        return {\n          isError: false,\n          status: response.status,\n          data,\n        };\n      } else {\n        return {\n          isError: true,\n          status: response.status,\n          message:\n            (data && data.error && data.error.message) || 'Unknown error',\n        };\n      }\n    } catch (err) {\n      if (data && data.error) {\n        return {\n          isError: true,\n          status: err.status,\n          message: err.response.data.error.message || 'Unspecified error',\n        };\n      }\n      return {\n        isError: true,\n        message: (err && err.message) || 'Oops! Something went wrong',\n      };\n    }\n  }\n\n  async loadProjects() {\n    return this.doRequest(\n      'https://cloudresourcemanager.googleapis.com/v1/projects'\n    );\n  }\n\n  async loadLocations(projectId) {\n    return this.doRequest(`${this.urlBaseProject}/${projectId}/locations`);\n  }\n\n  async loadDatasets(projectId, locationId) {\n    return this.doRequest(\n      `${this.urlBaseProject}/${projectId}/locations/${locationId}/datasets`\n    );\n  }\n\n  async loadDicomStores(dataset) {\n    return this.doRequest(`${this.urlBase}/${dataset}/dicomStores`);\n  }\n}\n\nexport default new GoogleCloudApi();\n","import React, { useEffect, useRef } from 'react';\nexport default function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","const getServers = (data, name) => {\n  const {\n    wadoUriRoot,\n    qidoRoot,\n    wadoRoot,\n    dataset = '',\n    dicomStore = '',\n    location = '',\n    project = '',\n  } = data;\n\n  return [\n    {\n      name: name,\n      dataset,\n      dicomStore,\n      location,\n      project,\n      imageRendering: 'wadors',\n      thumbnailRendering: 'wadors',\n      type: 'dicomWeb',\n      active: true,\n      wadoUriRoot,\n      qidoRoot,\n      wadoRoot,\n      supportsFuzzyMatching: false,\n      qidoSupportsIncludeField: false,\n    },\n  ];\n};\n\nconst isValidServer = server => {\n  return (\n    server &&\n    !!server.dataset &&\n    !!server.dicomStore &&\n    !!server.location &&\n    !!server.project\n  );\n};\n\nconst isEqualServer = (server = {}, toCompare = {}) => {\n  const serverLength = Object.keys(server).length;\n  const toCompareLength = Object.keys(toCompare).length;\n\n  if (!serverLength || !toCompareLength) {\n    return false;\n  }\n\n  return (\n    server.dataset === toCompare.dataset &&\n    server.dataset === toCompare.dataset &&\n    server.dicomStore === toCompare.dicomStore &&\n    server.location === toCompare.location &&\n    server.project === toCompare.project\n  );\n};\n\nexport { getServers, isValidServer, isEqualServer };\n","import React, { useContext } from 'react';\nimport GoogleCloudApi from '../googleCloud/api/GoogleCloudApi';\nimport usePrevious from './usePrevious';\n\nimport * as GoogleCloudUtilServers from '../googleCloud/utils/getServers';\nimport { useSelector, useDispatch } from 'react-redux';\nimport isEqual from 'lodash.isequal';\n\n// Contexts\nimport AppContext from '../context/AppContext';\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n\n  return servers && servers.servers && servers.servers.find(isActive);\n};\n\nconst getServers = (appConfig, project, location, dataset, dicomStore) => {\n  let servers = [];\n  if (appConfig.enableGoogleCloudAdapter) {\n    GoogleCloudApi.urlBase = appConfig.healthcareApiEndpoint;\n    const pathUrl = GoogleCloudApi.getUrlBaseDicomWeb(\n      project,\n      location,\n      dataset,\n      dicomStore\n    );\n    const data = {\n      project,\n      location,\n      dataset,\n      dicomStore,\n      wadoUriRoot: pathUrl,\n      qidoRoot: pathUrl,\n      wadoRoot: pathUrl,\n    };\n    servers = GoogleCloudUtilServers.getServers(data, dicomStore);\n    if (!isValidServer(servers[0], appConfig)) {\n      return;\n    }\n  }\n\n  return servers;\n};\n\nconst isValidServer = (server, appConfig) => {\n  if (appConfig.enableGoogleCloudAdapter) {\n    return GoogleCloudUtilServers.isValidServer(server);\n  }\n\n  return !!server;\n};\n\nconst setServers = (dispatch, servers) => {\n  const action = {\n    type: 'SET_SERVERS',\n    servers,\n  };\n  dispatch(action);\n};\n\nconst useServerFromUrl = (\n  servers = [],\n  previousServers,\n  activeServer,\n  urlBasedServers,\n  appConfig,\n  project,\n  location,\n  dataset,\n  dicomStore\n) => {\n  // update state from url available only when gcloud on\n  if (!appConfig.enableGoogleCloudAdapter) {\n    return false;\n  }\n\n  const serverHasChanged = previousServers !== servers && previousServers;\n\n  // do not update from url. use state instead.\n  if (serverHasChanged) {\n    return false;\n  }\n\n  // if no valid urlbased servers\n  if (!urlBasedServers || !urlBasedServers.length) {\n    return false;\n  } else if (!servers.length || !activeServer) {\n    // no current valid server\n    return true;\n  }\n\n  const newServer = urlBasedServers[0];\n\n  let exists = servers.some(\n    GoogleCloudUtilServers.isEqualServer.bind(undefined, newServer)\n  );\n\n  return !exists;\n};\n\nexport default function useServer({\n  project,\n  location,\n  dataset,\n  dicomStore,\n} = {}) {\n  // Hooks\n  const servers = useSelector(state => state && state.servers);\n  const previousServers = usePrevious(servers);\n  const dispatch = useDispatch();\n\n  const { appConfig = {} } = useContext(AppContext);\n\n  const activeServer = getActiveServer(servers);\n  const urlBasedServers =\n    getServers(appConfig, project, location, dataset, dicomStore) || [];\n  const shouldUpdateServer = useServerFromUrl(\n    servers.servers,\n    previousServers,\n    activeServer,\n    urlBasedServers,\n    appConfig,\n    project,\n    location,\n    dataset,\n    dicomStore\n  );\n\n  if (shouldUpdateServer) {\n    setServers(dispatch, urlBasedServers);\n  } else if (isValidServer(activeServer, appConfig)) {\n    return activeServer;\n  }\n}\n","export default class FileLoader {\n  fileType;\n  loadFile(file, imageId) { }\n  getDataset(image, imageId) { }\n  getStudies(dataset, imageId) { }\n}\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\n\nconst PDFFileLoader = new (class extends FileLoader {\n  fileType = 'application/pdf';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    const dataset = {};\n    dataset.imageId = image.imageId || imageId;\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getDefaultStudy(imageId);\n  }\n\n  getDefaultStudy(imageId) {\n    const study = {\n      StudyInstanceUID: '',\n      StudyDate: '',\n      StudyTime: '',\n      AccessionNumber: '',\n      ReferringPhysicianName: '',\n      PatientName: '',\n      PatientID: '',\n      PatientBirthdate: '',\n      PatientSex: '',\n      StudyId: '',\n      StudyDescription: '',\n      series: [\n        {\n          SeriesInstanceUID: '',\n          SeriesDescription: '',\n          SeriesNumber: '',\n          instances: [\n            {\n              metadata: {\n                SOPInstanceUID: '',\n                SOPClassUID: '1.2.840.10008.5.1.4.1.1.104.1',\n                Rows: '',\n                Columns: '',\n                NumberOfFrames: 0,\n                InstanceNumber: 1,\n              },\n              getImageId: () => imageId,\n              isLocalFile: true,\n            },\n          ],\n        },\n      ],\n    };\n\n    return study;\n  }\n})();\n\nexport default PDFFileLoader;\n","import dcmjs from 'dcmjs';\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport OHIF from '@ohif/core';\n\nconst metadataProvider = OHIF.cornerstone.metadataProvider;\n\nconst DICOMFileLoader = new (class extends FileLoader {\n  fileType = 'application/dicom';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    let dataset = {};\n    try {\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\n\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      metadataProvider.addInstance(dataset);\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n    } catch (e) {\n      console.error('Error reading dicom file', e);\n    }\n    // Set imageId on dataset to be consumed later on\n    dataset.imageId = imageId;\n\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getStudyFromDataset(dataset);\n  }\n\n  getStudyFromDataset(dataset = {}) {\n    const {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      SeriesInstanceUID,\n      SeriesDescription,\n      SeriesNumber,\n      imageId,\n    } = dataset;\n\n    const instance = {\n      metadata: dataset,\n      url: imageId,\n    };\n\n    const series = {\n      SeriesInstanceUID: SeriesInstanceUID,\n      SeriesDescription: SeriesDescription,\n      SeriesNumber: SeriesNumber,\n      instances: [instance],\n    };\n\n    const study = {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      /*\n      TODO: in case necessary to uncomment this block, double check every property\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\n      Modality: Modality || DICOMWeb.getString(dataset['00080060']),\n      ModalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\n      modalities:\n      */\n      series: [series],\n    };\n\n    return study;\n  }\n})();\n\nexport default DICOMFileLoader;\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport PDFFileLoader from './pdfFileLoader';\nimport DICOMFileLoader from './dicomFileLoader';\n\nclass FileLoaderService extends FileLoader {\n  fileType;\n  loader;\n  constructor(file) {\n    super();\n    const fileType = file && file.type;\n    this.loader = this.getLoader(fileType);\n    this.fileType = this.loader.fileType;\n  }\n\n  static groupSeries(studies) {\n    const groupBy = (list, groupByKey, listKey) => {\n      let nonKeyCounter = 1;\n\n      return list.reduce((acc, obj) => {\n        let key = obj[groupByKey];\n        const list = obj[listKey];\n\n        // in case key not found, group it using counter\n        key = !!key ? key : '' + nonKeyCounter++;\n\n        if (!acc[key]) {\n          acc[key] = { ...obj };\n          acc[key][listKey] = [];\n        }\n\n        acc[key][listKey].push(...list);\n\n        return acc;\n      }, {});\n    };\n\n    const studiesGrouped = Object.values(\n      groupBy(studies, 'StudyInstanceUID', 'series')\n    );\n\n    const result = studiesGrouped.map(studyGroup => {\n      const seriesGrouped = groupBy(\n        studyGroup.series,\n        'SeriesInstanceUID',\n        'instances'\n      );\n      studyGroup.series = Object.values(seriesGrouped);\n\n      return studyGroup;\n    });\n\n    return result;\n  }\n\n  addFile(file) {\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\n  }\n\n  loadFile(file, imageId) {\n    return this.loader.loadFile(file, imageId);\n  }\n\n  getDataset(image, imageId) {\n    return this.loader.getDataset(image, imageId);\n  }\n\n  getStudies(dataset, imageId) {\n    return this.loader.getStudies(dataset, imageId);\n  }\n\n  getLoader(fileType) {\n    if (fileType === 'application/pdf') {\n      return PDFFileLoader;\n    } else {\n      // Default to dicom loader\n      return DICOMFileLoader;\n    }\n  }\n}\n\nexport default FileLoaderService;\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\n\nconst processFile = async file => {\n  try {\n    const fileLoaderService = new FileLoaderService(file);\n    const imageId = fileLoaderService.addFile(file);\n    const image = await fileLoaderService.loadFile(file, imageId);\n    const dataset = await fileLoaderService.getDataset(image, imageId);\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\n\n    return studies;\n  } catch (error) {\n    console.log(\n      error.name,\n      ':Error when trying to load and process local files:',\n      error.message\n    );\n  }\n};\n\nexport default async function filesToStudies(files) {\n  const processFilesPromises = files.map(processFile);\n  const studies = await Promise.all(processFilesPromises);\n\n  return FileLoaderService.groupSeries(studies.flat());\n}\n"],"sourceRoot":""}