{"version":3,"sources":["webpack:///./connectedComponents/ViewerLocalFileData.js","webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js"],"names":["OHIFStudyMetadata","metadata","studyMetadataManager","utils","dropZoneLinkDialog","onDrop","i18n","dir","noDrag","getRootProps","getInputProps","className","webkitdirectory","mozdirectory","ViewerLocalFileData","studies","loading","error","purge","updatedStudies","map","study","studyMetadata","StudyInstanceUID","sopClassHandlerModules","extensionManager","modules","displaySets","createDisplaySets","forEachDisplaySet","displayset","localFile","add","setState","acceptedFiles","filesToStudies","updateStudies","this","state","JSON","stringify","noClick","style","width","height","studyInstanceUIDs","a","props","t","linksDialogMessage","Component","PropTypes","array","withTranslation","scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","_onDerivedDisplaySetsLoadedAndCached","updateButtonGroups","panelModules","MODULE_TYPES","PANEL","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","activeViewport","menuOptionEntry","value","target","icon","bottomLabel","label","unshift","document","addEventListener","removeEventListener","prevProps","activeContextsChanged","prevStudies","prevActiveViewport","shouldUpdate","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","_getCustomButtonComponent","CustomComponent","activeButtonsIds","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","any","modal","withModal","withDialog","withAppContext","setActiveViewportSpecificData","ConnectedStudyBrowser","stackLoadingProgressMap","progress","studiesWithLoadingData","thumbnails","displaySetInstanceUID","stackId","stackProgressData","stackPercentComplete","percentComplete","onThumbnailClick","displaySet","isArray","reduce","all","current","currentDisplaySet","concat","ds","findDisplaySetByUID","isDerived","Modality","servicesManager","services","LoggerService","UINotificationService","getSourceDisplaySet","message","show","autoClose","referencedDisplaySet","activatedLabelmapPromise","then","activatedLabelmapIndex","selectionFired","CustomEvent","dispatchEvent","Error","StudyBrowser","ViewportPane","children","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","collect","highlighted","hovered","classNames","ref","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","logger","useLogger","useEffect","ViewportPanes","React","useMemo","pluginName","ViewportComponent","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","isOpen","fromSideClass","styles","maxWidth","marginRight","Number","parseInt","UIModalService","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","Viewer","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","_getActiveViewport","dismissAll","timepointApi","measurementApi","currentTimepointId","activeDisplaySetInstanceUID","undefined","_mapStudiesToThumbnails","prevActiveDisplaySetInstanceUID","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","linkPath","createLogoComponentFn","isDerivedDisplaySetsLoaded","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","getActiveViewport","shape","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","_checkForSeriesInconsistencesWarnings","inconsistencyWarnings","reconstructionIssues","warning","ReconstructionIssues","DATASET_4D","VARYING_IMAGESDIMENSIONS","VARYING_IMAGESCOMPONENTS","VARYING_IMAGESORIENTATION","IRREGULAR_SPACING","MULTIFFRAMES","missingFrames","warn","segMetadata","image","groupsLen","PerFrameFunctionalGroups","PerFrameFunctionalGroupsSequence","SourceImageSequence","DerivationImageSequence","ReferencedSOPInstanceUID","imageId","sopCommonModule","cornerstone","metaData","get","sopInstanceUID","sourceImageMetadata","Rows","Columns","altImageText","imageIndex","Math","floor","hasWarnings","_isDisplaySetActive","setTimepoints","setMeasurements","getActiveServer","servers","ConnectedViewer","FileLoader","file","dataset","PDFFileLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","StudyTime","AccessionNumber","ReferringPhysicianName","PatientName","PatientBirthdate","PatientSex","StudyId","StudyDescription","SeriesInstanceUID","instances","SOPInstanceUID","SOPClassUID","NumberOfFrames","isLocalFile","metadataProvider","DICOMFileLoader","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","addInstance","_meta","namifyDataset","meta","e","console","getStudyFromDataset","PatientBirthDate","StudyID","instance","url","FileLoaderService","fileType","loader","getLoader","groupBy","list","groupByKey","listKey","nonKeyCounter","acc","obj","studyGroup","seriesGrouped","fileManager","loadFile","getDataset","getStudies","processFile","fileLoaderService","addFile","files","processFilesPromises","groupSeries","flat"],"mappings":"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","file":"ViewerLocalFileData.bundle.9d0ebc24779a9fd02142.js","sourcesContent":["import React, { Component } from 'react';\nimport { metadata, utils } from '@ohif/core';\n\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from './../App.js';\nimport Dropzone from 'react-dropzone';\nimport filesToStudies from '../lib/filesToStudies';\nimport './ViewerLocalFileData.css';\nimport { withTranslation } from 'react-i18next';\n\nconst { OHIFStudyMetadata } = metadata;\nconst { studyMetadataManager } = utils;\n\nconst dropZoneLinkDialog = (onDrop, i18n, dir) => {\n  return (\n    <Dropzone onDrop={onDrop} noDrag>\n      {({ getRootProps, getInputProps }) => (\n        <span {...getRootProps()} className=\"link-dialog\">\n          {dir ? (\n            <span>\n              {i18n('Load folders')}\n              <input\n                {...getInputProps()}\n                webkitdirectory=\"true\"\n                mozdirectory=\"true\"\n              />\n            </span>\n          ) : (\n            <span>\n              {i18n('Load files')}\n              <input {...getInputProps()} />\n            </span>\n          )}\n        </span>\n      )}\n    </Dropzone>\n  );\n};\n\nconst linksDialogMessage = (onDrop, i18n) => {\n  return (\n    <>\n      {i18n('Or click to ')}\n      {dropZoneLinkDialog(onDrop, i18n)}\n      {i18n(' or ')}\n      {dropZoneLinkDialog(onDrop, i18n, true)}\n      {i18n(' from dialog')}\n    </>\n  );\n};\n\nclass ViewerLocalFileData extends Component {\n  static propTypes = {\n    studies: PropTypes.array,\n  };\n\n  state = {\n    studies: null,\n    loading: false,\n    error: null,\n  };\n\n  updateStudies = studies => {\n    // Render the viewer when the data is ready\n    studyMetadataManager.purge();\n\n    // Map studies to new format, update metadata manager?\n    const updatedStudies = studies.map(study => {\n      const studyMetadata = new OHIFStudyMetadata(\n        study,\n        study.StudyInstanceUID\n      );\n      const sopClassHandlerModules =\n        extensionManager.modules['sopClassHandlerModule'];\n\n      study.displaySets =\n        study.displaySets ||\n        studyMetadata.createDisplaySets(sopClassHandlerModules);\n\n      studyMetadata.forEachDisplaySet(displayset => {\n        displayset.localFile = true;\n      });\n\n      studyMetadataManager.add(studyMetadata);\n\n      return study;\n    });\n\n    this.setState({\n      studies: updatedStudies,\n    });\n  };\n\n  render() {\n    const onDrop = async acceptedFiles => {\n      this.setState({ loading: true });\n\n      const studies = await filesToStudies(acceptedFiles);\n      const updatedStudies = this.updateStudies(studies);\n\n      if (!updatedStudies) {\n        return;\n      }\n\n      this.setState({ studies: updatedStudies, loading: false });\n    };\n\n    if (this.state.error) {\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\n    }\n\n    return (\n      <Dropzone onDrop={onDrop} noClick>\n        {({ getRootProps, getInputProps }) => (\n          <div {...getRootProps()} style={{ width: '100%', height: '100%' }}>\n            {this.state.studies ? (\n              <ConnectedViewer\n                studies={this.state.studies}\n                studyInstanceUIDs={\n                  this.state.studies &&\n                  this.state.studies.map(a => a.StudyInstanceUID)\n                }\n              />\n            ) : (\n              <div className={'drag-drop-instructions'}>\n                <div className={'drag-drop-contents'}>\n                  {this.state.loading ? (\n                    <h3>{this.props.t('Loading...')}</h3>\n                  ) : (\n                    <>\n                      <h3>\n                        {this.props.t(\n                          'Drag and Drop DICOM files here to load them in the Viewer'\n                        )}\n                      </h3>\n                      <h4>{linksDialogMessage(onDrop, this.props.t)}</h4>\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nexport default withTranslation('Common')(ViewerLocalFileData);\n","import { connect } from 'react-redux';\nimport { CineDialog } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport csTools from 'cornerstone-tools';\nimport { commandsManager } from './../App.js';\n// Our target output kills the `as` and \"import\" throws a keyword error\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst toolImport = csTools.import;\nconst scrollToIndex = toolImport('util/scrollToIndex');\nconst { setViewportSpecificData } = OHIF.redux.actions;\n\n// Why do I need or care about any of this info?\n// A dispatch action should be able to pull this at the time of an event?\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\nconst mapStateToProps = state => {\n  // Get activeViewport's `cine` and `stack`\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\n\n  const cineData = cine || {\n    isPlaying: false,\n    cineFrameRate: 24,\n  };\n\n  // New props we're creating?\n  return {\n    activeEnabledElement: dom,\n    activeViewportCineData: cineData,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  const {\n    activeEnabledElement,\n    activeViewportCineData,\n    activeViewportIndex,\n  } = propsFromState;\n\n  return {\n    cineFrameRate: activeViewportCineData.cineFrameRate,\n    isPlaying: activeViewportCineData.isPlaying,\n    onPlayPauseChanged: isPlaying => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.isPlaying = !cine.isPlaying;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onFrameRateChanged: frameRate => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.cineFrameRate = frameRate;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onClickNextButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\n      if (currentImageIdIndex >= imageIds.length - 1) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\n    },\n    onClickBackButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex } = stackData.data[0];\n      if (currentImageIdIndex === 0) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\n    },\n    onClickSkipToStart: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      scrollToIndex(activeEnabledElement, 0);\n    },\n    onClickSkipToEnd: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const lastIndex = stackData.data[0].imageIds.length - 1;\n      scrollToIndex(activeEnabledElement, lastIndex);\n    },\n  };\n};\n\nconst ConnectedCineDialog = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(CineDialog);\n\nexport default ConnectedCineDialog;\n","import { LayoutButton } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\n\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  return {\n    currentLayout: state.viewports.layout,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // TODO: Change if layout switched becomes more complex\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\n      const viewports = [];\n      const numRows = selectedCell.row + 1;\n      const numColumns = selectedCell.col + 1;\n      const numViewports = numRows * numColumns;\n\n      for (let i = 0; i < numViewports; i++) {\n        // Hacky way to allow users to exit MPR \"mode\"\n        const viewport = currentLayout.viewports[i];\n        let plugin = viewport && viewport.plugin;\n        if (viewport && viewport.vtk) {\n          plugin = 'cornerstone';\n        }\n\n        viewports.push({\n          plugin,\n        });\n      }\n      const layout = {\n        numRows,\n        numColumns,\n        viewports,\n      };\n\n      const maxActiveIndex = numViewports - 1;\n      if (activeViewportIndex > maxActiveIndex) {\n        dispatch(setViewportActive(0));\n      }\n\n      dispatch(setLayout(layout));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch) => {\n  const onChangeFromDispatch = propsFromDispatch.onChange;\n  const { currentLayout, activeViewportIndex } = propsFromState;\n\n  return {\n    onChange: selectedCell =>\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\n  };\n};\n\nconst ConnectedLayoutButton = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(LayoutButton);\n\nexport default ConnectedLayoutButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\n\nimport { MODULE_TYPES } from '@ohif/core';\nimport {\n  ExpandableToolMenu,\n  RoundedButtonGroup,\n  ToolbarButton,\n  withModal,\n  withDialog,\n} from '@ohif/ui';\n\nimport './ToolbarRow.css';\nimport { commandsManager, extensionManager } from './../App.js';\n\nimport ConnectedCineDialog from './ConnectedCineDialog';\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\nimport { withAppContext } from '../context/AppContext';\n\nclass ToolbarRow extends Component {\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\n  // closed if selected is null/undefined\n  static propTypes = {\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\n    selectedLeftSidePanel: PropTypes.string.isRequired,\n    selectedRightSidePanel: PropTypes.string.isRequired,\n    handleSidePanelChange: PropTypes.func.isRequired,\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\n    studies: PropTypes.array,\n    t: PropTypes.func.isRequired,\n    // NOTE: withDialog, withModal HOCs\n    dialog: PropTypes.any,\n    modal: PropTypes.any,\n  };\n\n  static defaultProps = {\n    studies: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\n    // TODO:\n    // If it's a tool that can be active... Mark it as active?\n    // - Tools that are on/off?\n    // - Tools that can be bound to multiple buttons?\n\n    // Normal ToolbarButtons...\n    // Just how high do we need to hoist this state?\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\n    this.state = {\n      toolbarButtons: toolbarButtonDefinitions,\n      activeButtons: [],\n    };\n\n    this.seriesPerStudyCount = [];\n\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\n    this._onDerivedDisplaySetsLoadedAndCached = this._onDerivedDisplaySetsLoadedAndCached.bind(\n      this\n    );\n\n    this.updateButtonGroups();\n  }\n\n  updateButtonGroups() {\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    this.buttonGroups = {\n      left: [],\n      right: [],\n    };\n\n    // ~ FIND MENU OPTIONS\n    panelModules.forEach(panelExtension => {\n      const panelModule = panelExtension.module;\n      const defaultContexts = Array.from(panelModule.defaultContext);\n\n      panelModule.menuOptions.forEach(menuOption => {\n        const contexts = Array.from(menuOption.context || defaultContexts);\n        const hasActiveContext = this.props.activeContexts.some(actx =>\n          contexts.includes(actx)\n        );\n\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\n        // Note: This does not cleanly handle `studies` prop updating with panel open\n        const isDisabled =\n          typeof menuOption.isDisabled === 'function' &&\n          menuOption.isDisabled(this.props.studies, this.props.activeViewport);\n\n        if (hasActiveContext && !isDisabled) {\n          const menuOptionEntry = {\n            value: menuOption.target,\n            icon: menuOption.icon,\n            bottomLabel: menuOption.label,\n          };\n          const from = menuOption.from || 'right';\n\n          this.buttonGroups[from].push(menuOptionEntry);\n        }\n      });\n    });\n\n    // TODO: This should come from extensions, instead of being baked in\n    this.buttonGroups.left.unshift({\n      value: 'studies',\n      icon: 'th-large',\n      bottomLabel: this.props.t('Series'),\n    });\n  }\n\n  componentDidMount() {\n    /*\n     * TODO: Improve the way we notify parts of the app\n     * that depends on derived display sets to be loaded.\n     * (Implement pubsub for better tracking of derived display sets)\n     */\n    document.addEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  _onDerivedDisplaySetsLoadedAndCached() {\n    this.updateButtonGroups();\n    this.setState({\n      toolbarButtons: _getVisibleToolbarButtons.call(this),\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const activeContextsChanged =\n      prevProps.activeContexts !== this.props.activeContexts;\n\n    const prevStudies = prevProps.studies;\n    const prevActiveViewport = prevProps.activeViewport;\n    const activeViewport = this.props.activeViewport;\n    const studies = this.props.studies;\n    const seriesPerStudyCount = this.seriesPerStudyCount;\n\n    let shouldUpdate = false;\n\n    if (\n      prevStudies.length !== studies.length ||\n      prevActiveViewport !== activeViewport\n    ) {\n      shouldUpdate = true;\n    } else {\n      for (let i = 0; i < studies.length; i++) {\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\n          seriesPerStudyCount[i] = studies[i].series.length;\n\n          shouldUpdate = true;\n          break;\n        }\n      }\n    }\n\n    if (shouldUpdate) {\n      this.updateButtonGroups();\n    }\n\n    if (activeContextsChanged) {\n      this.setState(\n        {\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\n        },\n        this.closeCineDialogIfNotApplicable\n      );\n    }\n  }\n\n  closeCineDialogIfNotApplicable = () => {\n    const { dialog } = this.props;\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\n    if (dialogId) {\n      const cineButtonPresent = toolbarButtons.find(\n        button => button.options && button.options.behavior === 'CINE'\n      );\n      if (!cineButtonPresent) {\n        dialog.dismiss({ id: dialogId });\n        activeButtons = activeButtons.filter(\n          button => button.options && button.options.behavior !== 'CINE'\n        );\n        this.setState({ dialogId: null, activeButtons });\n      }\n    }\n  };\n\n  render() {\n    const buttonComponents = _getButtonComponents.call(\n      this,\n      this.state.toolbarButtons,\n      this.state.activeButtons\n    );\n\n    const onPress = (side, value) => {\n      this.props.handleSidePanelChange(side, value);\n    };\n    const onPressLeft = onPress.bind(this, 'left');\n    const onPressRight = onPress.bind(this, 'right');\n\n    return (\n      <>\n        <div className=\"ToolbarRow\">\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\n            <RoundedButtonGroup\n              options={this.buttonGroups.left}\n              value={this.props.selectedLeftSidePanel || ''}\n              onValueChanged={onPressLeft}\n            />\n          </div>\n          {buttonComponents}\n          <ConnectedLayoutButton />\n          <div\n            className=\"pull-right m-t-1 rm-x-1\"\n            style={{ marginLeft: 'auto' }}\n          >\n            {this.buttonGroups.right.length && (\n              <RoundedButtonGroup\n                options={this.buttonGroups.right}\n                value={this.props.selectedRightSidePanel || ''}\n                onValueChanged={onPressRight}\n              />\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction _getCustomButtonComponent(button, activeButtons) {\n  const CustomComponent = button.CustomComponent;\n  const isValidComponent = typeof CustomComponent === 'function';\n\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\n  if (isValidComponent) {\n    const parentContext = this;\n    const activeButtonsIds = activeButtons.map(button => button.id);\n    const isActive = activeButtonsIds.includes(button.id);\n\n    return (\n      <CustomComponent\n        parentContext={parentContext}\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\n        button={button}\n        key={button.id}\n        activeButtons={activeButtonsIds}\n        isActive={isActive}\n      />\n    );\n  }\n}\n\nfunction _getExpandableButtonComponent(button, activeButtons) {\n  // Iterate over button definitions and update `onClick` behavior\n  let activeCommand;\n  const childButtons = button.buttons.map(childButton => {\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\n\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\n      activeCommand = childButton.id;\n    }\n\n    return childButton;\n  });\n\n  return (\n    <ExpandableToolMenu\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      buttons={childButtons}\n      activeCommand={activeCommand}\n    />\n  );\n}\n\nfunction _getDefaultButtonComponent(button, activeButtons) {\n  return (\n    <ToolbarButton\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      onClick={_handleToolbarButtonClick.bind(this, button)}\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\n    />\n  );\n}\n/**\n * Determine which extension buttons should be showing, if they're\n * active, and what their onClick behavior should be.\n */\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\n  const _this = this;\n  return toolbarButtons.map(button => {\n    const hasCustomComponent = button.CustomComponent;\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\n\n    if (hasCustomComponent) {\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\n    }\n\n    if (hasNestedButtonDefinitions) {\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\n    }\n\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\n  });\n}\n\n/**\n * TODO: DEPRECATE\n * This is used exclusively in `extensions/cornerstone/src`\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\n *\n * A handy way for us to handle different button types. IE. firing commands for\n * buttons, or initiation built in behavior.\n *\n * @param {*} button\n * @param {*} evt\n * @param {*} props\n */\nfunction _handleToolbarButtonClick(button, evt, props) {\n  const { activeButtons } = this.state;\n\n  if (button.commandName) {\n    const options = Object.assign({ evt }, button.commandOptions);\n    commandsManager.runCommand(button.commandName, options);\n  }\n\n  // TODO: Use Types ENUM\n  // TODO: We can update this to be a `getter` on the extension to query\n  //       For the active tools after we apply our updates?\n  if (button.type === 'setToolActive') {\n    const toggables = activeButtons.filter(\n      ({ options }) => options && !options.togglable\n    );\n    this.setState({ activeButtons: [...toggables, button] });\n  } else if (button.type === 'builtIn') {\n    this._handleBuiltIn(button);\n  }\n}\n\n/**\n *\n */\nfunction _getVisibleToolbarButtons() {\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\n  const toolbarButtonDefinitions = [];\n\n  toolbarModules.forEach(extension => {\n    const { definitions, defaultContext } = extension.module;\n    definitions.forEach(definition => {\n      const context = definition.context || defaultContext;\n\n      if (this.props.activeContexts.includes(context)) {\n        toolbarButtonDefinitions.push(definition);\n      }\n    });\n  });\n\n  return toolbarButtonDefinitions;\n}\n\nfunction _handleBuiltIn(button) {\n  /* TODO: Keep cine button active until its unselected. */\n  const { dialog, t } = this.props;\n  const { dialogId } = this.state;\n  const { id, options } = button;\n\n  if (options.behavior === 'CINE') {\n    if (dialogId) {\n      dialog.dismiss({ id: dialogId });\n      this.setState(state => ({\n        dialogId: null,\n        activeButtons: [\n          ...state.activeButtons.filter(button => button.id !== id),\n        ],\n      }));\n    } else {\n      const spacing = 20;\n      const { x, y } = document\n        .querySelector(`.ViewerMain`)\n        .getBoundingClientRect();\n      const newDialogId = dialog.create({\n        content: ConnectedCineDialog,\n        defaultPosition: {\n          x: x + spacing || 0,\n          y: y + spacing || 0,\n        },\n      });\n      this.setState(state => ({\n        dialogId: newDialogId,\n        activeButtons: [...state.activeButtons, button],\n      }));\n    }\n  }\n\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\n    commandsManager.runCommand('showDownloadViewportModal', {\n      title: t('Download High Quality Image'),\n    });\n  }\n}\n\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\n  withModal(withDialog(withAppContext(ToolbarRow)))\n);\n","import OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { StudyBrowser } from '@ohif/ui';\nimport cloneDeep from 'lodash.clonedeep';\nimport findDisplaySetByUID from './findDisplaySetByUID';\nimport { servicesManager } from './../App.js';\n\nconst { studyMetadataManager } = OHIF.utils;\n\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\n\n// TODO\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\n// - Pass in errors and stack loading progress from Redux\nconst mapStateToProps = (state, ownProps) => {\n  // If we know that the stack loading progress details have changed,\n  // we can try to update the component state so that the thumbnail\n  // progress bar is updated\n  const stackLoadingProgressMap = state.loading.progress;\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\n\n  studiesWithLoadingData.forEach(study => {\n    study.thumbnails.forEach(data => {\n      const { displaySetInstanceUID } = data;\n      const stackId = `StackProgress:${displaySetInstanceUID}`;\n      const stackProgressData = stackLoadingProgressMap[stackId];\n\n      let stackPercentComplete = 0;\n      if (stackProgressData) {\n        stackPercentComplete = stackProgressData.percentComplete;\n      }\n\n      data.stackPercentComplete = stackPercentComplete;\n    });\n  });\n\n  return {\n    studies: studiesWithLoadingData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onThumbnailClick: displaySetInstanceUID => {\n      let displaySet = findDisplaySetByUID(\n        ownProps.studyMetadata,\n        displaySetInstanceUID\n      );\n\n      if (displaySet.isDerived) {\n        const { Modality } = displaySet;\n        if (Modality === 'SEG' && servicesManager) {\n          const {LoggerService, UINotificationService} = servicesManager.services;\n          const onDisplaySetLoadFailureHandler = error => {\n            LoggerService.error({ error, message: error.message });\n            UINotificationService.show({\n              title: 'DICOM Segmentation Loader',\n              message: error.message,\n              type: 'error',\n              autoClose: true,\n            });\n          };\n\n          const {referencedDisplaySet, activatedLabelmapPromise} = displaySet.getSourceDisplaySet(\n            ownProps.studyMetadata,\n            true,\n            onDisplaySetLoadFailureHandler\n          );\n          displaySet = referencedDisplaySet;\n\n          activatedLabelmapPromise.then((activatedLabelmapIndex) => {\n            const selectionFired = new CustomEvent(\"extensiondicomsegmentationsegselected\", {\n              \"detail\": {\"activatedLabelmapIndex\":activatedLabelmapIndex}\n            });\n            document.dispatchEvent(selectionFired);\n          });\n\n        } else {\n          displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\n        }\n\n        if (!displaySet) {\n          throw new Error(\n            `Referenced series for ${Modality} dataset not present.`\n          );\n        }\n\n        if (!displaySet) {\n          throw new Error('Source data not present');\n        }\n      }\n\n      dispatch(setActiveViewportSpecificData(displaySet));\n    },\n  };\n};\n\nconst ConnectedStudyBrowser = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StudyBrowser);\n\nexport default ConnectedStudyBrowser;\n","/**\n * Finds displaySet by UID across all displaySets inside studyMetadata\n * @param {Array} studyMetadata\n * @param {string} displaySetInstanceUID\n */\nexport default function findDisplaySetByUID(\n  studyMetadata,\n  displaySetInstanceUID\n) {\n  if (!Array.isArray(studyMetadata)) return null;\n\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\n    let currentDisplaySet = [];\n    if (current && Array.isArray(current.displaySets)) {\n      currentDisplaySet = current.displaySets;\n    }\n    return all.concat(currentDisplaySet);\n  }, []);\n\n  const bySetInstanceUID = ds =>\n    ds.displaySetInstanceUID === displaySetInstanceUID;\n\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\n  return displaySet || null;\n}\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './ViewportPane.css';\n\nconst ViewportPane = function (props) {\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\n  const [{ hovered, highlighted }, drop] = useDrop({\n    accept: 'thumbnail',\n    drop: (droppedItem, monitor) => {\n      const canDrop = monitor.canDrop();\n      const isOver = monitor.isOver();\n\n      if (canDrop && isOver && onDrop) {\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\n\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\n      }\n    },\n    // Monitor, and collect props.\n    // Returned as values by `useDrop`\n    collect: monitor => ({\n      highlighted: monitor.canDrop(),\n      hovered: monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div\n      className={classNames(\n        'viewport-drop-target',\n        { hovered: hovered },\n        { highlighted: highlighted },\n        propClassName\n      )}\n      ref={drop}\n      data-cy={`viewport-container-${viewportIndex}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nViewportPane.propTypes = {\n  children: PropTypes.node.isRequired,\n  viewportIndex: PropTypes.number.isRequired,\n  onDrop: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default ViewportPane;\n","import './ViewportGrid.css';\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { utils } from '@ohif/core';\nimport { useSnackbarContext, useLogger } from '@ohif/ui';\n//\nimport ViewportPane from './ViewportPane.js';\nimport DefaultViewport from './DefaultViewport.js';\nimport EmptyViewport from './EmptyViewport.js';\n\nconst { loadAndCacheDerivedDisplaySets } = utils;\n\nconst ViewportGrid = function(props) {\n  const {\n    activeViewportIndex,\n    availablePlugins,\n    defaultPlugin: defaultPluginName,\n    layout,\n    numRows,\n    numColumns,\n    setViewportData,\n    studies,\n    viewportData,\n    children,\n    isStudyLoaded,\n  } = props;\n\n  const rowSize = 100 / numRows;\n  const colSize = 100 / numColumns;\n\n  // http://grid.malven.co/\n  if (!viewportData || !viewportData.length) {\n    return null;\n  }\n\n  const snackbar = useSnackbarContext();\n  const logger = useLogger();\n\n  useEffect(() => {\n    if (isStudyLoaded) {\n      viewportData.forEach(displaySet => {\n        loadAndCacheDerivedDisplaySets(displaySet, studies, logger, snackbar);\n      });\n    }\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\n\n  const getViewportPanes = () =>\n    layout.viewports.map((layout, viewportIndex) => {\n      const displaySet = viewportData[viewportIndex];\n\n      if (!displaySet) {\n        return null;\n      }\n\n      const data = {\n        displaySet,\n        studies,\n      };\n\n      // JAMES TODO:\n\n      // Use whichever plugin is currently in use in the panel\n      // unless nothing is specified. If nothing is specified\n      // and the display set has a plugin specified, use that.\n      //\n      // TODO: Change this logic to:\n      // - Plugins define how capable they are of displaying a SopClass\n      // - When updating a panel, ensure that the currently enabled plugin\n      // in the viewport is capable of rendering this display set. If not\n      // then use the most capable available plugin\n\n      const pluginName =\n        !layout.plugin && displaySet && displaySet.plugin\n          ? displaySet.plugin\n          : layout.plugin;\n\n      const ViewportComponent = _getViewportComponent(\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\n        viewportIndex,\n        children,\n        availablePlugins,\n        pluginName,\n        defaultPluginName\n      );\n\n      return (\n        <ViewportPane\n          onDrop={setViewportData}\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\n          className={classNames('viewport-container', {\n            active: activeViewportIndex === viewportIndex,\n          })}\n          key={viewportIndex}\n        >\n          {ViewportComponent}\n        </ViewportPane>\n      );\n    });\n\n  const ViewportPanes = React.useMemo(getViewportPanes, [\n    layout,\n    viewportData,\n    studies,\n    children,\n    availablePlugins,\n    defaultPluginName,\n    setViewportData,\n    activeViewportIndex,\n  ]);\n\n  return (\n    <div\n      data-cy=\"viewprt-grid\"\n      style={{\n        display: 'grid',\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\n        height: '100%',\n        width: '100%',\n      }}\n    >\n      {ViewportPanes}\n    </div>\n  );\n};\n\nViewportGrid.propTypes = {\n  viewportData: PropTypes.array.isRequired,\n  supportsDrop: PropTypes.bool.isRequired,\n  activeViewportIndex: PropTypes.number.isRequired,\n  layout: PropTypes.object.isRequired,\n  availablePlugins: PropTypes.object.isRequired,\n  setViewportData: PropTypes.func.isRequired,\n  studies: PropTypes.array,\n  children: PropTypes.node,\n  defaultPlugin: PropTypes.string,\n  numRows: PropTypes.number.isRequired,\n  numColumns: PropTypes.number.isRequired,\n};\n\nViewportGrid.defaultProps = {\n  viewportData: [],\n  numRows: 1,\n  numColumns: 1,\n  layout: {\n    viewports: [{}],\n  },\n  activeViewportIndex: 0,\n  supportsDrop: true,\n  availablePlugins: {\n    DefaultViewport,\n  },\n  defaultPlugin: 'defaultViewportPlugin',\n};\n\n/**\n *\n *\n * @param {*} plugin\n * @param {*} viewportData\n * @param {*} viewportIndex\n * @param {*} children\n * @returns\n */\nfunction _getViewportComponent(\n  viewportData,\n  viewportIndex,\n  children,\n  availablePlugins,\n  pluginName,\n  defaultPluginName\n) {\n  if (viewportData.displaySet) {\n    pluginName = pluginName || defaultPluginName;\n    const ViewportComponent = availablePlugins[pluginName];\n\n    if (!ViewportComponent) {\n      throw new Error(\n        `No Viewport Component available for name ${pluginName}.\n         Available plugins: ${JSON.stringify(availablePlugins)}`\n      );\n    }\n\n    return (\n      <ViewportComponent\n        viewportData={viewportData}\n        viewportIndex={viewportIndex}\n        children={[children]}\n      />\n    );\n  }\n\n  return <EmptyViewport />;\n}\n\nexport default ViewportGrid;\n","/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultViewport(props) {\n  return <div>{JSON.stringify(props)}</div>;\n}\n","import ViewportGrid from './ViewportGrid.js';\nimport { MODULE_TYPES } from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { extensionManager } from './../../App.js';\nimport memoize from 'lodash/memoize';\n\nconst getAvailableViewportModules = memoize(viewportModules => {\n  const availableViewportModules = {};\n  viewportModules.forEach(moduleDefinition => {\n    availableViewportModules[moduleDefinition.extensionId] =\n      moduleDefinition.module;\n  });\n  return availableViewportModules;\n});\n\nconst mapStateToProps = state => {\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\n\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\n  let defaultPlugin;\n  if (viewportModules.length) {\n    defaultPlugin = viewportModules[0].extensionId;\n  }\n\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\n\n  return {\n    numRows,\n    numColumns,\n    layout,\n    activeViewportIndex,\n    // TODO: rename `availableViewportModules`\n    availablePlugins: availableViewportModules,\n    // TODO: rename `defaultViewportModule`\n    defaultPlugin,\n  };\n};\n\nconst ConnectedViewportGrid = connect(\n  mapStateToProps,\n  null\n)(ViewportGrid);\n\nexport default ConnectedViewportGrid;\n","import './ViewerMain.css';\nimport { servicesManager } from './../App.js';\nimport { Component } from 'react';\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport memoize from 'lodash/memoize';\nimport _values from 'lodash/values';\n\nvar values = memoize(_values);\n\nclass ViewerMain extends Component {\n  static propTypes = {\n    activeViewportIndex: PropTypes.number.isRequired,\n    studies: PropTypes.array,\n    viewportSpecificData: PropTypes.object.isRequired,\n    layout: PropTypes.object.isRequired,\n    setViewportSpecificData: PropTypes.func.isRequired,\n    clearViewportSpecificData: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displaySets: [],\n    };\n  }\n\n  getDisplaySets(studies) {\n    const displaySets = [];\n    studies.forEach(study => {\n      study.displaySets.forEach(dSet => {\n        if (!dSet.plugin) {\n          dSet.plugin = 'cornerstone';\n        }\n        displaySets.push(dSet);\n      });\n    });\n\n    return displaySets;\n  }\n\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\n    const study = studies.find(study => {\n      return study.StudyInstanceUID === StudyInstanceUID;\n    });\n\n    if (!study) {\n      return;\n    }\n\n    return study.displaySets.find(displaySet => {\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\n    });\n  }\n\n  componentDidMount() {\n    // Add beforeUnload event handler to check for unsaved changes\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\n\n    // Get all the display sets for the viewer studies\n    if (this.props.studies) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevViewportAmount = prevProps.layout.viewports.length;\n    const viewportAmount = this.props.layout.viewports.length;\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\n\n    if (\n      this.props.studies !== prevProps.studies ||\n      (viewportAmount !== prevViewportAmount && !isVtk)\n    ) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  fillEmptyViewportPanes = () => {\n    // TODO: Here is the entry point for filling viewports on load.\n    const dirtyViewportPanes = [];\n    const { layout, viewportSpecificData } = this.props;\n    const { displaySets } = this.state;\n\n    if (!displaySets || !displaySets.length) {\n      return;\n    }\n\n    for (let i = 0; i < layout.viewports.length; i++) {\n      const viewportPane = viewportSpecificData[i];\n      const isNonEmptyViewport =\n        viewportPane &&\n        viewportPane.StudyInstanceUID &&\n        viewportPane.displaySetInstanceUID;\n\n      if (isNonEmptyViewport) {\n        dirtyViewportPanes.push({\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\n        });\n\n        continue;\n      }\n\n      const foundDisplaySet =\n        displaySets.find(\n          ds =>\n            !dirtyViewportPanes.some(\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\n            )\n        ) || displaySets[displaySets.length - 1];\n\n      dirtyViewportPanes.push(foundDisplaySet);\n    }\n\n    dirtyViewportPanes.forEach((vp, i) => {\n      if (vp && vp.StudyInstanceUID) {\n        this.setViewportData({\n          viewportIndex: i,\n          StudyInstanceUID: vp.StudyInstanceUID,\n          displaySetInstanceUID: vp.displaySetInstanceUID,\n        });\n      }\n    });\n  };\n\n  setViewportData = ({\n    viewportIndex,\n    StudyInstanceUID,\n    displaySetInstanceUID,\n  }) => {\n    let displaySet = this.findDisplaySet(\n      this.props.studies,\n      StudyInstanceUID,\n      displaySetInstanceUID\n    );\n\n    if (displaySet.isDerived) {\n      const { Modality } = displaySet;\n      if (Modality === 'SEG' && servicesManager) {\n        const {LoggerService, UINotificationService} = servicesManager.services;\n        const onDisplaySetLoadFailureHandler = error => {\n          LoggerService.error({ error, message: error.message });\n          UINotificationService.show({\n            title: 'DICOM Segmentation Loader',\n            message: error.message,\n            type: 'error',\n            autoClose: true,\n          });\n        };\n\n        const {referencedDisplaySet} = displaySet.getSourceDisplaySet(\n          this.props.studies,\n          true,\n          onDisplaySetLoadFailureHandler\n        );\n        displaySet = referencedDisplaySet;\n\n      } else {\n        displaySet = displaySet.getSourceDisplaySet(this.props.studies);\n      }\n\n      if (!displaySet) {\n        throw new Error(\n          `Referenced series for ${Modality} dataset not present.`\n        );\n      }\n    }\n\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\n  };\n\n  render() {\n    const { viewportSpecificData } = this.props;\n    const viewportData = values(viewportSpecificData);\n\n    return (\n      <div className=\"ViewerMain\">\n        {this.state.displaySets.length && (\n          <ConnectedViewportGrid\n            isStudyLoaded={this.props.isStudyLoaded}\n            studies={this.props.studies}\n            viewportData={viewportData}\n            setViewportData={this.setViewportData}\n          >\n            {/* Children to add to each viewport that support children */}\n          </ConnectedViewportGrid>\n        )}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // Clear the entire viewport specific data\n    const { viewportSpecificData } = this.props;\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\n      this.props.clearViewportSpecificData(viewportIndex);\n    });\n\n    // TODO: These don't have to be viewer specific?\n    // Could qualify for other routes?\n    // hotkeys.destroy();\n\n    // Remove beforeUnload event handler...\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\n    // Destroy the synchronizer used to update reference lines\n    //OHIF.viewer.updateImageSynchronizer.destroy();\n    // TODO: Instruct all plugins to clean up themselves\n    //\n    // Clear references to all stacks in the StackManager\n    //StackManager.clearStacks();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.Studies collection\n    //OHIF.viewer.Studies.removeAll();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.StudyMetadataList collection\n    //OHIF.viewer.StudyMetadataList.removeAll();\n  }\n}\n\nexport default ViewerMain;\n","import OHIF from '@ohif/core';\nimport ViewerMain from './ViewerMain';\nimport { connect } from 'react-redux';\n\nconst {\n  setViewportSpecificData,\n  clearViewportSpecificData,\n} = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\n\n  return {\n    activeViewportIndex,\n    layout,\n    viewportSpecificData,\n    viewports: state.viewports,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    },\n  };\n};\n\nconst ConnectedViewerMain = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerMain);\n\nexport default ConnectedViewerMain;\n","import './SidePanel.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst SidePanel = ({ from, isOpen, children, width }) => {\n  const fromSideClass = from === 'right' ? 'from-right' : 'from-left';\n\n  const styles = width\n    ? {\n        maxWidth: width,\n        marginRight: isOpen ? '0' : Number.parseInt(width) * -1,\n      }\n    : {};\n\n  return (\n    <section\n      style={styles}\n      className={classNames('sidepanel', fromSideClass, {\n        'is-open': isOpen,\n      })}\n    >\n      {children}\n    </section>\n  );\n};\n\nSidePanel.propTypes = {\n  from: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  children: PropTypes.node,\n  width: PropTypes.string,\n};\n\nexport default SidePanel;\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { ErrorBoundary, Icon } from '@ohif/ui';\nimport { servicesManager } from './../../App';\n\nimport './ErrorBoundaryDialog.css';\n\nconst { UIModalService } = servicesManager.services;\n\nconst ErrorBoundaryDialog = ({ context, children }) => {\n  const handleOnError = (error, componentStack) => {\n    const ErrorDialog = () => {\n      const [open, setOpen] = useState(false);\n\n      return (\n        <div className=\"ErrorFallback\" role=\"alert\">\n          <div className=\"ErrorBoundaryDialog\">\n            <h3 className=\"ErrorBoundaryDialogTitle\">\n              {context}: <span>{error.message}</span>\n            </h3>\n          </div>\n          <button\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\n            onClick={() => setOpen(s => !s)}\n          >\n            <Icon\n              name=\"chevron-down\"\n              className={classnames('ErrorBoundaryDialogIcon', {\n                opened: open,\n              })}\n            />\n            Stack Trace\n          </button>\n\n          {open && <pre>{componentStack}</pre>}\n        </div>\n      );\n    };\n\n    UIModalService.show({\n      content: ErrorDialog,\n      title: `Something went wrong in ${context}`,\n    });\n  };\n\n  const fallbackComponent = () => (\n    <div className=\"ErrorFallback\" role=\"alert\">\n      <p>\n        Error rendering {context}. <br /> Check the browser console for more\n        details.\n      </p>\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      fallbackComponent={fallbackComponent}\n      context={context}\n      onError={handleOnError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nErrorBoundaryDialog.propTypes = {\n  context: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErrorBoundaryDialog;\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\n\nexport default ErrorBoundaryDialog;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useLogger } from '@ohif/ui';\n\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\nimport { withDialog } from '@ohif/ui';\nimport moment from 'moment';\nimport ConnectedHeader from './ConnectedHeader.js';\nimport ToolbarRow from './ToolbarRow.js';\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\nimport SidePanel from './../components/SidePanel.js';\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\nimport { extensionManager } from './../App.js';\nimport { ReconstructionIssues } from './../../../core/src/enums.js';\nimport dcmjs from 'dcmjs';\n\n// Contexts\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\nimport UserManagerContext from '../context/UserManagerContext';\nimport AppContext from '../context/AppContext';\n\nimport './Viewer.css';\nimport { finished } from 'stream';\nimport { cornerstoneWADOImageLoader } from 'cornerstone-wado-image-loader';\n\nclass Viewer extends Component {\n  static propTypes = {\n    studies: PropTypes.arrayOf(\n      PropTypes.shape({\n        StudyInstanceUID: PropTypes.string.isRequired,\n        StudyDate: PropTypes.string,\n        PatientID: PropTypes.string,\n        displaySets: PropTypes.arrayOf(\n          PropTypes.shape({\n            displaySetInstanceUID: PropTypes.string.isRequired,\n            SeriesDescription: PropTypes.string,\n            SeriesNumber: PropTypes.number,\n            InstanceNumber: PropTypes.number,\n            numImageFrames: PropTypes.number,\n            Modality: PropTypes.string.isRequired,\n            images: PropTypes.arrayOf(\n              PropTypes.shape({\n                getImageId: PropTypes.func.isRequired,\n              })\n            ),\n          })\n        ),\n      })\n    ),\n    studyInstanceUIDs: PropTypes.array,\n    activeServer: PropTypes.shape({\n      type: PropTypes.string,\n      wadoRoot: PropTypes.string,\n    }),\n    onTimepointsUpdated: PropTypes.func,\n    onMeasurementsUpdated: PropTypes.func,\n    // window.store.getState().viewports.viewportSpecificData\n    viewports: PropTypes.object.isRequired,\n    // window.store.getState().viewports.activeViewportIndex\n    activeViewportIndex: PropTypes.number.isRequired,\n    isStudyLoaded: PropTypes.bool,\n    dialog: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { activeServer } = this.props;\n    const server = Object.assign({}, activeServer);\n\n    OHIF.measurements.MeasurementApi.setConfiguration({\n      dataExchange: {\n        retrieve: DICOMSR.retrieveMeasurements,\n        store: DICOMSR.storeMeasurements,\n      },\n      server,\n    });\n\n    OHIF.measurements.TimepointApi.setConfiguration({\n      dataExchange: {\n        retrieve: this.retrieveTimepoints,\n        store: this.storeTimepoints,\n        remove: this.removeTimepoint,\n        update: this.updateTimepoint,\n        disassociate: this.disassociateStudy,\n      },\n    });\n\n    this._getActiveViewport = this._getActiveViewport.bind(this);\n  }\n\n  state = {\n    isLeftSidePanelOpen: true,\n    isRightSidePanelOpen: false,\n    selectedRightSidePanel: '',\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\n    thumbnails: [],\n  };\n\n  componentWillUnmount() {\n    if (this.props.dialog) {\n      this.props.dialog.dismissAll();\n    }\n  }\n\n  retrieveTimepoints = filter => {\n    OHIF.log.info('retrieveTimepoints');\n\n    // Get the earliest and latest study date\n    let earliestDate = new Date().toISOString();\n    let latestDate = new Date().toISOString();\n    if (this.props.studies) {\n      latestDate = new Date('1000-01-01').toISOString();\n      this.props.studies.forEach(study => {\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\n        if (StudyDate < earliestDate) {\n          earliestDate = StudyDate;\n        }\n        if (StudyDate > latestDate) {\n          latestDate = StudyDate;\n        }\n      });\n    }\n\n    // Return a generic timepoint\n    return Promise.resolve([\n      {\n        timepointType: 'baseline',\n        timepointId: 'TimepointId',\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\n        PatientID: filter.PatientID,\n        earliestDate,\n        latestDate,\n        isLocked: false,\n      },\n    ]);\n  };\n\n  storeTimepoints = timepointData => {\n    OHIF.log.info('storeTimepoints');\n    return Promise.resolve();\n  };\n\n  updateTimepoint = (timepointData, query) => {\n    OHIF.log.info('updateTimepoint');\n    return Promise.resolve();\n  };\n\n  removeTimepoint = timepointId => {\n    OHIF.log.info('removeTimepoint');\n    return Promise.resolve();\n  };\n\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\n    OHIF.log.info('disassociateStudy');\n    return Promise.resolve();\n  };\n\n  onTimepointsUpdated = timepoints => {\n    if (this.props.onTimepointsUpdated) {\n      this.props.onTimepointsUpdated(timepoints);\n    }\n  };\n\n  onMeasurementsUpdated = measurements => {\n    if (this.props.onMeasurementsUpdated) {\n      this.props.onMeasurementsUpdated(measurements);\n    }\n  };\n\n  componentDidMount() {\n    const { studies, isStudyLoaded } = this.props;\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\n    const currentTimepointId = 'TimepointId';\n\n    const timepointApi = new TimepointApi(currentTimepointId, {\n      onTimepointsUpdated: this.onTimepointsUpdated,\n    });\n\n    const measurementApi = new MeasurementApi(timepointApi, {\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\n    });\n\n    this.currentTimepointId = currentTimepointId;\n    this.timepointApi = timepointApi;\n    this.measurementApi = measurementApi;\n\n    if (studies) {\n      const PatientID = studies[0] && studies[0].PatientID;\n\n      timepointApi.retrieveTimepoints({ PatientID });\n      if (isStudyLoaded) {\n        this.measurementApi.retrieveMeasurements(PatientID, [\n          currentTimepointId,\n        ]);\n      }\n\n      const activeViewport = this.props.viewports[this.props.activeViewportIndex];\n      const activeDisplaySetInstanceUID =\n        activeViewport ? activeViewport.displaySetInstanceUID : undefined;\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      studies,\n      isStudyLoaded,\n      activeViewportIndex,\n      viewports\n    } = this.props;\n\n    const activeViewport = viewports[activeViewportIndex];\n    const activeDisplaySetInstanceUID =\n      activeViewport ? activeViewport.displaySetInstanceUID : undefined;\n\n    const prevActiveViewport = prevProps.viewports[prevProps.activeViewportIndex];\n    const prevActiveDisplaySetInstanceUID =\n      prevActiveViewport ? prevActiveViewport.displaySetInstanceUID : undefined;\n\n    if (studies !== prevProps.studies ||\n      activeViewportIndex !== prevProps.activeViewportIndex ||\n      activeDisplaySetInstanceUID !== prevActiveDisplaySetInstanceUID\n      ) {\n\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\n      });\n    }\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\n      const PatientID = studies[0] && studies[0].PatientID;\n      const { currentTimepointId } = this;\n\n      this.timepointApi.retrieveTimepoints({ PatientID });\n      this.measurementApi.retrieveMeasurements(PatientID, [currentTimepointId]);\n    }\n  }\n\n  _getActiveViewport() {\n    return this.props.viewports[this.props.activeViewportIndex];\n  }\n\n  render() {\n    let VisiblePanelLeft, VisiblePanelRight;\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    panelExtensions.forEach(panelExt => {\n      panelExt.module.components.forEach(comp => {\n        if (comp.id === this.state.selectedRightSidePanel) {\n          VisiblePanelRight = comp.component;\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\n          VisiblePanelLeft = comp.component;\n        }\n      });\n    });\n\n    return (\n      <>\n        {/* HEADER */}\n        <WhiteLabelingContext.Consumer>\n          {whiteLabeling => (\n            <UserManagerContext.Consumer>\n              {userManager => (\n                <AppContext.Consumer>\n                  {appContext => (\n                    <ConnectedHeader\n                      linkText={\n                        appContext.appConfig.showStudyList\n                          ? 'Study List'\n                          : undefined\n                      }\n                      linkPath={\n                        appContext.appConfig.showStudyList ? '/' : undefined\n                      }\n                      userManager={userManager}\n                    >\n                      {whiteLabeling &&\n                        whiteLabeling.createLogoComponentFn &&\n                        whiteLabeling.createLogoComponentFn(React)}\n                    </ConnectedHeader>\n                  )}\n                </AppContext.Consumer>\n              )}\n            </UserManagerContext.Consumer>\n          )}\n        </WhiteLabelingContext.Consumer>\n\n        {/* TOOLBAR */}\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\n          <ToolbarRow\n            activeViewport={\n              this.props.viewports[this.props.activeViewportIndex]\n            }\n            isDerivedDisplaySetsLoaded={this.props.isDerivedDisplaySetsLoaded}\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\n            selectedLeftSidePanel={\n              this.state.isLeftSidePanelOpen\n                ? this.state.selectedLeftSidePanel\n                : ''\n            }\n            selectedRightSidePanel={\n              this.state.isRightSidePanelOpen\n                ? this.state.selectedRightSidePanel\n                : ''\n            }\n            handleSidePanelChange={(side, selectedPanel) => {\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\n              const openKey = `is${sideClicked}SidePanelOpen`;\n              const selectedKey = `selected${sideClicked}SidePanel`;\n              const updatedState = Object.assign({}, this.state);\n\n              const isOpen = updatedState[openKey];\n              const prevSelectedPanel = updatedState[selectedKey];\n              // RoundedButtonGroup returns `null` if selected button is clicked\n              const isSameSelectedPanel =\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\n\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\n\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\n              if (isClosedOrShouldClose) {\n                updatedState[openKey] = !updatedState[openKey];\n              }\n\n              this.setState(updatedState);\n            }}\n            studies={this.props.studies}\n          />\n        </ErrorBoundaryDialog>\n\n        {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\n        {/*<StudyPrefetcher studies={this.props.studies} />*/}\n\n        {/* VIEWPORTS + SIDEPANELS */}\n        <div className=\"FlexboxLayout\">\n          {/* LEFT */}\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\n              {VisiblePanelLeft ? (\n                <VisiblePanelLeft\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                />\n              ) : (\n                <ConnectedStudyBrowser\n                  studies={this.state.thumbnails}\n                  studyMetadata={this.props.studies}\n                />\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n\n          {/* MAIN */}\n          <div className={classNames('main-content')}>\n            <ErrorBoundaryDialog context=\"ViewerMain\">\n              <ConnectedViewerMain\n                studies={this.props.studies}\n                isStudyLoaded={this.props.isStudyLoaded}\n              />\n            </ErrorBoundaryDialog>\n          </div>\n\n          {/* RIGHT */}\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\n              {VisiblePanelRight && (\n                <VisiblePanelRight\n                  isOpen={this.state.isRightSidePanelOpen}\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                  activeViewport={\n                    this.props.viewports[this.props.activeViewportIndex]\n                  }\n                  getActiveViewport={this._getActiveViewport}\n                />\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withDialog(Viewer);\n\n/**\n * Async function to check if there are any inconsistences in the series.\n *\n * For segmentation checks that the geometry is consistent with the source images:\n * 1) no frames out of plane;\n * 2) have the same width and height.\n *\n * For reconstructable 3D volume:\n * 1) Is series multiframe?\n * 2) Do the frames have different dimensions/number of components/orientations?\n * 3) Has the series any missing frames or irregular spacing?\n * 4) Is the series 4D?\n *\n * If not reconstructable, MPR is disabled.\n * The actual computations are done in isDisplaySetReconstructable.\n *\n * @param {*object} displaySet\n * @returns {[string]} an array of strings containing the warnings\n */\nconst _checkForSeriesInconsistencesWarnings = async function (displaySet, studies) {\n  if (displaySet.inconsistencyWarnings) {\n    // warnings already checked and cached in displaySet\n    return displaySet.inconsistencyWarnings;\n  }\n  const inconsistencyWarnings = [];\n\n  if (displaySet.Modality !== 'SEG') {\n    if (displaySet.reconstructionIssues && displaySet.reconstructionIssues.length !== 0) {\n      displaySet.reconstructionIssues.forEach(warning => {\n        switch (warning) {\n          case ReconstructionIssues.DATASET_4D:\n            inconsistencyWarnings.push('The dataset is 4D.');\n            break;\n          case ReconstructionIssues.VARYING_IMAGESDIMENSIONS:\n            inconsistencyWarnings.push('The dataset frames have different dimensions (rows, columns).');\n            break;\n          case ReconstructionIssues.VARYING_IMAGESCOMPONENTS:\n            inconsistencyWarnings.push('The dataset frames have different components (Sample per pixel).');\n            break;\n          case ReconstructionIssues.VARYING_IMAGESORIENTATION:\n            inconsistencyWarnings.push('The dataset frames have different orientation.');\n            break;\n          case ReconstructionIssues.IRREGULAR_SPACING:\n            inconsistencyWarnings.push('The dataset frames have different pixel spacing.');\n            break;\n          case ReconstructionIssues.MULTIFFRAMES:\n            inconsistencyWarnings.push('The dataset is a multiframes.');\n            break;\n          default:\n            break;\n        }\n      });\n      inconsistencyWarnings.push('The datasets is not a reconstructable 3D volume. MPR mode is not available.');\n    }\n\n    if (displaySet.missingFrames &&\n      (!displaySet.reconstructionIssues ||\n        (displaySet.reconstructionIssues && !displaySet.reconstructionIssues.find(warn => warn === ReconstructionIssues.DATASET_4D)))) {\n          inconsistencyWarnings.push('The datasets is missing frames: ' + displaySet.missingFrames + '.');\n    }\n  } else {\n    const segMetadata = displaySet.metadata;\n    if (!segMetadata) {\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\n      return inconsistencyWarnings;\n    }\n\n    const { referencedDisplaySet } = displaySet.getSourceDisplaySet(studies, false);\n    if (!referencedDisplaySet) {\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\n      return inconsistencyWarnings;\n    }\n\n    const imageIds = referencedDisplaySet.images.map(image => image.getImageId());\n    if (!imageIds || imageIds.length === 0) {\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\n      return inconsistencyWarnings;\n    }\n\n    for (\n      let i = 0, groupsLen = segMetadata.PerFrameFunctionalGroupsSequence.length;\n      i < groupsLen;\n      ++i\n    ) {\n      const PerFrameFunctionalGroups = segMetadata.PerFrameFunctionalGroupsSequence[i];\n      if (!PerFrameFunctionalGroups) {\n        continue;\n      }\n\n      let SourceImageSequence = undefined;\n      if (segMetadata.SourceImageSequence) {\n        SourceImageSequence = segMetadata.SourceImageSequence[i];\n      } else if (PerFrameFunctionalGroups.DerivationImageSequence) {\n        SourceImageSequence =\n          PerFrameFunctionalGroups.DerivationImageSequence\n            .SourceImageSequence;\n      }\n      if (!SourceImageSequence) {\n        if (inconsistencyWarnings.length === 0) {\n          const warningMessage = 'The segmentation ' +\n            'has frames out of plane respect to the source images.';\n            inconsistencyWarnings.push(warningMessage);\n        }\n        continue;\n      }\n\n      const {\n        ReferencedSOPInstanceUID,\n      } = SourceImageSequence;\n\n      const imageId = imageIds.find(imageId => {\n        const sopCommonModule = cornerstone.metaData.get(\n            \"sopCommonModule\",\n            imageId\n        );\n        if (!sopCommonModule) {\n            return;\n        }\n\n        return sopCommonModule.sopInstanceUID === ReferencedSOPInstanceUID;\n      });\n\n      if (!imageId) {\n        continue;\n      }\n\n      const sourceImageMetadata = cornerstone.metaData.get(\n        \"instance\",\n        imageId\n      );\n      if (\n        segMetadata.Rows !== sourceImageMetadata.Rows ||\n        segMetadata.Columns !== sourceImageMetadata.Columns\n      ) {\n        const warningMessage = 'The segmentation ' +\n          'has frames with different geometry ' +\n          'dimensions (Rows and Columns) respect to the source images.';\n          inconsistencyWarnings.push(warningMessage);\n        break;\n      }\n    }\n\n    if (inconsistencyWarnings.length !== 0) {\n      const warningMessage = 'The segmentation format is not supported yet. ' +\n        'The segmentation data (segments) could not be loaded.';\n        inconsistencyWarnings.push(warningMessage);\n    }\n  }\n\n  // cache the warnings\n  displaySet.inconsistencyWarnings = inconsistencyWarnings;\n  return inconsistencyWarnings;\n}\n\n/**\n * Checks if display set is active, i.e. if the series is currently shown\n * in the active viewport.\n *\n * For data display set, this functions checks if the active\n * display set instance uid in the current active viewport is the same of the\n * thumbnail one.\n *\n * For derived modalities (e.g., SEG and RTSTRUCT), the function gets the\n * reference display set and then checks the reference uid with the active\n * display set instance uid.\n *\n * @param {displaySet} displaySet\n * @param {Study[]} studies\n * @param {string} activeDisplaySetInstanceUID\n * @returns {boolean} is active.\n */\n const _isDisplaySetActive = function(displaySet, studies, activeDisplaySetInstanceUID) {\n  let active = false;\n\n  const {\n    displaySetInstanceUID,\n  } = displaySet;\n\n  // TO DO: in the future, we could possibly support new modalities\n  // we should have a list of all modalities here, instead of having hard coded checks\n  if (displaySet.Modality !== 'SEG' &&\n    displaySet.Modality !== 'RTSTRUCT' &&\n    displaySet.Modality !== 'RTDOSE') {\n    active = activeDisplaySetInstanceUID === displaySetInstanceUID;\n  } else if (displaySet.getSourceDisplaySet){\n    if (displaySet.Modality === 'SEG') {\n      const { referencedDisplaySet } = displaySet.getSourceDisplaySet(studies, false);\n      active = referencedDisplaySet ?\n        activeDisplaySetInstanceUID === referencedDisplaySet.displaySetInstanceUID :\n          false;\n    } else {\n      const referencedDisplaySet = displaySet.getSourceDisplaySet(studies, false);\n      active = referencedDisplaySet ?\n        activeDisplaySetInstanceUID === referencedDisplaySet.displaySetInstanceUID :\n          false;\n    }\n  }\n\n  return active;\n};\n\n/**\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\n * a mapping layer?\n *\n * TODO[react]:\n * - Add showStackLoadingProgressBar option\n *\n * @param {Study[]} studies\n * @param {string} activeDisplaySetInstanceUID\n */\nconst _mapStudiesToThumbnails = function(studies, activeDisplaySetInstanceUID) {\n  return studies.map(study => {\n    const { StudyInstanceUID } = study;\n    const thumbnails = study.displaySets.map(displaySet => {\n      const {\n        displaySetInstanceUID,\n        SeriesDescription,\n        InstanceNumber,\n        numImageFrames,\n        SeriesNumber,\n      } = displaySet;\n\n      let imageId;\n      let altImageText;\n\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\n        // TODO: We want to replace this with a thumbnail showing\n        // the segmentation map on the image, but this is easier\n        // and better than what we have right now.\n        altImageText = 'SEG';\n      } else if (displaySet.images && displaySet.images.length) {\n        const imageIndex = Math.floor(displaySet.images.length / 2);\n        imageId = displaySet.images[imageIndex].getImageId();\n      } else {\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\n      }\n\n      const hasWarnings = _checkForSeriesInconsistencesWarnings(displaySet, studies);\n      const active = _isDisplaySetActive(displaySet, studies, activeDisplaySetInstanceUID)\n\n      return {\n        active,\n        imageId,\n        altImageText,\n        displaySetInstanceUID,\n        SeriesDescription,\n        InstanceNumber,\n        numImageFrames,\n        SeriesNumber,\n        hasWarnings,\n      };\n    });\n\n    return {\n      StudyInstanceUID,\n      thumbnails,\n    };\n  });\n};\n","import { connect } from 'react-redux';\nimport Viewer from './Viewer.js';\nimport OHIF from '@ohif/core';\n\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n  return servers.servers.find(isActive);\n};\n\nconst mapStateToProps = state => {\n  const { viewports, servers } = state;\n  return {\n    viewports: viewports.viewportSpecificData,\n    activeViewportIndex: viewports.activeViewportIndex,\n    activeServer: getActiveServer(servers),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTimepointsUpdated: timepoints => {\n      dispatch(setTimepoints(timepoints));\n    },\n    onMeasurementsUpdated: measurements => {\n      dispatch(setMeasurements(measurements));\n    },\n  };\n};\n\nconst ConnectedViewer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Viewer);\n\nexport default ConnectedViewer;\n","export default class FileLoader {\n  fileType;\n  loadFile(file, imageId) { }\n  getDataset(image, imageId) { }\n  getStudies(dataset, imageId) { }\n}\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\n\nconst PDFFileLoader = new (class extends FileLoader {\n  fileType = 'application/pdf';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    const dataset = {};\n    dataset.imageId = image.imageId || imageId;\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getDefaultStudy(imageId);\n  }\n\n  getDefaultStudy(imageId) {\n    const study = {\n      StudyInstanceUID: '',\n      StudyDate: '',\n      StudyTime: '',\n      AccessionNumber: '',\n      ReferringPhysicianName: '',\n      PatientName: '',\n      PatientID: '',\n      PatientBirthdate: '',\n      PatientSex: '',\n      StudyId: '',\n      StudyDescription: '',\n      series: [\n        {\n          SeriesInstanceUID: '',\n          SeriesDescription: '',\n          SeriesNumber: '',\n          instances: [\n            {\n              metadata: {\n                SOPInstanceUID: '',\n                SOPClassUID: '1.2.840.10008.5.1.4.1.1.104.1',\n                Rows: '',\n                Columns: '',\n                NumberOfFrames: 0,\n                InstanceNumber: 1,\n              },\n              getImageId: () => imageId,\n              isLocalFile: true,\n            },\n          ],\n        },\n      ],\n    };\n\n    return study;\n  }\n})();\n\nexport default PDFFileLoader;\n","import dcmjs from 'dcmjs';\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport OHIF from '@ohif/core';\n\nconst metadataProvider = OHIF.cornerstone.metadataProvider;\n\nconst DICOMFileLoader = new (class extends FileLoader {\n  fileType = 'application/dicom';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    let dataset = {};\n    try {\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\n\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      metadataProvider.addInstance(dataset);\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n    } catch (e) {\n      console.error('Error reading dicom file', e);\n    }\n    // Set imageId on dataset to be consumed later on\n    dataset.imageId = imageId;\n\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getStudyFromDataset(dataset);\n  }\n\n  getStudyFromDataset(dataset = {}) {\n    const {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      SeriesInstanceUID,\n      SeriesDescription,\n      SeriesNumber,\n      imageId,\n    } = dataset;\n\n    const instance = {\n      metadata: dataset,\n      url: imageId,\n    };\n\n    const series = {\n      SeriesInstanceUID: SeriesInstanceUID,\n      SeriesDescription: SeriesDescription,\n      SeriesNumber: SeriesNumber,\n      instances: [instance],\n    };\n\n    const study = {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      /*\n      TODO: in case necessary to uncomment this block, double check every property\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\n      Modality: Modality || DICOMWeb.getString(dataset['00080060']),\n      ModalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\n      modalities:\n      */\n      series: [series],\n    };\n\n    return study;\n  }\n})();\n\nexport default DICOMFileLoader;\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport PDFFileLoader from './pdfFileLoader';\nimport DICOMFileLoader from './dicomFileLoader';\n\nclass FileLoaderService extends FileLoader {\n  fileType;\n  loader;\n  constructor(file) {\n    super();\n    const fileType = file && file.type;\n    this.loader = this.getLoader(fileType);\n    this.fileType = this.loader.fileType;\n  }\n\n  static groupSeries(studies) {\n    const groupBy = (list, groupByKey, listKey) => {\n      let nonKeyCounter = 1;\n\n      return list.reduce((acc, obj) => {\n        let key = obj[groupByKey];\n        const list = obj[listKey];\n\n        // in case key not found, group it using counter\n        key = !!key ? key : '' + nonKeyCounter++;\n\n        if (!acc[key]) {\n          acc[key] = { ...obj };\n          acc[key][listKey] = [];\n        }\n\n        acc[key][listKey].push(...list);\n\n        return acc;\n      }, {});\n    };\n\n    const studiesGrouped = Object.values(\n      groupBy(studies, 'StudyInstanceUID', 'series')\n    );\n\n    const result = studiesGrouped.map(studyGroup => {\n      const seriesGrouped = groupBy(\n        studyGroup.series,\n        'SeriesInstanceUID',\n        'instances'\n      );\n      studyGroup.series = Object.values(seriesGrouped);\n\n      return studyGroup;\n    });\n\n    return result;\n  }\n\n  addFile(file) {\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\n  }\n\n  loadFile(file, imageId) {\n    return this.loader.loadFile(file, imageId);\n  }\n\n  getDataset(image, imageId) {\n    return this.loader.getDataset(image, imageId);\n  }\n\n  getStudies(dataset, imageId) {\n    return this.loader.getStudies(dataset, imageId);\n  }\n\n  getLoader(fileType) {\n    if (fileType === 'application/pdf') {\n      return PDFFileLoader;\n    } else {\n      // Default to dicom loader\n      return DICOMFileLoader;\n    }\n  }\n}\n\nexport default FileLoaderService;\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\n\nconst processFile = async file => {\n  try {\n    const fileLoaderService = new FileLoaderService(file);\n    const imageId = fileLoaderService.addFile(file);\n    const image = await fileLoaderService.loadFile(file, imageId);\n    const dataset = await fileLoaderService.getDataset(image, imageId);\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\n\n    return studies;\n  } catch (error) {\n    console.log(\n      error.name,\n      ':Error when trying to load and process local files:',\n      error.message\n    );\n  }\n};\n\nexport default async function filesToStudies(files) {\n  const processFilesPromises = files.map(processFile);\n  const studies = await Promise.all(processFilesPromises);\n\n  return FileLoaderService.groupSeries(studies.flat());\n}\n"],"sourceRoot":""}