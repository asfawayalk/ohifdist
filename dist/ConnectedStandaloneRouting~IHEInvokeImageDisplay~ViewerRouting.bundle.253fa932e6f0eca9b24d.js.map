{"version":3,"sources":["webpack:///./customHooks/usePrevious.js","webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js","webpack:///./connectedComponents/ViewerRetrieveStudyData.js","webpack:///./connectedComponents/ConnectedViewerRetrieveStudyData.js"],"names":["usePrevious","value","ref","useRef","useEffect","current","scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","state","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","props","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","setState","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","_onDerivedDisplaySetsLoadedAndCached","updateButtonGroups","panelModules","extensionManager","modules","MODULE_TYPES","PANEL","this","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","studies","activeViewport","menuOptionEntry","target","icon","bottomLabel","label","unshift","t","document","addEventListener","removeEventListener","prevProps","activeContextsChanged","prevStudies","prevActiveViewport","shouldUpdate","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","className","style","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","Component","_getCustomButtonComponent","CustomComponent","activeButtonsIds","map","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","PropTypes","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","array","any","modal","withTranslation","withModal","withDialog","withAppContext","utils","studyMetadataManager","setActiveViewportSpecificData","ConnectedStudyBrowser","stackLoadingProgressMap","loading","progress","studiesWithLoadingData","study","thumbnails","displaySetInstanceUID","stackId","stackProgressData","stackPercentComplete","percentComplete","onThumbnailClick","displaySet","studyMetadata","isArray","reduce","all","currentDisplaySet","displaySets","concat","ds","findDisplaySetByUID","isDerived","Modality","servicesManager","services","LoggerService","UINotificationService","getSourceDisplaySet","error","message","show","autoClose","referencedDisplaySet","activatedLabelmapPromise","then","activatedLabelmapIndex","selectionFired","CustomEvent","dispatchEvent","Error","StudyBrowser","ViewportPane","children","onDrop","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","StudyInstanceUID","collect","highlighted","hovered","classNames","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","logger","useLogger","ViewportPanes","React","useMemo","pluginName","ViewportComponent","JSON","stringify","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","height","width","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","isOpen","fromSideClass","styles","maxWidth","marginRight","Number","parseInt","UIModalService","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","Viewer","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","studyInstanceUIDs","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","_getActiveViewport","dismissAll","timepointApi","measurementApi","currentTimepointId","activeDisplaySetInstanceUID","undefined","_mapStudiesToThumbnails","prevActiveDisplaySetInstanceUID","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","linkPath","createLogoComponentFn","isDerivedDisplaySetsLoaded","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","getActiveViewport","shape","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","_checkForSeriesInconsistencesWarnings","inconsistencyWarnings","reconstructionIssues","warning","ReconstructionIssues","DATASET_4D","VARYING_IMAGESDIMENSIONS","VARYING_IMAGESCOMPONENTS","VARYING_IMAGESORIENTATION","IRREGULAR_SPACING","MULTIFFRAMES","missingFrames","warn","segMetadata","metadata","image","groupsLen","PerFrameFunctionalGroups","PerFrameFunctionalGroupsSequence","SourceImageSequence","DerivationImageSequence","ReferencedSOPInstanceUID","imageId","sopCommonModule","cornerstone","metaData","get","sopInstanceUID","sourceImageMetadata","Rows","Columns","altImageText","imageIndex","Math","floor","hasWarnings","_isDisplaySetActive","setTimepoints","setMeasurements","getActiveServer","servers","a","ConnectedViewer","OHIFStudyMetadata","OHIFSeriesMetadata","retrieveStudiesMetadata","deleteStudyMetadataPromise","makeCancelable","_promoteList","filters","isFilterStrategy","promoted","_promoteStudyDisplaySet","list","searchMethod","listCopy","response","promotedCount","arrayValues","seriesInstanceUID","promotedResponse","valueToCompare","SeriesInstanceUID","split","index","findIndex","itemToPromote","splice","_isQueryParamApplied","applied","seriesInstanceUIDs","validateFilterApplied","arrayToInspect","every","item","seriesInstanceUIDStr","validatePromoteApplied","isValid","resultSeries","validateMethod","_showUserMessage","queryParamApplied","showUserMessage","_addSeriesToStudy","sopClassHandlerModules","getData","seriesMetadata","getSeriesByUID","updateSeries","addSeries","createAndAddDisplaySetsForSeries","derivedDisplaySets","getDerivedDatasets","_updateStudyMetadataManager","add","_updateStudyDisplaySets","createDisplaySets","_addDerivedDisplaySets","_thinStudyData","ViewerRetrieveStudyData","cancelableSeriesPromises","cancelableStudiesPromises","setStudyData","setError","setStudies","setIsStudyLoaded","snackbarContext","useContext","filterQueryParam","maxConcurrentMetadataRequests","processStudies","studiesData","loadRemainingSeries","result","isCanceled","isQueryParamApplied","studyDidLoad","catch","finally","seriesLoader","loadNextSeries","hasNext","next","concurrentRequestsAllowed","getSeriesCount","promises","fill","remainingPromises","loadStudies","retrieveParams","splitQueryParameterCalls","enableGoogleCloudAdapter","purgeCancellablePromises","useCallback","cancel","prevStudyInstanceUIDs","e","purge","NotFound","ConnectedViewerRetrieveStudyData"],"mappings":"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","file":"ConnectedStandaloneRouting~IHEInvokeImageDisplay~ViewerRouting.bundle.253fa932e6f0eca9b24d.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nexport default function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","import { connect } from 'react-redux';\nimport { CineDialog } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport csTools from 'cornerstone-tools';\nimport { commandsManager } from './../App.js';\n// Our target output kills the `as` and \"import\" throws a keyword error\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst toolImport = csTools.import;\nconst scrollToIndex = toolImport('util/scrollToIndex');\nconst { setViewportSpecificData } = OHIF.redux.actions;\n\n// Why do I need or care about any of this info?\n// A dispatch action should be able to pull this at the time of an event?\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\nconst mapStateToProps = state => {\n  // Get activeViewport's `cine` and `stack`\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\n\n  const cineData = cine || {\n    isPlaying: false,\n    cineFrameRate: 24,\n  };\n\n  // New props we're creating?\n  return {\n    activeEnabledElement: dom,\n    activeViewportCineData: cineData,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  const {\n    activeEnabledElement,\n    activeViewportCineData,\n    activeViewportIndex,\n  } = propsFromState;\n\n  return {\n    cineFrameRate: activeViewportCineData.cineFrameRate,\n    isPlaying: activeViewportCineData.isPlaying,\n    onPlayPauseChanged: isPlaying => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.isPlaying = !cine.isPlaying;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onFrameRateChanged: frameRate => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.cineFrameRate = frameRate;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onClickNextButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\n      if (currentImageIdIndex >= imageIds.length - 1) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\n    },\n    onClickBackButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex } = stackData.data[0];\n      if (currentImageIdIndex === 0) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\n    },\n    onClickSkipToStart: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      scrollToIndex(activeEnabledElement, 0);\n    },\n    onClickSkipToEnd: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const lastIndex = stackData.data[0].imageIds.length - 1;\n      scrollToIndex(activeEnabledElement, lastIndex);\n    },\n  };\n};\n\nconst ConnectedCineDialog = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(CineDialog);\n\nexport default ConnectedCineDialog;\n","import { LayoutButton } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\n\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  return {\n    currentLayout: state.viewports.layout,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // TODO: Change if layout switched becomes more complex\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\n      const viewports = [];\n      const numRows = selectedCell.row + 1;\n      const numColumns = selectedCell.col + 1;\n      const numViewports = numRows * numColumns;\n\n      for (let i = 0; i < numViewports; i++) {\n        // Hacky way to allow users to exit MPR \"mode\"\n        const viewport = currentLayout.viewports[i];\n        let plugin = viewport && viewport.plugin;\n        if (viewport && viewport.vtk) {\n          plugin = 'cornerstone';\n        }\n\n        viewports.push({\n          plugin,\n        });\n      }\n      const layout = {\n        numRows,\n        numColumns,\n        viewports,\n      };\n\n      const maxActiveIndex = numViewports - 1;\n      if (activeViewportIndex > maxActiveIndex) {\n        dispatch(setViewportActive(0));\n      }\n\n      dispatch(setLayout(layout));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch) => {\n  const onChangeFromDispatch = propsFromDispatch.onChange;\n  const { currentLayout, activeViewportIndex } = propsFromState;\n\n  return {\n    onChange: selectedCell =>\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\n  };\n};\n\nconst ConnectedLayoutButton = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(LayoutButton);\n\nexport default ConnectedLayoutButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\n\nimport { MODULE_TYPES } from '@ohif/core';\nimport {\n  ExpandableToolMenu,\n  RoundedButtonGroup,\n  ToolbarButton,\n  withModal,\n  withDialog,\n} from '@ohif/ui';\n\nimport './ToolbarRow.css';\nimport { commandsManager, extensionManager } from './../App.js';\n\nimport ConnectedCineDialog from './ConnectedCineDialog';\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\nimport { withAppContext } from '../context/AppContext';\n\nclass ToolbarRow extends Component {\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\n  // closed if selected is null/undefined\n  static propTypes = {\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\n    selectedLeftSidePanel: PropTypes.string.isRequired,\n    selectedRightSidePanel: PropTypes.string.isRequired,\n    handleSidePanelChange: PropTypes.func.isRequired,\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\n    studies: PropTypes.array,\n    t: PropTypes.func.isRequired,\n    // NOTE: withDialog, withModal HOCs\n    dialog: PropTypes.any,\n    modal: PropTypes.any,\n  };\n\n  static defaultProps = {\n    studies: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\n    // TODO:\n    // If it's a tool that can be active... Mark it as active?\n    // - Tools that are on/off?\n    // - Tools that can be bound to multiple buttons?\n\n    // Normal ToolbarButtons...\n    // Just how high do we need to hoist this state?\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\n    this.state = {\n      toolbarButtons: toolbarButtonDefinitions,\n      activeButtons: [],\n    };\n\n    this.seriesPerStudyCount = [];\n\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\n    this._onDerivedDisplaySetsLoadedAndCached = this._onDerivedDisplaySetsLoadedAndCached.bind(\n      this\n    );\n\n    this.updateButtonGroups();\n  }\n\n  updateButtonGroups() {\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    this.buttonGroups = {\n      left: [],\n      right: [],\n    };\n\n    // ~ FIND MENU OPTIONS\n    panelModules.forEach(panelExtension => {\n      const panelModule = panelExtension.module;\n      const defaultContexts = Array.from(panelModule.defaultContext);\n\n      panelModule.menuOptions.forEach(menuOption => {\n        const contexts = Array.from(menuOption.context || defaultContexts);\n        const hasActiveContext = this.props.activeContexts.some(actx =>\n          contexts.includes(actx)\n        );\n\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\n        // Note: This does not cleanly handle `studies` prop updating with panel open\n        const isDisabled =\n          typeof menuOption.isDisabled === 'function' &&\n          menuOption.isDisabled(this.props.studies, this.props.activeViewport);\n\n        if (hasActiveContext && !isDisabled) {\n          const menuOptionEntry = {\n            value: menuOption.target,\n            icon: menuOption.icon,\n            bottomLabel: menuOption.label,\n          };\n          const from = menuOption.from || 'right';\n\n          this.buttonGroups[from].push(menuOptionEntry);\n        }\n      });\n    });\n\n    // TODO: This should come from extensions, instead of being baked in\n    this.buttonGroups.left.unshift({\n      value: 'studies',\n      icon: 'th-large',\n      bottomLabel: this.props.t('Series'),\n    });\n  }\n\n  componentDidMount() {\n    /*\n     * TODO: Improve the way we notify parts of the app\n     * that depends on derived display sets to be loaded.\n     * (Implement pubsub for better tracking of derived display sets)\n     */\n    document.addEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  _onDerivedDisplaySetsLoadedAndCached() {\n    this.updateButtonGroups();\n    this.setState({\n      toolbarButtons: _getVisibleToolbarButtons.call(this),\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const activeContextsChanged =\n      prevProps.activeContexts !== this.props.activeContexts;\n\n    const prevStudies = prevProps.studies;\n    const prevActiveViewport = prevProps.activeViewport;\n    const activeViewport = this.props.activeViewport;\n    const studies = this.props.studies;\n    const seriesPerStudyCount = this.seriesPerStudyCount;\n\n    let shouldUpdate = false;\n\n    if (\n      prevStudies.length !== studies.length ||\n      prevActiveViewport !== activeViewport\n    ) {\n      shouldUpdate = true;\n    } else {\n      for (let i = 0; i < studies.length; i++) {\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\n          seriesPerStudyCount[i] = studies[i].series.length;\n\n          shouldUpdate = true;\n          break;\n        }\n      }\n    }\n\n    if (shouldUpdate) {\n      this.updateButtonGroups();\n    }\n\n    if (activeContextsChanged) {\n      this.setState(\n        {\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\n        },\n        this.closeCineDialogIfNotApplicable\n      );\n    }\n  }\n\n  closeCineDialogIfNotApplicable = () => {\n    const { dialog } = this.props;\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\n    if (dialogId) {\n      const cineButtonPresent = toolbarButtons.find(\n        button => button.options && button.options.behavior === 'CINE'\n      );\n      if (!cineButtonPresent) {\n        dialog.dismiss({ id: dialogId });\n        activeButtons = activeButtons.filter(\n          button => button.options && button.options.behavior !== 'CINE'\n        );\n        this.setState({ dialogId: null, activeButtons });\n      }\n    }\n  };\n\n  render() {\n    const buttonComponents = _getButtonComponents.call(\n      this,\n      this.state.toolbarButtons,\n      this.state.activeButtons\n    );\n\n    const onPress = (side, value) => {\n      this.props.handleSidePanelChange(side, value);\n    };\n    const onPressLeft = onPress.bind(this, 'left');\n    const onPressRight = onPress.bind(this, 'right');\n\n    return (\n      <>\n        <div className=\"ToolbarRow\">\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\n            <RoundedButtonGroup\n              options={this.buttonGroups.left}\n              value={this.props.selectedLeftSidePanel || ''}\n              onValueChanged={onPressLeft}\n            />\n          </div>\n          {buttonComponents}\n          <ConnectedLayoutButton />\n          <div\n            className=\"pull-right m-t-1 rm-x-1\"\n            style={{ marginLeft: 'auto' }}\n          >\n            {this.buttonGroups.right.length && (\n              <RoundedButtonGroup\n                options={this.buttonGroups.right}\n                value={this.props.selectedRightSidePanel || ''}\n                onValueChanged={onPressRight}\n              />\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction _getCustomButtonComponent(button, activeButtons) {\n  const CustomComponent = button.CustomComponent;\n  const isValidComponent = typeof CustomComponent === 'function';\n\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\n  if (isValidComponent) {\n    const parentContext = this;\n    const activeButtonsIds = activeButtons.map(button => button.id);\n    const isActive = activeButtonsIds.includes(button.id);\n\n    return (\n      <CustomComponent\n        parentContext={parentContext}\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\n        button={button}\n        key={button.id}\n        activeButtons={activeButtonsIds}\n        isActive={isActive}\n      />\n    );\n  }\n}\n\nfunction _getExpandableButtonComponent(button, activeButtons) {\n  // Iterate over button definitions and update `onClick` behavior\n  let activeCommand;\n  const childButtons = button.buttons.map(childButton => {\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\n\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\n      activeCommand = childButton.id;\n    }\n\n    return childButton;\n  });\n\n  return (\n    <ExpandableToolMenu\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      buttons={childButtons}\n      activeCommand={activeCommand}\n    />\n  );\n}\n\nfunction _getDefaultButtonComponent(button, activeButtons) {\n  return (\n    <ToolbarButton\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      onClick={_handleToolbarButtonClick.bind(this, button)}\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\n    />\n  );\n}\n/**\n * Determine which extension buttons should be showing, if they're\n * active, and what their onClick behavior should be.\n */\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\n  const _this = this;\n  return toolbarButtons.map(button => {\n    const hasCustomComponent = button.CustomComponent;\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\n\n    if (hasCustomComponent) {\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\n    }\n\n    if (hasNestedButtonDefinitions) {\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\n    }\n\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\n  });\n}\n\n/**\n * TODO: DEPRECATE\n * This is used exclusively in `extensions/cornerstone/src`\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\n *\n * A handy way for us to handle different button types. IE. firing commands for\n * buttons, or initiation built in behavior.\n *\n * @param {*} button\n * @param {*} evt\n * @param {*} props\n */\nfunction _handleToolbarButtonClick(button, evt, props) {\n  const { activeButtons } = this.state;\n\n  if (button.commandName) {\n    const options = Object.assign({ evt }, button.commandOptions);\n    commandsManager.runCommand(button.commandName, options);\n  }\n\n  // TODO: Use Types ENUM\n  // TODO: We can update this to be a `getter` on the extension to query\n  //       For the active tools after we apply our updates?\n  if (button.type === 'setToolActive') {\n    const toggables = activeButtons.filter(\n      ({ options }) => options && !options.togglable\n    );\n    this.setState({ activeButtons: [...toggables, button] });\n  } else if (button.type === 'builtIn') {\n    this._handleBuiltIn(button);\n  }\n}\n\n/**\n *\n */\nfunction _getVisibleToolbarButtons() {\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\n  const toolbarButtonDefinitions = [];\n\n  toolbarModules.forEach(extension => {\n    const { definitions, defaultContext } = extension.module;\n    definitions.forEach(definition => {\n      const context = definition.context || defaultContext;\n\n      if (this.props.activeContexts.includes(context)) {\n        toolbarButtonDefinitions.push(definition);\n      }\n    });\n  });\n\n  return toolbarButtonDefinitions;\n}\n\nfunction _handleBuiltIn(button) {\n  /* TODO: Keep cine button active until its unselected. */\n  const { dialog, t } = this.props;\n  const { dialogId } = this.state;\n  const { id, options } = button;\n\n  if (options.behavior === 'CINE') {\n    if (dialogId) {\n      dialog.dismiss({ id: dialogId });\n      this.setState(state => ({\n        dialogId: null,\n        activeButtons: [\n          ...state.activeButtons.filter(button => button.id !== id),\n        ],\n      }));\n    } else {\n      const spacing = 20;\n      const { x, y } = document\n        .querySelector(`.ViewerMain`)\n        .getBoundingClientRect();\n      const newDialogId = dialog.create({\n        content: ConnectedCineDialog,\n        defaultPosition: {\n          x: x + spacing || 0,\n          y: y + spacing || 0,\n        },\n      });\n      this.setState(state => ({\n        dialogId: newDialogId,\n        activeButtons: [...state.activeButtons, button],\n      }));\n    }\n  }\n\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\n    commandsManager.runCommand('showDownloadViewportModal', {\n      title: t('Download High Quality Image'),\n    });\n  }\n}\n\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\n  withModal(withDialog(withAppContext(ToolbarRow)))\n);\n","import OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { StudyBrowser } from '@ohif/ui';\nimport cloneDeep from 'lodash.clonedeep';\nimport findDisplaySetByUID from './findDisplaySetByUID';\nimport { servicesManager } from './../App.js';\n\nconst { studyMetadataManager } = OHIF.utils;\n\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\n\n// TODO\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\n// - Pass in errors and stack loading progress from Redux\nconst mapStateToProps = (state, ownProps) => {\n  // If we know that the stack loading progress details have changed,\n  // we can try to update the component state so that the thumbnail\n  // progress bar is updated\n  const stackLoadingProgressMap = state.loading.progress;\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\n\n  studiesWithLoadingData.forEach(study => {\n    study.thumbnails.forEach(data => {\n      const { displaySetInstanceUID } = data;\n      const stackId = `StackProgress:${displaySetInstanceUID}`;\n      const stackProgressData = stackLoadingProgressMap[stackId];\n\n      let stackPercentComplete = 0;\n      if (stackProgressData) {\n        stackPercentComplete = stackProgressData.percentComplete;\n      }\n\n      data.stackPercentComplete = stackPercentComplete;\n    });\n  });\n\n  return {\n    studies: studiesWithLoadingData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onThumbnailClick: displaySetInstanceUID => {\n      let displaySet = findDisplaySetByUID(\n        ownProps.studyMetadata,\n        displaySetInstanceUID\n      );\n\n      if (displaySet.isDerived) {\n        const { Modality } = displaySet;\n        if (Modality === 'SEG' && servicesManager) {\n          const {LoggerService, UINotificationService} = servicesManager.services;\n          const onDisplaySetLoadFailureHandler = error => {\n            LoggerService.error({ error, message: error.message });\n            UINotificationService.show({\n              title: 'DICOM Segmentation Loader',\n              message: error.message,\n              type: 'error',\n              autoClose: true,\n            });\n          };\n\n          const {referencedDisplaySet, activatedLabelmapPromise} = displaySet.getSourceDisplaySet(\n            ownProps.studyMetadata,\n            true,\n            onDisplaySetLoadFailureHandler\n          );\n          displaySet = referencedDisplaySet;\n\n          activatedLabelmapPromise.then((activatedLabelmapIndex) => {\n            const selectionFired = new CustomEvent(\"extensiondicomsegmentationsegselected\", {\n              \"detail\": {\"activatedLabelmapIndex\":activatedLabelmapIndex}\n            });\n            document.dispatchEvent(selectionFired);\n          });\n\n        } else {\n          displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\n        }\n\n        if (!displaySet) {\n          throw new Error(\n            `Referenced series for ${Modality} dataset not present.`\n          );\n        }\n\n        if (!displaySet) {\n          throw new Error('Source data not present');\n        }\n      }\n\n      dispatch(setActiveViewportSpecificData(displaySet));\n    },\n  };\n};\n\nconst ConnectedStudyBrowser = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StudyBrowser);\n\nexport default ConnectedStudyBrowser;\n","/**\n * Finds displaySet by UID across all displaySets inside studyMetadata\n * @param {Array} studyMetadata\n * @param {string} displaySetInstanceUID\n */\nexport default function findDisplaySetByUID(\n  studyMetadata,\n  displaySetInstanceUID\n) {\n  if (!Array.isArray(studyMetadata)) return null;\n\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\n    let currentDisplaySet = [];\n    if (current && Array.isArray(current.displaySets)) {\n      currentDisplaySet = current.displaySets;\n    }\n    return all.concat(currentDisplaySet);\n  }, []);\n\n  const bySetInstanceUID = ds =>\n    ds.displaySetInstanceUID === displaySetInstanceUID;\n\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\n  return displaySet || null;\n}\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './ViewportPane.css';\n\nconst ViewportPane = function (props) {\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\n  const [{ hovered, highlighted }, drop] = useDrop({\n    accept: 'thumbnail',\n    drop: (droppedItem, monitor) => {\n      const canDrop = monitor.canDrop();\n      const isOver = monitor.isOver();\n\n      if (canDrop && isOver && onDrop) {\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\n\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\n      }\n    },\n    // Monitor, and collect props.\n    // Returned as values by `useDrop`\n    collect: monitor => ({\n      highlighted: monitor.canDrop(),\n      hovered: monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div\n      className={classNames(\n        'viewport-drop-target',\n        { hovered: hovered },\n        { highlighted: highlighted },\n        propClassName\n      )}\n      ref={drop}\n      data-cy={`viewport-container-${viewportIndex}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nViewportPane.propTypes = {\n  children: PropTypes.node.isRequired,\n  viewportIndex: PropTypes.number.isRequired,\n  onDrop: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default ViewportPane;\n","import './ViewportGrid.css';\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { utils } from '@ohif/core';\nimport { useSnackbarContext, useLogger } from '@ohif/ui';\n//\nimport ViewportPane from './ViewportPane.js';\nimport DefaultViewport from './DefaultViewport.js';\nimport EmptyViewport from './EmptyViewport.js';\n\nconst { loadAndCacheDerivedDisplaySets } = utils;\n\nconst ViewportGrid = function(props) {\n  const {\n    activeViewportIndex,\n    availablePlugins,\n    defaultPlugin: defaultPluginName,\n    layout,\n    numRows,\n    numColumns,\n    setViewportData,\n    studies,\n    viewportData,\n    children,\n    isStudyLoaded,\n  } = props;\n\n  const rowSize = 100 / numRows;\n  const colSize = 100 / numColumns;\n\n  // http://grid.malven.co/\n  if (!viewportData || !viewportData.length) {\n    return null;\n  }\n\n  const snackbar = useSnackbarContext();\n  const logger = useLogger();\n\n  useEffect(() => {\n    if (isStudyLoaded) {\n      viewportData.forEach(displaySet => {\n        loadAndCacheDerivedDisplaySets(displaySet, studies, logger, snackbar);\n      });\n    }\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\n\n  const getViewportPanes = () =>\n    layout.viewports.map((layout, viewportIndex) => {\n      const displaySet = viewportData[viewportIndex];\n\n      if (!displaySet) {\n        return null;\n      }\n\n      const data = {\n        displaySet,\n        studies,\n      };\n\n      // JAMES TODO:\n\n      // Use whichever plugin is currently in use in the panel\n      // unless nothing is specified. If nothing is specified\n      // and the display set has a plugin specified, use that.\n      //\n      // TODO: Change this logic to:\n      // - Plugins define how capable they are of displaying a SopClass\n      // - When updating a panel, ensure that the currently enabled plugin\n      // in the viewport is capable of rendering this display set. If not\n      // then use the most capable available plugin\n\n      const pluginName =\n        !layout.plugin && displaySet && displaySet.plugin\n          ? displaySet.plugin\n          : layout.plugin;\n\n      const ViewportComponent = _getViewportComponent(\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\n        viewportIndex,\n        children,\n        availablePlugins,\n        pluginName,\n        defaultPluginName\n      );\n\n      return (\n        <ViewportPane\n          onDrop={setViewportData}\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\n          className={classNames('viewport-container', {\n            active: activeViewportIndex === viewportIndex,\n          })}\n          key={viewportIndex}\n        >\n          {ViewportComponent}\n        </ViewportPane>\n      );\n    });\n\n  const ViewportPanes = React.useMemo(getViewportPanes, [\n    layout,\n    viewportData,\n    studies,\n    children,\n    availablePlugins,\n    defaultPluginName,\n    setViewportData,\n    activeViewportIndex,\n  ]);\n\n  return (\n    <div\n      data-cy=\"viewprt-grid\"\n      style={{\n        display: 'grid',\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\n        height: '100%',\n        width: '100%',\n      }}\n    >\n      {ViewportPanes}\n    </div>\n  );\n};\n\nViewportGrid.propTypes = {\n  viewportData: PropTypes.array.isRequired,\n  supportsDrop: PropTypes.bool.isRequired,\n  activeViewportIndex: PropTypes.number.isRequired,\n  layout: PropTypes.object.isRequired,\n  availablePlugins: PropTypes.object.isRequired,\n  setViewportData: PropTypes.func.isRequired,\n  studies: PropTypes.array,\n  children: PropTypes.node,\n  defaultPlugin: PropTypes.string,\n  numRows: PropTypes.number.isRequired,\n  numColumns: PropTypes.number.isRequired,\n};\n\nViewportGrid.defaultProps = {\n  viewportData: [],\n  numRows: 1,\n  numColumns: 1,\n  layout: {\n    viewports: [{}],\n  },\n  activeViewportIndex: 0,\n  supportsDrop: true,\n  availablePlugins: {\n    DefaultViewport,\n  },\n  defaultPlugin: 'defaultViewportPlugin',\n};\n\n/**\n *\n *\n * @param {*} plugin\n * @param {*} viewportData\n * @param {*} viewportIndex\n * @param {*} children\n * @returns\n */\nfunction _getViewportComponent(\n  viewportData,\n  viewportIndex,\n  children,\n  availablePlugins,\n  pluginName,\n  defaultPluginName\n) {\n  if (viewportData.displaySet) {\n    pluginName = pluginName || defaultPluginName;\n    const ViewportComponent = availablePlugins[pluginName];\n\n    if (!ViewportComponent) {\n      throw new Error(\n        `No Viewport Component available for name ${pluginName}.\n         Available plugins: ${JSON.stringify(availablePlugins)}`\n      );\n    }\n\n    return (\n      <ViewportComponent\n        viewportData={viewportData}\n        viewportIndex={viewportIndex}\n        children={[children]}\n      />\n    );\n  }\n\n  return <EmptyViewport />;\n}\n\nexport default ViewportGrid;\n","/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultViewport(props) {\n  return <div>{JSON.stringify(props)}</div>;\n}\n","import ViewportGrid from './ViewportGrid.js';\nimport { MODULE_TYPES } from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { extensionManager } from './../../App.js';\nimport memoize from 'lodash/memoize';\n\nconst getAvailableViewportModules = memoize(viewportModules => {\n  const availableViewportModules = {};\n  viewportModules.forEach(moduleDefinition => {\n    availableViewportModules[moduleDefinition.extensionId] =\n      moduleDefinition.module;\n  });\n  return availableViewportModules;\n});\n\nconst mapStateToProps = state => {\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\n\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\n  let defaultPlugin;\n  if (viewportModules.length) {\n    defaultPlugin = viewportModules[0].extensionId;\n  }\n\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\n\n  return {\n    numRows,\n    numColumns,\n    layout,\n    activeViewportIndex,\n    // TODO: rename `availableViewportModules`\n    availablePlugins: availableViewportModules,\n    // TODO: rename `defaultViewportModule`\n    defaultPlugin,\n  };\n};\n\nconst ConnectedViewportGrid = connect(\n  mapStateToProps,\n  null\n)(ViewportGrid);\n\nexport default ConnectedViewportGrid;\n","import './ViewerMain.css';\nimport { servicesManager } from './../App.js';\nimport { Component } from 'react';\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport memoize from 'lodash/memoize';\nimport _values from 'lodash/values';\n\nvar values = memoize(_values);\n\nclass ViewerMain extends Component {\n  static propTypes = {\n    activeViewportIndex: PropTypes.number.isRequired,\n    studies: PropTypes.array,\n    viewportSpecificData: PropTypes.object.isRequired,\n    layout: PropTypes.object.isRequired,\n    setViewportSpecificData: PropTypes.func.isRequired,\n    clearViewportSpecificData: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displaySets: [],\n    };\n  }\n\n  getDisplaySets(studies) {\n    const displaySets = [];\n    studies.forEach(study => {\n      study.displaySets.forEach(dSet => {\n        if (!dSet.plugin) {\n          dSet.plugin = 'cornerstone';\n        }\n        displaySets.push(dSet);\n      });\n    });\n\n    return displaySets;\n  }\n\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\n    const study = studies.find(study => {\n      return study.StudyInstanceUID === StudyInstanceUID;\n    });\n\n    if (!study) {\n      return;\n    }\n\n    return study.displaySets.find(displaySet => {\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\n    });\n  }\n\n  componentDidMount() {\n    // Add beforeUnload event handler to check for unsaved changes\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\n\n    // Get all the display sets for the viewer studies\n    if (this.props.studies) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevViewportAmount = prevProps.layout.viewports.length;\n    const viewportAmount = this.props.layout.viewports.length;\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\n\n    if (\n      this.props.studies !== prevProps.studies ||\n      (viewportAmount !== prevViewportAmount && !isVtk)\n    ) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  fillEmptyViewportPanes = () => {\n    // TODO: Here is the entry point for filling viewports on load.\n    const dirtyViewportPanes = [];\n    const { layout, viewportSpecificData } = this.props;\n    const { displaySets } = this.state;\n\n    if (!displaySets || !displaySets.length) {\n      return;\n    }\n\n    for (let i = 0; i < layout.viewports.length; i++) {\n      const viewportPane = viewportSpecificData[i];\n      const isNonEmptyViewport =\n        viewportPane &&\n        viewportPane.StudyInstanceUID &&\n        viewportPane.displaySetInstanceUID;\n\n      if (isNonEmptyViewport) {\n        dirtyViewportPanes.push({\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\n        });\n\n        continue;\n      }\n\n      const foundDisplaySet =\n        displaySets.find(\n          ds =>\n            !dirtyViewportPanes.some(\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\n            )\n        ) || displaySets[displaySets.length - 1];\n\n      dirtyViewportPanes.push(foundDisplaySet);\n    }\n\n    dirtyViewportPanes.forEach((vp, i) => {\n      if (vp && vp.StudyInstanceUID) {\n        this.setViewportData({\n          viewportIndex: i,\n          StudyInstanceUID: vp.StudyInstanceUID,\n          displaySetInstanceUID: vp.displaySetInstanceUID,\n        });\n      }\n    });\n  };\n\n  setViewportData = ({\n    viewportIndex,\n    StudyInstanceUID,\n    displaySetInstanceUID,\n  }) => {\n    let displaySet = this.findDisplaySet(\n      this.props.studies,\n      StudyInstanceUID,\n      displaySetInstanceUID\n    );\n\n    if (displaySet.isDerived) {\n      const { Modality } = displaySet;\n      if (Modality === 'SEG' && servicesManager) {\n        const {LoggerService, UINotificationService} = servicesManager.services;\n        const onDisplaySetLoadFailureHandler = error => {\n          LoggerService.error({ error, message: error.message });\n          UINotificationService.show({\n            title: 'DICOM Segmentation Loader',\n            message: error.message,\n            type: 'error',\n            autoClose: true,\n          });\n        };\n\n        const {referencedDisplaySet} = displaySet.getSourceDisplaySet(\n          this.props.studies,\n          true,\n          onDisplaySetLoadFailureHandler\n        );\n        displaySet = referencedDisplaySet;\n\n      } else {\n        displaySet = displaySet.getSourceDisplaySet(this.props.studies);\n      }\n\n      if (!displaySet) {\n        throw new Error(\n          `Referenced series for ${Modality} dataset not present.`\n        );\n      }\n    }\n\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\n  };\n\n  render() {\n    const { viewportSpecificData } = this.props;\n    const viewportData = values(viewportSpecificData);\n\n    return (\n      <div className=\"ViewerMain\">\n        {this.state.displaySets.length && (\n          <ConnectedViewportGrid\n            isStudyLoaded={this.props.isStudyLoaded}\n            studies={this.props.studies}\n            viewportData={viewportData}\n            setViewportData={this.setViewportData}\n          >\n            {/* Children to add to each viewport that support children */}\n          </ConnectedViewportGrid>\n        )}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // Clear the entire viewport specific data\n    const { viewportSpecificData } = this.props;\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\n      this.props.clearViewportSpecificData(viewportIndex);\n    });\n\n    // TODO: These don't have to be viewer specific?\n    // Could qualify for other routes?\n    // hotkeys.destroy();\n\n    // Remove beforeUnload event handler...\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\n    // Destroy the synchronizer used to update reference lines\n    //OHIF.viewer.updateImageSynchronizer.destroy();\n    // TODO: Instruct all plugins to clean up themselves\n    //\n    // Clear references to all stacks in the StackManager\n    //StackManager.clearStacks();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.Studies collection\n    //OHIF.viewer.Studies.removeAll();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.StudyMetadataList collection\n    //OHIF.viewer.StudyMetadataList.removeAll();\n  }\n}\n\nexport default ViewerMain;\n","import OHIF from '@ohif/core';\nimport ViewerMain from './ViewerMain';\nimport { connect } from 'react-redux';\n\nconst {\n  setViewportSpecificData,\n  clearViewportSpecificData,\n} = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\n\n  return {\n    activeViewportIndex,\n    layout,\n    viewportSpecificData,\n    viewports: state.viewports,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    },\n  };\n};\n\nconst ConnectedViewerMain = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerMain);\n\nexport default ConnectedViewerMain;\n","import './SidePanel.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst SidePanel = ({ from, isOpen, children, width }) => {\n  const fromSideClass = from === 'right' ? 'from-right' : 'from-left';\n\n  const styles = width\n    ? {\n        maxWidth: width,\n        marginRight: isOpen ? '0' : Number.parseInt(width) * -1,\n      }\n    : {};\n\n  return (\n    <section\n      style={styles}\n      className={classNames('sidepanel', fromSideClass, {\n        'is-open': isOpen,\n      })}\n    >\n      {children}\n    </section>\n  );\n};\n\nSidePanel.propTypes = {\n  from: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  children: PropTypes.node,\n  width: PropTypes.string,\n};\n\nexport default SidePanel;\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { ErrorBoundary, Icon } from '@ohif/ui';\nimport { servicesManager } from './../../App';\n\nimport './ErrorBoundaryDialog.css';\n\nconst { UIModalService } = servicesManager.services;\n\nconst ErrorBoundaryDialog = ({ context, children }) => {\n  const handleOnError = (error, componentStack) => {\n    const ErrorDialog = () => {\n      const [open, setOpen] = useState(false);\n\n      return (\n        <div className=\"ErrorFallback\" role=\"alert\">\n          <div className=\"ErrorBoundaryDialog\">\n            <h3 className=\"ErrorBoundaryDialogTitle\">\n              {context}: <span>{error.message}</span>\n            </h3>\n          </div>\n          <button\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\n            onClick={() => setOpen(s => !s)}\n          >\n            <Icon\n              name=\"chevron-down\"\n              className={classnames('ErrorBoundaryDialogIcon', {\n                opened: open,\n              })}\n            />\n            Stack Trace\n          </button>\n\n          {open && <pre>{componentStack}</pre>}\n        </div>\n      );\n    };\n\n    UIModalService.show({\n      content: ErrorDialog,\n      title: `Something went wrong in ${context}`,\n    });\n  };\n\n  const fallbackComponent = () => (\n    <div className=\"ErrorFallback\" role=\"alert\">\n      <p>\n        Error rendering {context}. <br /> Check the browser console for more\n        details.\n      </p>\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      fallbackComponent={fallbackComponent}\n      context={context}\n      onError={handleOnError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nErrorBoundaryDialog.propTypes = {\n  context: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErrorBoundaryDialog;\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\n\nexport default ErrorBoundaryDialog;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useLogger } from '@ohif/ui';\n\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\nimport { withDialog } from '@ohif/ui';\nimport moment from 'moment';\nimport ConnectedHeader from './ConnectedHeader.js';\nimport ToolbarRow from './ToolbarRow.js';\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\nimport SidePanel from './../components/SidePanel.js';\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\nimport { extensionManager } from './../App.js';\nimport { ReconstructionIssues } from './../../../core/src/enums.js';\nimport dcmjs from 'dcmjs';\n\n// Contexts\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\nimport UserManagerContext from '../context/UserManagerContext';\nimport AppContext from '../context/AppContext';\n\nimport './Viewer.css';\nimport { finished } from 'stream';\nimport { cornerstoneWADOImageLoader } from 'cornerstone-wado-image-loader';\n\nclass Viewer extends Component {\n  static propTypes = {\n    studies: PropTypes.arrayOf(\n      PropTypes.shape({\n        StudyInstanceUID: PropTypes.string.isRequired,\n        StudyDate: PropTypes.string,\n        PatientID: PropTypes.string,\n        displaySets: PropTypes.arrayOf(\n          PropTypes.shape({\n            displaySetInstanceUID: PropTypes.string.isRequired,\n            SeriesDescription: PropTypes.string,\n            SeriesNumber: PropTypes.number,\n            InstanceNumber: PropTypes.number,\n            numImageFrames: PropTypes.number,\n            Modality: PropTypes.string.isRequired,\n            images: PropTypes.arrayOf(\n              PropTypes.shape({\n                getImageId: PropTypes.func.isRequired,\n              })\n            ),\n          })\n        ),\n      })\n    ),\n    studyInstanceUIDs: PropTypes.array,\n    activeServer: PropTypes.shape({\n      type: PropTypes.string,\n      wadoRoot: PropTypes.string,\n    }),\n    onTimepointsUpdated: PropTypes.func,\n    onMeasurementsUpdated: PropTypes.func,\n    // window.store.getState().viewports.viewportSpecificData\n    viewports: PropTypes.object.isRequired,\n    // window.store.getState().viewports.activeViewportIndex\n    activeViewportIndex: PropTypes.number.isRequired,\n    isStudyLoaded: PropTypes.bool,\n    dialog: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { activeServer } = this.props;\n    const server = Object.assign({}, activeServer);\n\n    OHIF.measurements.MeasurementApi.setConfiguration({\n      dataExchange: {\n        retrieve: DICOMSR.retrieveMeasurements,\n        store: DICOMSR.storeMeasurements,\n      },\n      server,\n    });\n\n    OHIF.measurements.TimepointApi.setConfiguration({\n      dataExchange: {\n        retrieve: this.retrieveTimepoints,\n        store: this.storeTimepoints,\n        remove: this.removeTimepoint,\n        update: this.updateTimepoint,\n        disassociate: this.disassociateStudy,\n      },\n    });\n\n    this._getActiveViewport = this._getActiveViewport.bind(this);\n  }\n\n  state = {\n    isLeftSidePanelOpen: true,\n    isRightSidePanelOpen: false,\n    selectedRightSidePanel: '',\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\n    thumbnails: [],\n  };\n\n  componentWillUnmount() {\n    if (this.props.dialog) {\n      this.props.dialog.dismissAll();\n    }\n  }\n\n  retrieveTimepoints = filter => {\n    OHIF.log.info('retrieveTimepoints');\n\n    // Get the earliest and latest study date\n    let earliestDate = new Date().toISOString();\n    let latestDate = new Date().toISOString();\n    if (this.props.studies) {\n      latestDate = new Date('1000-01-01').toISOString();\n      this.props.studies.forEach(study => {\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\n        if (StudyDate < earliestDate) {\n          earliestDate = StudyDate;\n        }\n        if (StudyDate > latestDate) {\n          latestDate = StudyDate;\n        }\n      });\n    }\n\n    // Return a generic timepoint\n    return Promise.resolve([\n      {\n        timepointType: 'baseline',\n        timepointId: 'TimepointId',\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\n        PatientID: filter.PatientID,\n        earliestDate,\n        latestDate,\n        isLocked: false,\n      },\n    ]);\n  };\n\n  storeTimepoints = timepointData => {\n    OHIF.log.info('storeTimepoints');\n    return Promise.resolve();\n  };\n\n  updateTimepoint = (timepointData, query) => {\n    OHIF.log.info('updateTimepoint');\n    return Promise.resolve();\n  };\n\n  removeTimepoint = timepointId => {\n    OHIF.log.info('removeTimepoint');\n    return Promise.resolve();\n  };\n\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\n    OHIF.log.info('disassociateStudy');\n    return Promise.resolve();\n  };\n\n  onTimepointsUpdated = timepoints => {\n    if (this.props.onTimepointsUpdated) {\n      this.props.onTimepointsUpdated(timepoints);\n    }\n  };\n\n  onMeasurementsUpdated = measurements => {\n    if (this.props.onMeasurementsUpdated) {\n      this.props.onMeasurementsUpdated(measurements);\n    }\n  };\n\n  componentDidMount() {\n    const { studies, isStudyLoaded } = this.props;\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\n    const currentTimepointId = 'TimepointId';\n\n    const timepointApi = new TimepointApi(currentTimepointId, {\n      onTimepointsUpdated: this.onTimepointsUpdated,\n    });\n\n    const measurementApi = new MeasurementApi(timepointApi, {\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\n    });\n\n    this.currentTimepointId = currentTimepointId;\n    this.timepointApi = timepointApi;\n    this.measurementApi = measurementApi;\n\n    if (studies) {\n      const PatientID = studies[0] && studies[0].PatientID;\n\n      timepointApi.retrieveTimepoints({ PatientID });\n      if (isStudyLoaded) {\n        this.measurementApi.retrieveMeasurements(PatientID, [\n          currentTimepointId,\n        ]);\n      }\n\n      const activeViewport = this.props.viewports[this.props.activeViewportIndex];\n      const activeDisplaySetInstanceUID =\n        activeViewport ? activeViewport.displaySetInstanceUID : undefined;\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      studies,\n      isStudyLoaded,\n      activeViewportIndex,\n      viewports\n    } = this.props;\n\n    const activeViewport = viewports[activeViewportIndex];\n    const activeDisplaySetInstanceUID =\n      activeViewport ? activeViewport.displaySetInstanceUID : undefined;\n\n    const prevActiveViewport = prevProps.viewports[prevProps.activeViewportIndex];\n    const prevActiveDisplaySetInstanceUID =\n      prevActiveViewport ? prevActiveViewport.displaySetInstanceUID : undefined;\n\n    if (studies !== prevProps.studies ||\n      activeViewportIndex !== prevProps.activeViewportIndex ||\n      activeDisplaySetInstanceUID !== prevActiveDisplaySetInstanceUID\n      ) {\n\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\n      });\n    }\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\n      const PatientID = studies[0] && studies[0].PatientID;\n      const { currentTimepointId } = this;\n\n      this.timepointApi.retrieveTimepoints({ PatientID });\n      this.measurementApi.retrieveMeasurements(PatientID, [currentTimepointId]);\n    }\n  }\n\n  _getActiveViewport() {\n    return this.props.viewports[this.props.activeViewportIndex];\n  }\n\n  render() {\n    let VisiblePanelLeft, VisiblePanelRight;\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    panelExtensions.forEach(panelExt => {\n      panelExt.module.components.forEach(comp => {\n        if (comp.id === this.state.selectedRightSidePanel) {\n          VisiblePanelRight = comp.component;\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\n          VisiblePanelLeft = comp.component;\n        }\n      });\n    });\n\n    return (\n      <>\n        {/* HEADER */}\n        <WhiteLabelingContext.Consumer>\n          {whiteLabeling => (\n            <UserManagerContext.Consumer>\n              {userManager => (\n                <AppContext.Consumer>\n                  {appContext => (\n                    <ConnectedHeader\n                      linkText={\n                        appContext.appConfig.showStudyList\n                          ? 'Study List'\n                          : undefined\n                      }\n                      linkPath={\n                        appContext.appConfig.showStudyList ? '/' : undefined\n                      }\n                      userManager={userManager}\n                    >\n                      {whiteLabeling &&\n                        whiteLabeling.createLogoComponentFn &&\n                        whiteLabeling.createLogoComponentFn(React)}\n                    </ConnectedHeader>\n                  )}\n                </AppContext.Consumer>\n              )}\n            </UserManagerContext.Consumer>\n          )}\n        </WhiteLabelingContext.Consumer>\n\n        {/* TOOLBAR */}\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\n          <ToolbarRow\n            activeViewport={\n              this.props.viewports[this.props.activeViewportIndex]\n            }\n            isDerivedDisplaySetsLoaded={this.props.isDerivedDisplaySetsLoaded}\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\n            selectedLeftSidePanel={\n              this.state.isLeftSidePanelOpen\n                ? this.state.selectedLeftSidePanel\n                : ''\n            }\n            selectedRightSidePanel={\n              this.state.isRightSidePanelOpen\n                ? this.state.selectedRightSidePanel\n                : ''\n            }\n            handleSidePanelChange={(side, selectedPanel) => {\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\n              const openKey = `is${sideClicked}SidePanelOpen`;\n              const selectedKey = `selected${sideClicked}SidePanel`;\n              const updatedState = Object.assign({}, this.state);\n\n              const isOpen = updatedState[openKey];\n              const prevSelectedPanel = updatedState[selectedKey];\n              // RoundedButtonGroup returns `null` if selected button is clicked\n              const isSameSelectedPanel =\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\n\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\n\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\n              if (isClosedOrShouldClose) {\n                updatedState[openKey] = !updatedState[openKey];\n              }\n\n              this.setState(updatedState);\n            }}\n            studies={this.props.studies}\n          />\n        </ErrorBoundaryDialog>\n\n        {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\n        {/*<StudyPrefetcher studies={this.props.studies} />*/}\n\n        {/* VIEWPORTS + SIDEPANELS */}\n        <div className=\"FlexboxLayout\">\n          {/* LEFT */}\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\n              {VisiblePanelLeft ? (\n                <VisiblePanelLeft\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                />\n              ) : (\n                <ConnectedStudyBrowser\n                  studies={this.state.thumbnails}\n                  studyMetadata={this.props.studies}\n                />\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n\n          {/* MAIN */}\n          <div className={classNames('main-content')}>\n            <ErrorBoundaryDialog context=\"ViewerMain\">\n              <ConnectedViewerMain\n                studies={this.props.studies}\n                isStudyLoaded={this.props.isStudyLoaded}\n              />\n            </ErrorBoundaryDialog>\n          </div>\n\n          {/* RIGHT */}\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\n              {VisiblePanelRight && (\n                <VisiblePanelRight\n                  isOpen={this.state.isRightSidePanelOpen}\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                  activeViewport={\n                    this.props.viewports[this.props.activeViewportIndex]\n                  }\n                  getActiveViewport={this._getActiveViewport}\n                />\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withDialog(Viewer);\n\n/**\n * Async function to check if there are any inconsistences in the series.\n *\n * For segmentation checks that the geometry is consistent with the source images:\n * 1) no frames out of plane;\n * 2) have the same width and height.\n *\n * For reconstructable 3D volume:\n * 1) Is series multiframe?\n * 2) Do the frames have different dimensions/number of components/orientations?\n * 3) Has the series any missing frames or irregular spacing?\n * 4) Is the series 4D?\n *\n * If not reconstructable, MPR is disabled.\n * The actual computations are done in isDisplaySetReconstructable.\n *\n * @param {*object} displaySet\n * @returns {[string]} an array of strings containing the warnings\n */\nconst _checkForSeriesInconsistencesWarnings = async function (displaySet, studies) {\n  if (displaySet.inconsistencyWarnings) {\n    // warnings already checked and cached in displaySet\n    return displaySet.inconsistencyWarnings;\n  }\n  const inconsistencyWarnings = [];\n\n  if (displaySet.Modality !== 'SEG') {\n    if (displaySet.reconstructionIssues && displaySet.reconstructionIssues.length !== 0) {\n      displaySet.reconstructionIssues.forEach(warning => {\n        switch (warning) {\n          case ReconstructionIssues.DATASET_4D:\n            inconsistencyWarnings.push('The dataset is 4D.');\n            break;\n          case ReconstructionIssues.VARYING_IMAGESDIMENSIONS:\n            inconsistencyWarnings.push('The dataset frames have different dimensions (rows, columns).');\n            break;\n          case ReconstructionIssues.VARYING_IMAGESCOMPONENTS:\n            inconsistencyWarnings.push('The dataset frames have different components (Sample per pixel).');\n            break;\n          case ReconstructionIssues.VARYING_IMAGESORIENTATION:\n            inconsistencyWarnings.push('The dataset frames have different orientation.');\n            break;\n          case ReconstructionIssues.IRREGULAR_SPACING:\n            inconsistencyWarnings.push('The dataset frames have different pixel spacing.');\n            break;\n          case ReconstructionIssues.MULTIFFRAMES:\n            inconsistencyWarnings.push('The dataset is a multiframes.');\n            break;\n          default:\n            break;\n        }\n      });\n      inconsistencyWarnings.push('The datasets is not a reconstructable 3D volume. MPR mode is not available.');\n    }\n\n    if (displaySet.missingFrames &&\n      (!displaySet.reconstructionIssues ||\n        (displaySet.reconstructionIssues && !displaySet.reconstructionIssues.find(warn => warn === ReconstructionIssues.DATASET_4D)))) {\n          inconsistencyWarnings.push('The datasets is missing frames: ' + displaySet.missingFrames + '.');\n    }\n  } else {\n    const segMetadata = displaySet.metadata;\n    if (!segMetadata) {\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\n      return inconsistencyWarnings;\n    }\n\n    const { referencedDisplaySet } = displaySet.getSourceDisplaySet(studies, false);\n    if (!referencedDisplaySet) {\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\n      return inconsistencyWarnings;\n    }\n\n    const imageIds = referencedDisplaySet.images.map(image => image.getImageId());\n    if (!imageIds || imageIds.length === 0) {\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\n      return inconsistencyWarnings;\n    }\n\n    for (\n      let i = 0, groupsLen = segMetadata.PerFrameFunctionalGroupsSequence.length;\n      i < groupsLen;\n      ++i\n    ) {\n      const PerFrameFunctionalGroups = segMetadata.PerFrameFunctionalGroupsSequence[i];\n      if (!PerFrameFunctionalGroups) {\n        continue;\n      }\n\n      let SourceImageSequence = undefined;\n      if (segMetadata.SourceImageSequence) {\n        SourceImageSequence = segMetadata.SourceImageSequence[i];\n      } else if (PerFrameFunctionalGroups.DerivationImageSequence) {\n        SourceImageSequence =\n          PerFrameFunctionalGroups.DerivationImageSequence\n            .SourceImageSequence;\n      }\n      if (!SourceImageSequence) {\n        if (inconsistencyWarnings.length === 0) {\n          const warningMessage = 'The segmentation ' +\n            'has frames out of plane respect to the source images.';\n            inconsistencyWarnings.push(warningMessage);\n        }\n        continue;\n      }\n\n      const {\n        ReferencedSOPInstanceUID,\n      } = SourceImageSequence;\n\n      const imageId = imageIds.find(imageId => {\n        const sopCommonModule = cornerstone.metaData.get(\n            \"sopCommonModule\",\n            imageId\n        );\n        if (!sopCommonModule) {\n            return;\n        }\n\n        return sopCommonModule.sopInstanceUID === ReferencedSOPInstanceUID;\n      });\n\n      if (!imageId) {\n        continue;\n      }\n\n      const sourceImageMetadata = cornerstone.metaData.get(\n        \"instance\",\n        imageId\n      );\n      if (\n        segMetadata.Rows !== sourceImageMetadata.Rows ||\n        segMetadata.Columns !== sourceImageMetadata.Columns\n      ) {\n        const warningMessage = 'The segmentation ' +\n          'has frames with different geometry ' +\n          'dimensions (Rows and Columns) respect to the source images.';\n          inconsistencyWarnings.push(warningMessage);\n        break;\n      }\n    }\n\n    if (inconsistencyWarnings.length !== 0) {\n      const warningMessage = 'The segmentation format is not supported yet. ' +\n        'The segmentation data (segments) could not be loaded.';\n        inconsistencyWarnings.push(warningMessage);\n    }\n  }\n\n  // cache the warnings\n  displaySet.inconsistencyWarnings = inconsistencyWarnings;\n  return inconsistencyWarnings;\n}\n\n/**\n * Checks if display set is active, i.e. if the series is currently shown\n * in the active viewport.\n *\n * For data display set, this functions checks if the active\n * display set instance uid in the current active viewport is the same of the\n * thumbnail one.\n *\n * For derived modalities (e.g., SEG and RTSTRUCT), the function gets the\n * reference display set and then checks the reference uid with the active\n * display set instance uid.\n *\n * @param {displaySet} displaySet\n * @param {Study[]} studies\n * @param {string} activeDisplaySetInstanceUID\n * @returns {boolean} is active.\n */\n const _isDisplaySetActive = function(displaySet, studies, activeDisplaySetInstanceUID) {\n  let active = false;\n\n  const {\n    displaySetInstanceUID,\n  } = displaySet;\n\n  // TO DO: in the future, we could possibly support new modalities\n  // we should have a list of all modalities here, instead of having hard coded checks\n  if (displaySet.Modality !== 'SEG' &&\n    displaySet.Modality !== 'RTSTRUCT' &&\n    displaySet.Modality !== 'RTDOSE') {\n    active = activeDisplaySetInstanceUID === displaySetInstanceUID;\n  } else if (displaySet.getSourceDisplaySet){\n    if (displaySet.Modality === 'SEG') {\n      const { referencedDisplaySet } = displaySet.getSourceDisplaySet(studies, false);\n      active = referencedDisplaySet ?\n        activeDisplaySetInstanceUID === referencedDisplaySet.displaySetInstanceUID :\n          false;\n    } else {\n      const referencedDisplaySet = displaySet.getSourceDisplaySet(studies, false);\n      active = referencedDisplaySet ?\n        activeDisplaySetInstanceUID === referencedDisplaySet.displaySetInstanceUID :\n          false;\n    }\n  }\n\n  return active;\n};\n\n/**\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\n * a mapping layer?\n *\n * TODO[react]:\n * - Add showStackLoadingProgressBar option\n *\n * @param {Study[]} studies\n * @param {string} activeDisplaySetInstanceUID\n */\nconst _mapStudiesToThumbnails = function(studies, activeDisplaySetInstanceUID) {\n  return studies.map(study => {\n    const { StudyInstanceUID } = study;\n    const thumbnails = study.displaySets.map(displaySet => {\n      const {\n        displaySetInstanceUID,\n        SeriesDescription,\n        InstanceNumber,\n        numImageFrames,\n        SeriesNumber,\n      } = displaySet;\n\n      let imageId;\n      let altImageText;\n\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\n        // TODO: We want to replace this with a thumbnail showing\n        // the segmentation map on the image, but this is easier\n        // and better than what we have right now.\n        altImageText = 'SEG';\n      } else if (displaySet.images && displaySet.images.length) {\n        const imageIndex = Math.floor(displaySet.images.length / 2);\n        imageId = displaySet.images[imageIndex].getImageId();\n      } else {\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\n      }\n\n      const hasWarnings = _checkForSeriesInconsistencesWarnings(displaySet, studies);\n      const active = _isDisplaySetActive(displaySet, studies, activeDisplaySetInstanceUID)\n\n      return {\n        active,\n        imageId,\n        altImageText,\n        displaySetInstanceUID,\n        SeriesDescription,\n        InstanceNumber,\n        numImageFrames,\n        SeriesNumber,\n        hasWarnings,\n      };\n    });\n\n    return {\n      StudyInstanceUID,\n      thumbnails,\n    };\n  });\n};\n","import { connect } from 'react-redux';\nimport Viewer from './Viewer.js';\nimport OHIF from '@ohif/core';\n\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n  return servers.servers.find(isActive);\n};\n\nconst mapStateToProps = state => {\n  const { viewports, servers } = state;\n  return {\n    viewports: viewports.viewportSpecificData,\n    activeViewportIndex: viewports.activeViewportIndex,\n    activeServer: getActiveServer(servers),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTimepointsUpdated: timepoints => {\n      dispatch(setTimepoints(timepoints));\n    },\n    onMeasurementsUpdated: measurements => {\n      dispatch(setMeasurements(measurements));\n    },\n  };\n};\n\nconst ConnectedViewer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Viewer);\n\nexport default ConnectedViewer;\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { metadata, studies, utils, log } from '@ohif/core';\nimport usePrevious from '../customHooks/usePrevious';\n\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from './../App.js';\nimport { useSnackbarContext, ErrorPage } from '@ohif/ui';\n\n// Contexts\nimport AppContext from '../context/AppContext';\nimport NotFound from '../routes/NotFound';\n\nconst { OHIFStudyMetadata, OHIFSeriesMetadata } = metadata;\nconst { retrieveStudiesMetadata, deleteStudyMetadataPromise } = studies;\nconst { studyMetadataManager, makeCancelable } = utils;\n\nconst _promoteToFront = (list, values, searchMethod) => {\n  let listCopy = [...list];\n  let response = [];\n  let promotedCount = 0;\n\n  const arrayValues = values.split(',');\n  arrayValues.forEach(value => {\n    const index = listCopy.findIndex(searchMethod.bind(undefined, value));\n\n    if (index >= 0) {\n      const [itemToPromote] = listCopy.splice(index, 1);\n      response[promotedCount] = itemToPromote;\n      promotedCount++;\n    }\n  });\n\n  return {\n    promoted: promotedCount === arrayValues.length,\n    data: [...response, ...listCopy],\n  };\n};\n\n/**\n * Promote series to front if find found equivalent on filters object\n * @param {Object} study - study reference to promote series against\n * @param {Object} [filters] - Object containing filters to be applied\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\n */\nconst _promoteList = (study, studyMetadata, filters, isFilterStrategy) => {\n  let promoted = false;\n  // Promote only if no filter should be applied\n  if (!isFilterStrategy) {\n    promoted = _promoteStudyDisplaySet(study, studyMetadata, filters);\n  }\n\n  return promoted;\n};\n\nconst _promoteStudyDisplaySet = (study, studyMetadata, filters) => {\n  let promoted = false;\n  const queryParamsLength = Object.keys(filters).length;\n  const shouldPromoteToFront = queryParamsLength > 0;\n\n  if (shouldPromoteToFront) {\n    const { seriesInstanceUID } = filters;\n\n    const _seriesLookup = (valueToCompare, displaySet) => {\n      return displaySet.SeriesInstanceUID === valueToCompare;\n    };\n    const promotedResponse = _promoteToFront(\n      studyMetadata.getDisplaySets(),\n      seriesInstanceUID,\n      _seriesLookup\n    );\n\n    study.displaySets = promotedResponse.data;\n    promoted = promotedResponse.promoted;\n  }\n\n  return promoted;\n};\n\n/**\n * Method to identify if query param (from url) was applied to given list\n * @param {Object} study - study reference to promote series against\n * @param {Object} [filters] - Object containing filters to be applied\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\n */\nconst _isQueryParamApplied = (study, filters = {}, isFilterStrategy) => {\n  const { seriesInstanceUID } = filters;\n  let applied = true;\n  // skip in case no filter or no toast manager\n\n  if (!seriesInstanceUID) {\n    return applied;\n  }\n  const seriesInstanceUIDs = seriesInstanceUID.split(',');\n\n  let validateFilterApplied = () => {\n    const sameSize = arrayToInspect.length === seriesInstanceUIDs.length;\n    if (!sameSize) {\n      return;\n    }\n\n    return arrayToInspect.every(item =>\n      seriesInstanceUIDs.some(\n        seriesInstanceUIDStr => seriesInstanceUIDStr === item.SeriesInstanceUID\n      )\n    );\n  };\n\n  let validatePromoteApplied = () => {\n    let isValid = true;\n    for (let index = 0; index < seriesInstanceUIDs.length; index++) {\n      const seriesInstanceUIDStr = seriesInstanceUIDs[index];\n      const resultSeries = arrayToInspect[index];\n\n      if (\n        !resultSeries ||\n        resultSeries.SeriesInstanceUID !== seriesInstanceUIDStr\n      ) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid;\n  };\n\n  const { series = [], displaySets = [] } = study;\n  const arrayToInspect = isFilterStrategy ? series : displaySets;\n  const validateMethod = isFilterStrategy\n    ? validateFilterApplied\n    : validatePromoteApplied;\n\n  if (!arrayToInspect) {\n    applied = false;\n  } else {\n    applied = validateMethod();\n  }\n\n  return applied;\n};\nconst _showUserMessage = (queryParamApplied, message, dialog = {}) => {\n  if (queryParamApplied) {\n    return;\n  }\n\n  const { show: showUserMessage = () => {} } = dialog;\n  showUserMessage({\n    message,\n  });\n};\n\nconst _addSeriesToStudy = (studyMetadata, series) => {\n  const sopClassHandlerModules =\n    extensionManager.modules['sopClassHandlerModule'];\n  const study = studyMetadata.getData();\n  const seriesMetadata = new OHIFSeriesMetadata(series, study);\n  const existingSeries = studyMetadata.getSeriesByUID(series.SeriesInstanceUID);\n  if (existingSeries) {\n    studyMetadata.updateSeries(series.SeriesInstanceUID, seriesMetadata);\n  } else {\n    studyMetadata.addSeries(seriesMetadata);\n  }\n\n  studyMetadata.createAndAddDisplaySetsForSeries(\n    sopClassHandlerModules,\n    seriesMetadata\n  );\n\n  study.displaySets = studyMetadata.getDisplaySets();\n  study.derivedDisplaySets = studyMetadata.getDerivedDatasets({\n    Modality: series.Modality,\n  });\n\n  _updateStudyMetadataManager(study, studyMetadata);\n};\n\nconst _updateStudyMetadataManager = (study, studyMetadata) => {\n  const { StudyInstanceUID } = study;\n\n  if (!studyMetadataManager.get(StudyInstanceUID)) {\n    studyMetadataManager.add(studyMetadata);\n  }\n};\n\nconst _updateStudyDisplaySets = (study, studyMetadata) => {\n  const sopClassHandlerModules =\n    extensionManager.modules['sopClassHandlerModule'];\n\n  if (!study.displaySets) {\n    study.displaySets = studyMetadata.createDisplaySets(sopClassHandlerModules);\n  }\n\n  if (study.derivedDisplaySets) {\n    studyMetadata._addDerivedDisplaySets(study.derivedDisplaySets);\n  }\n};\n\nconst _thinStudyData = study => {\n  return {\n    StudyInstanceUID: study.StudyInstanceUID,\n    series: study.series.map(item => ({\n      SeriesInstanceUID: item.SeriesInstanceUID,\n    })),\n  };\n};\n\nfunction ViewerRetrieveStudyData({\n  server,\n  studyInstanceUIDs,\n  seriesInstanceUIDs,\n  clearViewportSpecificData,\n  setStudyData,\n}) {\n  // hooks\n  const [error, setError] = useState(false);\n  const [studies, setStudies] = useState([]);\n  const [isStudyLoaded, setIsStudyLoaded] = useState(false);\n  const snackbarContext = useSnackbarContext();\n  const { appConfig = {} } = useContext(AppContext);\n  const {\n    filterQueryParam: isFilterStrategy = false,\n    maxConcurrentMetadataRequests,\n  } = appConfig;\n\n  let cancelableSeriesPromises;\n  let cancelableStudiesPromises;\n  /**\n   * Callback method when study is totally loaded\n   * @param {object} study study loaded\n   * @param {object} studyMetadata studyMetadata for given study\n   * @param {Object} [filters] - Object containing filters to be applied\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n   */\n  const studyDidLoad = (study, studyMetadata, filters) => {\n    // User message\n    const promoted = _promoteList(\n      study,\n      studyMetadata,\n      filters,\n      isFilterStrategy\n    );\n\n    // Clear viewport to allow new promoted one to be displayed\n    if (promoted) {\n      clearViewportSpecificData(0);\n    }\n\n    const isQueryParamApplied = _isQueryParamApplied(\n      study,\n      filters,\n      isFilterStrategy\n    );\n    // Show message in case not promoted neither filtered but should to\n    _showUserMessage(\n      isQueryParamApplied,\n      'Query parameters were not totally applied. It might be using original series list for given study.',\n      snackbarContext\n    );\n\n    setStudies([...studies, study]);\n  };\n\n  /**\n   * Method to process studies. It will update displaySet, studyMetadata, load remaining series, ...\n   * @param {Array} studiesData Array of studies retrieved from server\n   * @param {Object} [filters] - Object containing filters to be applied\n   * @param {string} [filters.seriesInstanceUID] - series instance uid to filter results against\n   */\n  const processStudies = (studiesData, filters) => {\n    if (Array.isArray(studiesData) && studiesData.length > 0) {\n      // Map studies to new format, update metadata manager?\n      const studies = studiesData.map(study => {\n        setStudyData(study.StudyInstanceUID, _thinStudyData(study));\n        const studyMetadata = new OHIFStudyMetadata(\n          study,\n          study.StudyInstanceUID\n        );\n\n        _updateStudyDisplaySets(study, studyMetadata);\n        _updateStudyMetadataManager(study, studyMetadata);\n\n        // Attempt to load remaning series if any\n        cancelableSeriesPromises[study.StudyInstanceUID] = makeCancelable(\n          loadRemainingSeries(studyMetadata)\n        )\n          .then(result => {\n            if (result && !result.isCanceled) {\n              studyDidLoad(study, studyMetadata, filters);\n            }\n          })\n          .catch(error => {\n            if (error && !error.isCanceled) {\n              setError(error);\n              log.error(error);\n            }\n          })\n          .finally(() => {\n            setIsStudyLoaded(true);\n          });\n\n        return study;\n      });\n\n      setStudies(studies);\n    }\n  };\n\n  const forceRerender = () => setStudies(studies => [...studies]);\n\n  const loadRemainingSeries = async studyMetadata => {\n    const { seriesLoader } = studyMetadata.getData();\n    if (!seriesLoader) return;\n\n    const loadNextSeries = async () => {\n      if (!seriesLoader.hasNext()) return;\n      const series = await seriesLoader.next();\n      _addSeriesToStudy(studyMetadata, series);\n      forceRerender();\n      return loadNextSeries();\n    };\n\n    const concurrentRequestsAllowed =\n      maxConcurrentMetadataRequests || studyMetadata.getSeriesCount();\n    const promises = Array(concurrentRequestsAllowed)\n      .fill(null)\n      .map(loadNextSeries);\n    const remainingPromises = await Promise.all(promises);\n    setIsStudyLoaded(true);\n    return remainingPromises;\n  };\n\n  const loadStudies = async () => {\n    try {\n      const filters = {};\n      // Use the first, discard others\n      const seriesInstanceUID = seriesInstanceUIDs && seriesInstanceUIDs[0];\n      const retrieveParams = [server, studyInstanceUIDs];\n\n      if (seriesInstanceUID) {\n        filters.seriesInstanceUID = seriesInstanceUID;\n        // Query param filtering controlled by appConfig property\n        if (isFilterStrategy) {\n          retrieveParams.push(filters);\n        }\n      }\n\n      if (\n        appConfig.splitQueryParameterCalls ||\n        appConfig.enableGoogleCloudAdapter\n      ) {\n        retrieveParams.push(true); // Seperate SeriesInstanceUID filter calls.\n      }\n\n      cancelableStudiesPromises[studyInstanceUIDs] = makeCancelable(\n        retrieveStudiesMetadata(...retrieveParams)\n      )\n        .then(result => {\n          if (result && !result.isCanceled) {\n            processStudies(result, filters);\n          }\n        })\n        .catch(error => {\n          if (error && !error.isCanceled) {\n            setError(error);\n            log.error(error);\n          }\n        });\n    } catch (error) {\n      if (error) {\n        setError(error);\n        log.error(error);\n      }\n    }\n  };\n\n  const purgeCancellablePromises = useCallback(() => {\n    for (let studyInstanceUIDs in cancelableStudiesPromises) {\n      if ('cancel' in cancelableStudiesPromises[studyInstanceUIDs]) {\n        cancelableStudiesPromises[studyInstanceUIDs].cancel();\n      }\n    }\n\n    for (let studyInstanceUIDs in cancelableSeriesPromises) {\n      if ('cancel' in cancelableSeriesPromises[studyInstanceUIDs]) {\n        cancelableSeriesPromises[studyInstanceUIDs].cancel();\n        deleteStudyMetadataPromise(studyInstanceUIDs);\n        studyMetadataManager.remove(studyInstanceUIDs);\n      }\n    }\n  });\n\n  const prevStudyInstanceUIDs = usePrevious(studyInstanceUIDs);\n\n  useEffect(() => {\n    const hasStudyInstanceUIDsChanged = !(\n      prevStudyInstanceUIDs &&\n      prevStudyInstanceUIDs.every(e => studyInstanceUIDs.includes(e))\n    );\n\n    if (hasStudyInstanceUIDsChanged) {\n      studyMetadataManager.purge();\n      purgeCancellablePromises();\n    }\n  }, [prevStudyInstanceUIDs, purgeCancellablePromises, studyInstanceUIDs]);\n\n  useEffect(() => {\n    cancelableSeriesPromises = {};\n    cancelableStudiesPromises = {};\n    loadStudies();\n\n    return () => {\n      purgeCancellablePromises();\n    };\n  }, []);\n\n  if (error) {\n    const content = JSON.stringify(error);\n    if (content.includes('404') || content.includes('NOT_FOUND')) {\n      return <NotFound />;\n    }\n\n    return <NotFound message=\"Failed to retrieve study data\" />;\n  }\n\n  return (\n    <ConnectedViewer\n      studies={studies}\n      isStudyLoaded={isStudyLoaded}\n      studyInstanceUIDs={studyInstanceUIDs}\n    />\n  );\n}\n\nViewerRetrieveStudyData.propTypes = {\n  studyInstanceUIDs: PropTypes.array.isRequired,\n  seriesInstanceUIDs: PropTypes.array,\n  server: PropTypes.object,\n  clearViewportSpecificData: PropTypes.func.isRequired,\n  setStudyData: PropTypes.func.isRequired,\n};\n\nexport default ViewerRetrieveStudyData;\n","import { connect } from 'react-redux';\nimport ViewerRetrieveStudyData from './ViewerRetrieveStudyData.js';\nimport OHIF from '@ohif/core';\n\nconst { clearViewportSpecificData, setStudyData } = OHIF.redux.actions;\nconst isActive = a => a.active === true;\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeServer = state.servers.servers.find(isActive);\n\n  return {\n    server: ownProps.server || activeServer,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStudyData: (StudyInstanceUID, data) => {\n      dispatch(setStudyData(StudyInstanceUID, data));\n    },\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    },\n  };\n};\n\nconst ConnectedViewerRetrieveStudyData = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerRetrieveStudyData);\n\nexport default ConnectedViewerRetrieveStudyData;\n"],"sourceRoot":""}